---
description: 
globs: 
alwaysApply: false
---
---
description:
globs:
alwaysApply: false
---
# Rule: Generating Product Roadmap Feature Documentation

## Goal

To guide an AI assistant in creating a detailed Product Requirements Document (PRD) in Markdown format, based on an initial user prompt. The PRD should be clear, actionable, and suitable for a junior developer to understand and implement the feature.

## Process

1. **Receive Initial Prompt:** The user provides a brief description or request for a new feature or functionality.
2. **Ask Clarifying Questions:** Before writing the PRD, the AI *must* ask clarifying questions to gather sufficient detail. The goal is to understand the "what" and "why" of the feature, not necessarily the "how" (which the developer will figure out). Number these questions.
3. **Generate PRD:** Based on the initial prompt and the user's answers to the clarifying questions, generate a PRD using the structure outlined below.

## Clarifying Questions (Examples)

The AI should adapt its questions based on the prompt, but here are some common areas to explore:

* **Problem/Goal:** "What problem does this feature solve for the user?" or "What is the main goal we want to achieve with this feature?"
* **Target User:** "Who is the primary user of this feature?"
* **Core Functionality:** "Can you describe the key actions a user should be able to perform with this feature?"
* **User Stories:** "Could you provide a few user stories? (e.g., As a [type of user], I want to [perform an action] so that [benefit].)"
* **Acceptance Criteria:** "How will we know when this feature is successfully implemented? What are the key success criteria?"
* **Scope/Boundaries:** "Are there any specific things this feature *should not* do (non-goals)?"
* **Data Requirements:** "What kind of data does this feature need to display or manipulate?"
* **Design/UI:** "Are there any existing design mockups or UI guidelines to follow?" or "Can you describe the desired look and feel?"
* **Edge Cases:** "Are there any potential edge cases or error conditions we should consider?"</artifacts:parameter>

## Code Analysis Questions

1. **Receive Initial Prompt:** The user provides a brief description or request for a new feature or functionality.

2. **Request Existing Functionality Context:** Before anything else, ask the user to provide:
   - Relevant existing code examples that this feature should integrate with or reference
   - List of existing functionality/patterns this feature should follow
   - Any existing components, hooks, or patterns that should be extended

3. **Analyze Provided Code:** If code is provided, extract and summarize:
   - Key patterns and architectural approaches
   - Existing components that could be extended or referenced
   - Data models and schemas that need integration
   - UI/UX patterns that should be maintained
   - Present these findings to the user for confirmation

4. **Ask Clarifying Questions:** After understanding existing context, ask clarifying questions to gather sufficient detail about the new feature. Number these questions.

5. **Generate PRD:** Based on all inputs (initial prompt, existing functionality analysis, and clarifying answers), generate a PRD that explicitly references existing patterns and integration points.

## Feature Documentation Structure

The generated documentation should use this flexible template, including only relevant sections:

### Always Include (Core Sections):
1. **Numbered Section Header:** `<section id="X-feature-name">` where X is the sequential number
2. **Feature Name:** Clear, descriptive title
3. **Status Indicators:** Status, Priority, Effort, Business Value
4. **Core Definition:** Problem statement and solution summary
5. **Requirements Overview:** Key functional requirements
6. **Success Metrics:** Measurable outcomes
7. **Open Questions:** Areas needing clarification

### Include If Relevant (Expandable Sections):
8. **Scope & Boundaries:** For complex features with unclear boundaries
9. **Data Requirements:** For data-heavy features requiring schema changes or integrations
10. **UI/UX Considerations:** For UI-heavy features requiring significant interface work
11. **Technical Architecture:** For technically complex features requiring infrastructure changes
12. **User Journey:** For workflow-heavy features requiring detailed user flow mapping

## Content Adaptation Rules

1. **Always include:** Core Definition, Requirements Overview, Success Metrics, Open Questions
2. **Include if mentioned:** Any of the expandable sections based on user input
3. **Use placeholders for:** Sections that are relevant but not yet detailed (e.g., "*Schema and integration needs to be determined during technical planning*")
4. **Skip entirely:** Sections that don't apply to this feature type
5. **Auto-detect feature type:**
   - UI keywords → expand UI/UX Considerations section
   - Data/schema keywords → expand Data Requirements section
   - Integration keywords → expand Technical Architecture section
   - User workflow keywords → expand User Journey section

## Template Structure

```markdown
<section id="X-feature-name">
## X. Feature Name

**Status:** [IDEA|RESEARCH|PLANNED|IN_PROGRESS|SHIPPED|ARCHIVED]  
**Priority:** High/Medium/Low  
**Effort:** Small/Medium/Large  
**Business Value:** High/Medium/Low

### Core Definition
**Problem:** What user pain point does this solve?
**Solution:** 2-3 sentence description of the approach

### Requirements Overview
- Must have X
- Must integrate with Y  
- Must support Z users

<!-- Expandable sections - include only what's relevant -->

### Scope & Boundaries *(if complex)*
**In Scope:**
- Specific capability A
- Integration with system B

**Out of Scope:**
- Advanced feature C (future consideration)
- Migration of legacy D

### Data Requirements *(if data-heavy)*
**Schema Changes:**
- Extend Visit model with quickNotes field
- Add status enum to CoachingLog

**External Data:**
- Sync with Monday.com boards
- Import from Google Calendar

### UI/UX Considerations *(if UI-heavy)*
**Key Interactions:**
- Mobile-first quick actions
- Offline capability required
- Real-time status updates

**Component Strategy:**
- Extend existing Card component
- New QuickActionBar component needed

### Technical Architecture *(if technically complex)*
**Dependencies:**
- Requires real-time sync infrastructure
- Needs offline-first data layer

**Implementation Approach:**
- WebSocket for live updates
- React Query for optimistic updates

### User Journey *(if workflow-heavy)*
**Primary Flow:**
1. Coach opens daily dashboard
2. Sees prioritized visit list
3. Taps to start visit
4. Quick status updates during visit

**Edge Cases:**
- Network interruption during visit
- Last-minute schedule changes

### Success Metrics
- Increase X by Y%
- Reduce Z by W minutes

### Dependencies
**Requires:** [link to other features if applicable]
**Blocks:** [link to other features if applicable]

### Open Questions
- How should we handle edge case X?
- What's the migration strategy for existing Y?

</section>
```

## PRD Structure

Use numbered sections with this format: `<section id="X-feature-name">` where X is the sequential number.

The generated PRD should include the following sections:

1. **Introduction/Overview:** Briefly describe the feature and the problem it solves. State the goal.
2. **Goals:** List the specific, measurable objectives for this feature.
3. **User Stories:** Detail the user narratives describing feature usage and benefits.
4. **Functional Requirements:** List the specific functionalities the feature must have. Use clear, concise language (e.g., "The system must allow users to upload a profile picture."). Number these requirements.
5. **Non-Goals (Out of Scope):** Clearly state what this feature will *not* include to manage scope.
6. **Design Considerations (Optional):** Link to mockups, describe UI/UX requirements, or mention relevant components/styles if applicable.
7. **Technical Considerations (Optional):** Mention any known technical constraints, dependencies, or suggestions (e.g., "Should integrate with the existing Auth module").
8. **Success Metrics:** How will the success of this feature be measured? (e.g., "Increase user engagement by 10%", "Reduce support tickets related to X").
9. **Open Questions:** List any remaining questions or areas needing further clarification.</artifacts:parameter>

## Target Audience

Assume the primary reader is a **junior developer** or **product team member**. Therefore, requirements should be explicit, unambiguous, and avoid jargon where possible. Provide enough detail for them to understand the feature's purpose and core logic while remaining flexible for future refinement.

## Organization Structure

Features should be organized within domain-specific files following this structure:

```markdown
docs-product-roadmap/
├── core/                    # School, Staff, Cycle entities
│   ├── school-features.md
│   ├── staff-features.md
│   └── cycle-features.md
├── operations/              # Visits, Coaching, Scheduling
│   ├── visit-features.md
│   ├── coaching-features.md
│   └── scheduling-features.md
├── integrations/           # Monday.com, external APIs
│   ├── monday-features.md
│   └── api-features.md
└── platform/               # Auth, Admin, Analytics
    ├── auth-features.md
    ├── admin-features.md
    └── analytics-features.md
```

Within each file, organize features by priority or effort:
- Quick Wins (Small effort, high value)
- Major Initiatives (Large effort, high value)
- Future Considerations (Ideas to revisit)

## Output Requirements

* **Format:** Markdown (`.md`)
* **Section Numbering:** Sequential numbers for easy reference and AI comprehension
* **Flexible Content:** Include only relevant sections based on feature type and complexity
* **Clear Status Tracking:** Use standardized status indicators for roadmap management

## Final Instructions

1. **Do NOT start implementing** the feature documentation
2. **Always ask clarifying questions** to understand the feature requirements
3. **Use the flexible template** - include only sections that are relevant to the specific feature
4. **Auto-detect feature type** and expand appropriate sections based on user input
5. **Maintain consistent numbering** within the domain file structure


## Target Audience

Assume the primary reader of the PRD is a **junior developer**. Therefore, requirements should be explicit, unambiguous, and avoid jargon where possible. Provide enough detail for them to understand the feature's purpose and core logic.

## Organization Structure

Features should be organized within domain-specific files:

```markdown
docs-product-roadmap/
├── core/                    # School, Staff, Cycle entities
├── operations/              # Visits, Coaching, Scheduling  
├── integrations/           # Monday.com, external APIs
└── platform/               # Auth, Admin, Analytics
```

## Output

* **Format:** Markdown (`.md`)
* **Section Format:** Use `<section id="X-feature-name">` with sequential numbering
* **Emphasis:** Be brief and specific. Avoid unnecessary wordiness.

## Context Strategy Integration

Include this section in every PRD to support staged implementation:

```markdown
## Implementation Strategy

**Recommended Context Templates:**
- Primary: [ui-component-context.md | data-layer-context.md | integration-context.md]
- Domain Reference: [school | staff | visit | coaching | scheduling]

**Staging Approach:**
1. Schema Implementation (data-layer-context.md)
2. Model Creation (data-layer-context.md)
3. Server Actions (data-layer-context.md)  
4. UI Components (ui-component-context.md)
5. Integration (integration-context.md, if needed)

**Quality Gates:**
- DRY: Extend existing [identify specific types/components]
- Abstraction: Fits [identify layer] in component hierarchy
- Separation: Single responsibility of [identify concern]
```

## Final Instructions

1. Do NOT start implementing the PRD
2. Make sure to ask the user clarifying questions
3. Take the user's answers to the clarifying questions and improve the PRD
4. Include Implementation Strategy section with context templates
5. Emphasize brevity - don't add words for the sake of adding words</artifacts:parameter>
tions you specified, trimmed all the excess, and added the organization structure and brevity emphasis. Much cleaner.