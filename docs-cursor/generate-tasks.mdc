---
description: 
globs: 
alwaysApply: false
---
# TanStack Form Migration - Enhanced Task List

## Context Strategy

**Primary Context Template:** UI Component Context (focusing on direct component composition)
**Domain Reference:** Existing core field components (`Input`, `Select`, `ReferenceSelect`) and TanStack Form integration patterns

## Relevant Files

**Pattern References:**
- `src/components/core/fields/Input.tsx` - WHEN: creating TanStack field wrappers, WHY: already has TanStack integration via `fieldApi` prop
- `src/components/core/fields/Select.tsx` - WHEN: creating select field wrapper, WHY: established styling and TanStack integration pattern  
- `src/components/core/fields/ReferenceSelect.tsx` - WHEN: creating reference field wrapper, WHY: complex reference data handling pattern
- `src/components/composed/forms/FormLayout.tsx` - WHEN: maintaining form structure, WHY: layout component works with any form implementation

**New Files to Create:**
- `src/components/composed/forms/fields/TextFieldTanStack.tsx` (~80 lines)
  - PURPOSE: Direct TanStack Form text field wrapper
  - IMPORTS: `@components/core/fields/Input`, `@tanstack/react-form`
  - EXPORTS: `TextFieldTanStack` component with `TextFieldTanStackProps` interface
  - REPLACES: Configuration-driven text field rendering

- `src/components/composed/forms/fields/SelectFieldTanStack.tsx` (~100 lines)
  - PURPOSE: Direct TanStack Form select field wrapper
  - IMPORTS: `@components/core/fields/Select`, `@tanstack/react-form`
  - EXPORTS: `SelectFieldTanStack` component with `SelectFieldTanStackProps` interface
  - REPLACES: Configuration-driven select field rendering

- `src/components/composed/forms/fields/ReferenceFieldTanStack.tsx` (~120 lines)
  - PURPOSE: Direct TanStack Form reference field wrapper
  - IMPORTS: `@components/core/fields/ReferenceSelect`, `@tanstack/react-form`
  - EXPORTS: `ReferenceFieldTanStack` component with `ReferenceFieldTanStackProps` interface
  - REPLACES: Configuration-driven reference field rendering

- `src/components/composed/forms/fields/DateFieldTanStack.tsx` (~80 lines)
  - PURPOSE: Direct TanStack Form date field wrapper
  - IMPORTS: `@components/core/fields/Input`, `@tanstack/react-form`
  - EXPORTS: `DateFieldTanStack` component with `DateFieldTanStackProps` interface
  - REPLACES: Configuration-driven date field rendering

- `src/components/composed/forms/fields/index.ts` (~20 lines)
  - PURPOSE: Barrel exports for all TanStack field components
  - IMPORTS: All TanStack field components
  - EXPORTS: All TanStack field components for easy importing

**Files to Modify:**
- `src/components/domain/schools/SchoolForm.tsx` - UPDATE: Replace config-driven rendering with direct composition
- `src/components/domain/staff/NYCPSStaffForm.tsx` - UPDATE: Replace config-driven rendering with direct composition
- `src/app/test/observations/ObservationForm.tsx` - UPDATE: Replace config-driven rendering with direct composition
- `src/components/domain/coaching/ActionPlanStageForm.tsx` - UPDATE: Replace config-driven rendering with direct composition
- `src/components/features/coaching/components/CoachingActionPlanForm.tsx` - UPDATE: Replace config-driven rendering with direct composition
- `src/components/integrations/monday/domain/visits/ImportCompletionForm.tsx` - UPDATE: Replace config-driven rendering with direct composition

**Files to Delete:** (After successful migration)
- `src/lib/ui/forms/hooks/useFieldRenderer.tsx` - REASON: replaced by direct TanStack field components
- `src/lib/ui/forms/fieldConfig/` (entire directory) - REASON: configuration-driven approach replaced
- `src/lib/types/ui/form.ts` (Field interface and config types) - REASON: configuration types no longer needed
- `src/lib/ui/forms/index.ts` - REASON: only exported useFieldRenderer hook

## Tasks

- [ ] **1.0 Create Direct TanStack Form Field Components**
  **Context Stack:** Core field components, TanStack Form integration patterns
  **Pattern Reference:** Existing `fieldApi` integration in core components
  **Quality Gate:** No configuration mapping, direct component usage only

  - [ ] 1.1 Create TextFieldTanStack wrapper component
    **File:** `src/components/composed/forms/fields/TextFieldTanStack.tsx`
    **Scope:** ~80 lines, 1 main component + props interface
    **Interfaces to Create:**
    ```typescript
    interface TextFieldTanStackProps {
      field: FieldApi<any, any>;
      label: string;
      placeholder?: string;
      helpText?: string;
      type?: 'text' | 'email' | 'password';
      required?: boolean;
    }
    ```
    **Functions to Implement:**
    - `TextFieldTanStack(props: TextFieldTanStackProps): JSX.Element` (~60 lines)
    **Reference Files:**
    - `src/components/core/fields/Input.tsx` - WHEN: implementation phase, WHY: existing TanStack integration via fieldApi prop
    **Implementation Notes:**
    - Use `Input` component directly with `fieldApi` prop
    - Extract value, onChange, onBlur from `field.state` and handlers
    - Handle error state from `field.state.meta.errors`
    **Anti-Patterns:**
    - Don't create configuration objects - use direct props
    - Avoid generic field type switching - create specific components
    **Quality Checklist:**
    - [ ] Uses core `Input` component (not custom input implementation)
    - [ ] Imports from @components/core/fields (not relative imports)
    - [ ] File size under 100 lines (specific single responsibility)
    - [ ] Zero TypeScript errors in strict mode
    - [ ] Follows direct composition pattern (no configuration objects)
    - [ ] Implements proper TanStack Form field integration

  - [ ] 1.2 Create SelectFieldTanStack wrapper component
    **File:** `src/components/composed/forms/fields/SelectFieldTanStack.tsx`
    **Scope:** ~100 lines, 1 main component + props interface + option types
    **Interfaces to Create:**
    ```typescript
    interface SelectOption {
      value: string;
      label: string;
    }
    
    interface SelectFieldTanStackProps {
      field: FieldApi<any, any>;
      label: string;
      options: SelectOption[];
      placeholder?: string;
      multiple?: boolean;
      helpText?: string;
      required?: boolean;
    }
    ```
    **Functions to Implement:**
    - `SelectFieldTanStack(props: SelectFieldTanStackProps): JSX.Element` (~80 lines)
    **Reference Files:**
    - `src/components/core/fields/Select.tsx` - WHEN: implementation phase, WHY: existing TanStack integration and multi-select pattern
    **Implementation Notes:**
    - Use `Select` component directly with `fieldApi` prop
    - Handle both single and multi-select cases
    - Extract options array handling from field configuration pattern
    **Quality Checklist:**
    - [ ] Uses core `Select` component (not custom select implementation)
    - [ ] Supports both single and multi-select modes
    - [ ] Handles options prop directly (no configuration mapping)
    - [ ] File size under 120 lines
    - [ ] Zero TypeScript errors in strict mode

  - [ ] 1.3 Create ReferenceFieldTanStack wrapper component
    **File:** `src/components/composed/forms/fields/ReferenceFieldTanStack.tsx`
    **Scope:** ~120 lines, 1 main component + props interface
    **Interfaces to Create:**
    ```typescript
    interface ReferenceFieldTanStackProps {
      field: FieldApi<any, any>;
      label: string;
      url: string;
      entityType?: string;
      multiple?: boolean;
      placeholder?: string;
      helpText?: string;
      required?: boolean;
    }
    ```
    **Functions to Implement:**
    - `ReferenceFieldTanStack(props: ReferenceFieldTanStackProps): JSX.Element` (~100 lines)
    **Reference Files:**
    - `src/components/core/fields/ReferenceSelect.tsx` - WHEN: implementation phase, WHY: complex reference data handling and API integration
    **Implementation Notes:**
    - Use `ReferenceSelect` component directly
    - Pass through URL and entityType props for API calls
    - Handle value transformation for TanStack Form integration
    **Quality Checklist:**
    - [ ] Uses core `ReferenceSelect` component (not custom implementation)
    - [ ] Handles API data fetching through existing component
    - [ ] Supports both single and multi-reference selection
    - [ ] File size under 150 lines
    - [ ] Zero TypeScript errors in strict mode

  - [ ] 1.4 Create DateFieldTanStack wrapper component
    **File:** `src/components/composed/forms/fields/DateFieldTanStack.tsx`
    **Scope:** ~80 lines, 1 main component + props interface
    **Interfaces to Create:**
    ```typescript
    interface DateFieldTanStackProps {
      field: FieldApi<any, any>;
      label: string;
      placeholder?: string;
      helpText?: string;
      required?: boolean;
    }
    ```
    **Functions to Implement:**
    - `DateFieldTanStack(props: DateFieldTanStackProps): JSX.Element` (~60 lines)
    **Reference Files:**
    - `src/components/core/fields/Input.tsx` - WHEN: implementation phase, WHY: date input uses base Input component with type="date"
    **Implementation Notes:**
    - Use `Input` component with `type="date"`
    - Handle date string format conversion for TanStack Form
    - Extract date-specific validation from field state

  - [ ] 1.5 Create barrel export file for TanStack field components
    **File:** `src/components/composed/forms/fields/index.ts`
    **Scope:** ~20 lines, barrel exports only
    **Exports:**
    ```typescript
    export * from './TextFieldTanStack';
    export * from './SelectFieldTanStack'; 
    export * from './ReferenceFieldTanStack';
    export * from './DateFieldTanStack';
    ```
    **Purpose:** Enable clean imports: `import { TextFieldTanStack } from '@components/composed/forms/fields'`

- [ ] **2.0 Migrate Form Components to Direct Composition**
  **Context Stack:** Existing form components, new TanStack field components
  **Pattern Reference:** TanStack Form direct composition pattern
  **Quality Gate:** Zero usage of configuration mapping, all fields explicitly defined

  - [ ] 2.1 Migrate SchoolForm to direct composition
    **File:** `src/components/domain/schools/SchoolForm.tsx`
    **Scope:** ~200 lines, remove config mapping, add explicit field composition
    **PRD Requirements:**
    - Replace `SchoolFieldConfig.map()` with explicit `<form.Field>` declarations
    - Remove `useFieldRenderer` import and usage
    - Use new TanStack field components directly
    **Integration Points:**
    - Imports: Remove `@/lib/ui/forms/hooks/useFieldRenderer`, `@forms/fieldConfig/school/school-field-config`
    - Add: `@components/composed/forms/fields`
    - Maintains: `@tanstack/react-form`, `@components/composed/forms/FormLayout`
    **Implementation Example:**
    ```typescript
    // REPLACE:
    {SchoolFieldConfig.map((fieldConfig) => (
      <form.Field name={String(fieldConfig.name)}>
        {(field) => renderField(fieldConfig, field)}
      </form.Field>
    ))}
    
    // WITH:
    <form.Field name="schoolName">
      {(field) => (
        <TextFieldTanStack
          field={field}
          label="School Name"
          placeholder="Enter school name"
        />
      )}
    </form.Field>
    ```

  - [ ] 2.2 Migrate NYCPSStaffForm to direct composition  
    **File:** `src/components/domain/staff/NYCPSStaffForm.tsx`
    **Scope:** ~250 lines, complex form with reference fields
    **PRD Requirements:**
    - Replace all field config mapping with direct field composition
    - Use `ReferenceFieldTanStack` for schools and owners fields
    - Use `SelectFieldTanStack` for enum-based fields
    **Reference Files:**
    - `src/lib/ui/forms/fieldConfig/staff/nycps-staff.ts` - WHEN: migration phase, WHY: extract field definitions and options to direct props

  - [ ] 2.3 Migrate ImportCompletionForm to direct composition
    **File:** `src/components/integrations/monday/domain/visits/ImportCompletionForm.tsx` 
    **Scope:** ~180 lines, dynamic field filtering logic
    **PRD Requirements:**
    - Replace filtered field config mapping with conditional direct composition
    - Maintain missing field filtering logic using different approach
    - Keep dynamic form generation but with direct components

  - [ ] 2.4 Migrate ObservationForm to direct composition
    **File:** `src/app/test/observations/ObservationForm.tsx`
    **Scope:** ~300 lines, sectioned form with field grouping
    **PRD Requirements:**
    - Replace section-based field config filtering with explicit field sections
    - Use direct field composition within each section
    - Maintain section navigation and organization

  - [ ] 2.5 Migrate ActionPlanStageForm to direct composition
    **File:** `src/components/domain/coaching/ActionPlanStageForm.tsx`
    **Scope:** ~250 lines, generic stage form with dynamic config
    **PRD Requirements:**
    - Replace dynamic field config mapping with explicit stage field definitions
    - Create separate field compositions for each stage
    - Maintain type safety across different stage data types

  - [ ] 2.6 Migrate CoachingActionPlanForm to direct composition
    **File:** `src/components/features/coaching/components/CoachingActionPlanForm.tsx`
    **Scope:** ~350 lines, complex sectioned form
    **PRD Requirements:**
    - Replace section-based field filtering with explicit section compositions
    - Use direct field composition for all sections
    - Maintain section navigation and complex field organization

- [ ] **3.0 Remove Configuration System**
  **Context Stack:** Migration completed forms, unused configuration code
  **Pattern Reference:** Clean removal without breaking changes
  **Quality Gate:** Zero references to removed files, no broken imports

  - [ ] 3.1 Remove useFieldRenderer hook
    **File:** `src/lib/ui/forms/hooks/useFieldRenderer.tsx` - DELETE
    **Scope:** Complete file removal
    **Pre-requisites:** All forms migrated to direct composition
    **Validation:** Search codebase for any remaining `useFieldRenderer` imports

  - [ ] 3.2 Remove fieldConfig directory and all configurations
    **Files:** `src/lib/ui/forms/fieldConfig/` (entire directory) - DELETE
    **Scope:** ~15 configuration files removed
    **Pre-requisites:** All forms migrated to direct composition
    **Files Affected:**
    - `coaching/` directory (4 files)
    - `integrations/` directory (2 files) 
    - `observations/` directory (3 files)
    - `school/` directory (2 files)
    - `staff/` directory (3 files)
    - Root `index.ts` (1 file)

  - [ ] 3.3 Remove configuration types from form types file
    **File:** `src/lib/types/ui/form.ts` - UPDATE (remove config-related types)
    **Scope:** Remove ~50 lines of configuration interfaces
    **Types to Remove:**
    - `Field` interface
    - `FieldType` type
    - `FormUIHints` interface
    - `TanStackFormProps` interface
    - `TanStackFieldProps` interface
    - `FormFactoryConfig` interface
    - Legacy compatibility aliases
    **Types to Keep:**
    - Core TanStack Form types (`FormApi`, `BaseFieldProps`, `FieldWrapperProps`)

  - [ ] 3.4 Update forms index file
    **File:** `src/lib/ui/forms/index.ts` - UPDATE
    **Scope:** Remove useFieldRenderer export, add new field component exports
    **Changes:**
    - Remove: `export * from './hooks/useFieldRenderer';`
    - Add: `export * from '../../components/composed/forms/fields';`

- [ ] **4.0 Final Cleanup and Validation**
  **Context Stack:** Migrated codebase, removed configuration system
  **Pattern Reference:** TanStack Form best practices compliance
  **Quality Gate:** Full TanStack Form alignment, zero configuration remnants

  - [ ] 4.1 Search and remove any remaining configuration imports
    **Scope:** Codebase-wide search and cleanup
    **Search Patterns:**
    - `useFieldRenderer`
    - `FieldConfig`
    - `renderField`
    - `@forms/fieldConfig`
    - `@ui/forms/hooks`

  - [ ] 4.2 Validate all forms for TanStack Form best practices
    **Scope:** Review all migrated forms
    **Quality Checklist:**
    - [ ] All forms use direct `<form.Field>` composition
    - [ ] No configuration objects or mapping functions
    - [ ] Explicit field definitions with clear props
    - [ ] Direct component usage as intended by TanStack Form
    - [ ] No abstraction layers between TanStack Form and UI components

  - [ ] 4.3 Update documentation and type exports
    **Scope:** Update any remaining documentation references
    **Files to Update:**
    - Update import paths in any example code
    - Remove references to configuration-driven forms
    - Add examples of direct composition patterns

## Quality Requirements

- [ ] **DRY**: No duplicated logic within or across TanStack field components
- [ ] **Clear Separation of Concerns**: Each field component handles one field type with single responsibility
- [ ] **Proper Abstraction**: TanStack field components wrap core components without over-engineering
- [ ] **Consistent Patterns**: All field components follow same prop interface pattern
- [ ] **YAGNI**: No configuration system compatibility or unnecessary future-proofing
- [ ] **Follow Established Type Patterns**: Use existing TanStack Form types, avoid custom generic constraints
- [ ] **Schema-First Design**: Maintain Zod schema integration without configuration layer
- [ ] **TanStack Form Alignment**: Follow official TanStack Form philosophy of direct composition