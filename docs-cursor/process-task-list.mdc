---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
# Task List Management

Guidelines for managing task lists in markdown files to track progress on completing a PRD

## Task Implementation
- **One parent-task at a time:** Do **NOT** start the next parent‑task until you ask the user for permission and they say "yes" or "y"
- **Completion protocol:**  
  1. When you finish a **sub‑task**, immediately mark it as completed by changing `[ ]` to `[x]`.  
  2. If **all** subtasks underneath a parent task are now `[x]`, also mark the **parent task** as completed.  
- Stop after each sub‑task and wait for the user's go‑ahead.

## File Path Validation
- **Before implementing any sub‑task:** Verify the exact file path follows project structure conventions
- **Check for existing similar components:** Prevent duplication by searching for existing functionality
- **Validate integration points:** Confirm imports/exports align with established patterns

## Scope Verification
- **Line count estimates:** Track actual vs. estimated complexity during implementation
- **Function signature compliance:** Implement exactly as specified in task requirements
- **Quality gate verification:** Complete all checklist items before marking sub‑task complete

## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`) per the protocol above.
   - Add new tasks as they emerge.
   - **Update scope estimates** if actual implementation differs significantly from planned

2. **Maintain the "Relevant Files" section:**
   - List every file created or modified.
   - Give each file a one‑line description of its purpose.
   - **Track file replacements** and deletions as specified in tasks

## AI Instructions

When working with task lists, the AI must:

1. **Before starting any sub‑task:**
   - Verify file path follows project structure conventions
   - Check for existing similar functionality to avoid duplication
   - Confirm scope estimate is realistic
   - **Validate quality requirements alignment:**
     - **DRY**: No duplicate logic within module or elsewhere in codebase
     - **Separation**: Single, well-defined responsibility per file/function
     - **Abstraction**: Appropriate layers without over-engineering
     - **Patterns**: Follow established patterns from existing codebase
     - **YAGNI**: No complexity for hypothetical future use cases
     - **Types**: Leverage existing type definitions - check src/lib/types for existing types

2. **During implementation:**
   - Follow exact function signatures and interfaces specified
   - Use specified import paths and integration points
   - Implement only what's defined in the task scope
   - **Maintain quality standards throughout implementation**

3. **After completing sub‑task:**
   - Mark sub‑task `[x]` and parent task `[x]` if all subtasks complete
   - Update "Relevant Files" section with actual files created/modified
   - Track any scope deviations from original estimates
   - **Verify quality requirements met before marking complete**
   - Pause for user approval before proceeding
