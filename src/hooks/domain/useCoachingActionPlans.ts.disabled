import { useState, useEffect } from 'react';
import { CoachingActionPlan, CoachingActionPlanInput } from '@zod-schema/core/cap';
import { 
  fetchCoachingActionPlans,
  fetchCoachingActionPlanById,
  createCoachingActionPlan,
  updateCoachingActionPlan,
  deleteCoachingActionPlan
} from "@actions/coaching/coaching-action-plans";
import { handleClientError } from "@error/handlers/client";

interface UseCoachingActionPlansResult {
  plans: CoachingActionPlan[];
  isLoading: boolean;
  error: string | null;
  refetch: () => Promise<void>;
  createPlan: (data: CoachingActionPlanInput) => Promise<{ success: boolean; data?: CoachingActionPlan; error?: string }>;
  updatePlan: (id: string, data: Partial<CoachingActionPlanInput>) => Promise<{ success: boolean; data?: CoachingActionPlan; error?: string }>;
  deletePlan: (id: string) => Promise<{ success: boolean; error?: string }>;
  getPlanById: (id: string) => Promise<{ success: boolean; data?: CoachingActionPlan; error?: string }>;
}

export function useCoachingActionPlans(params: Record<string, unknown> = {}): UseCoachingActionPlansResult {
  const [plans, setPlans] = useState<CoachingActionPlan[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchPlans = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const result = await fetchCoachingActionPlans(params);
      
      if (result.success) {
        const planData = Array.isArray(result) ? result : result.items || [];
        setPlans(planData);
      } else {
        setError(result.error || 'Failed to fetch coaching action plans');
      }
    } catch (err) {
      const errorMessage = handleClientError(err, 'useCoachingActionPlans.fetchPlans');
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const createPlan = async (data: CoachingActionPlanInput) => {
    try {
      const result = await createCoachingActionPlan(data);
      
      if (result.success && result.data) {
        setPlans(prev => [result.data!, ...prev]);
        return { success: true, data: result.data };
      } else {
        return { success: false, error: result.error };
      }
    } catch (err) {
      const errorMessage = handleClientError(err, 'useCoachingActionPlans.createPlan');
      return { success: false, error: errorMessage };
    }
  };

  const updatePlan = async (id: string, data: Partial<CoachingActionPlanInput>) => {
    try {
      const result = await updateCoachingActionPlan(id, data);
      
      if (result.success && result.data) {
        setPlans(prev => prev.map(plan => 
          plan._id === id ? { ...plan, ...result.data } : plan
        ));
        return { success: true, data: result.data };
      } else {
        return { success: false, error: result.error };
      }
    } catch (err) {
      const errorMessage = handleClientError(err, 'useCoachingActionPlans.updatePlan');
      return { success: false, error: errorMessage };
    }
  };

  const deletePlan = async (id: string) => {
    try {
      const result = await deleteCoachingActionPlan(id);
      
      if (result.success) {
        setPlans(prev => prev.filter(plan => plan._id !== id));
        return { success: true };
      } else {
        return { success: false, error: result.error };
      }
    } catch (err) {
      const errorMessage = handleClientError(err, 'useCoachingActionPlans.deletePlan');
      return { success: false, error: errorMessage };
    }
  };

  const getPlanById = async (id: string) => {
    try {
      const result = await fetchCoachingActionPlanById(id);
      return result;
    } catch (err) {
      const errorMessage = handleClientError(err, 'useCoachingActionPlans.getPlanById');
      return { success: false, error: errorMessage };
    }
  };

  useEffect(() => {
    fetchPlans();
  }, [JSON.stringify(params)]);

  return {
    plans,
    isLoading,
    error,
    refetch: fetchPlans,
    createPlan,
    updatePlan,
    deletePlan,
    getPlanById
  };
} 