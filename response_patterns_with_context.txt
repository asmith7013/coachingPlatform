src//app/tools/im-routines/page.tsx-    if (!version) return [];
src//app/tools/im-routines/page.tsx-    const curriculumLabel: 'ILC' | 'Kendall Hunt' = version === 'ILC' ? 'ILC' : 'Kendall Hunt';
src//app/tools/im-routines/page.tsx:    return routinesData.map((lesson) => ({
src//app/tools/im-routines/page.tsx-      ...lesson,
src//app/tools/im-routines/page.tsx-      curriculum: curriculumLabel,
--
src//app/tools/im-routines/page.tsx-      new Set(
src//app/tools/im-routines/page.tsx-        (version === 'ILC' ? ILCData : KHData)
src//app/tools/im-routines/page.tsx:          .map((r) => r.grade)
src//app/tools/im-routines/page.tsx-          .filter((g) => ["Grade 6", "Grade 7", "Grade 8"].includes(g))
src//app/tools/im-routines/page.tsx-      )
--
src//app/tools/im-routines/page.tsx-    const highSchoolGrades = Array.from(
src//app/tools/im-routines/page.tsx-      new Set(
src//app/tools/im-routines/page.tsx:        KHData.map((r) => r.grade).filter(isHighSchool)
src//app/tools/im-routines/page.tsx-      )
src//app/tools/im-routines/page.tsx-    );
--
src//app/tools/im-routines/page.tsx-
src//app/tools/im-routines/page.tsx-    return [...middleSchoolGrades, ...highSchoolGrades].filter((g) =>
src//app/tools/im-routines/page.tsx:      (KHData.map((r) => r.grade).includes(g))
src//app/tools/im-routines/page.tsx-    );
src//app/tools/im-routines/page.tsx-  }, [version]);
--
src//app/tools/im-routines/page.tsx-        routinesWithCurriculum
src//app/tools/im-routines/page.tsx-          .filter((r) => !selectedGrade || r.grade === selectedGrade)
src//app/tools/im-routines/page.tsx:          .map((r) => r.unit)
src//app/tools/im-routines/page.tsx-      )
src//app/tools/im-routines/page.tsx-    ).sort();
--
src//app/tools/im-routines/page.tsx-              (!selectedUnit || r.unit === selectedUnit)
src//app/tools/im-routines/page.tsx-          )
src//app/tools/im-routines/page.tsx:          .map((r) => r.lessonNumber)
src//app/tools/im-routines/page.tsx-      )
src//app/tools/im-routines/page.tsx-    ).sort((a, b) => Number(a) - Number(b));
--
src//app/tools/dev/seed-data/page.tsx-      try {
src//app/tools/dev/seed-data/page.tsx-        // Call the create function with non-null assertion since we checked success above
src//app/tools/dev/seed-data/page.tsx:        await createFn(validationResult.data!);
src//app/tools/dev/seed-data/page.tsx-        successCount++;
src//app/tools/dev/seed-data/page.tsx-      } catch (error) {
--
src//app/tools/dev/seed-data/page.tsx-            <h3 className="text-red-600 font-semibold">Errors:</h3>
src//app/tools/dev/seed-data/page.tsx-            <ul className="text-sm mt-2 space-y-1">
src//app/tools/dev/seed-data/page.tsx:              {errors.map((error, index) => (
src//app/tools/dev/seed-data/page.tsx-                <li key={index} className="text-red-600">
src//app/tools/dev/seed-data/page.tsx-                  {error}
--
src//app/tools/dev/test-enum-mongoose/page.tsx-                  Object.entries(DurationTypesEnum)
src//app/tools/dev/test-enum-mongoose/page.tsx-                    .filter(([key]) => isNaN(Number(key)))
src//app/tools/dev/test-enum-mongoose/page.tsx:                    .map(([key, value]) => ({ key, value })),
src//app/tools/dev/test-enum-mongoose/page.tsx-                  null, 
src//app/tools/dev/test-enum-mongoose/page.tsx-                  2
--
src//app/tools/dev/test-enum-mongoose/page.tsx-          <h2 className="text-xl font-semibold mt-6 mb-2">Test Results:</h2>
src//app/tools/dev/test-enum-mongoose/page.tsx-          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
src//app/tools/dev/test-enum-mongoose/page.tsx:            {results.map((result, index) => (
src//app/tools/dev/test-enum-mongoose/page.tsx-              <div 
src//app/tools/dev/test-enum-mongoose/page.tsx-                key={index} 
--
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-          >
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-            <option value="">Select Course</option>
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx:            {Object.keys(curriculumData).map(course => (
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-              <option key={course} value={course}>{course}</option>
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-            ))}
--
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-          >
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-            <option value="">Select Unit</option>
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx:            {availableUnits.map(unit => (
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-              <option key={unit} value={unit}>{unit}</option>
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-            ))}
--
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-          >
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-            <option value="">Select Lesson</option>
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx:            {availableLessons.map(lesson => (
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-              <option key={lesson} value={lesson}>{lesson}</option>
src//app/dashboard/classroomNotes/components/CurriculumSelector/index.tsx-            ))}
--
src//app/dashboard/classroomNotes/page.tsx-    otherContext: 'Block period class. 28 students present. Co-teaching with Mr. Smith.',
src//app/dashboard/classroomNotes/page.tsx-    
src//app/dashboard/classroomNotes/page.tsx:    learningTargets: exampleLessonData.learningGoals.map(goal => `• ${goal}`).join('\n'),
src//app/dashboard/classroomNotes/page.tsx-    coolDown: '',
src//app/dashboard/classroomNotes/page.tsx-    
--
src//app/dashboard/classroomNotes/page.tsx-        newCurriculum.unit === exampleLessonData.unit && 
src//app/dashboard/classroomNotes/page.tsx-        value === exampleLessonData.lesson) {
src//app/dashboard/classroomNotes/page.tsx:      learningTargets = exampleLessonData.learningGoals.map(goal => `• ${goal}`).join('\n');
src//app/dashboard/classroomNotes/page.tsx-      title = exampleLessonData.title;
src//app/dashboard/classroomNotes/page.tsx-    } else if (field === 'course' || field === 'unit') {
--
src//app/dashboard/layout.tsx-  children: React.ReactNode 
src//app/dashboard/layout.tsx-}) {
src//app/dashboard/layout.tsx:  const { isSignedIn, metadata, isLoading } = useAuthenticatedUser()
src//app/dashboard/layout.tsx-  const router = useRouter()
src//app/dashboard/layout.tsx-
--
src//app/dashboard/lookForList/page.tsx-    try {
src//app/dashboard/lookForList/page.tsx-      const lookForData: LookForInput = {
src//app/dashboard/lookForList/page.tsx:        ...data,
src//app/dashboard/lookForList/page.tsx-        lookForIndex: 0,
src//app/dashboard/lookForList/page.tsx-        schools: [],
--
src//app/dashboard/lookForList/page.tsx-
src//app/dashboard/lookForList/page.tsx-      <EmptyListWrapper items={lookFors} resourceName="look fors">
src//app/dashboard/lookForList/page.tsx:        {lookFors.map((lookFor: LookFor) => (
src//app/dashboard/lookForList/page.tsx-          <Card
src//app/dashboard/lookForList/page.tsx-            key={lookFor._id}
--
src//app/dashboard/lookForList/page.tsx-              Rubric
src//app/dashboard/lookForList/page.tsx-            </Heading>
src//app/dashboard/lookForList/page.tsx:            {lookFor.rubric.map((rubricItem, index) => (
src//app/dashboard/lookForList/page.tsx-              <Card
src//app/dashboard/lookForList/page.tsx-                key={index}
--
src//app/dashboard/staff/nycps/page.tsx-            >
src//app/dashboard/staff/nycps/page.tsx-              <strong>Schools:</strong>
src//app/dashboard/staff/nycps/page.tsx:              {member.schools.map((schoolId) => (
src//app/dashboard/staff/nycps/page.tsx-                <Badge key={schoolId} intent="secondary">
src//app/dashboard/staff/nycps/page.tsx-                  {schoolId}
--
src//app/dashboard/staff/nycps/page.tsx-  // Memoize the form fields to prevent recreation on each render
src//app/dashboard/staff/nycps/page.tsx-  const formFields = React.useMemo(() => {
src//app/dashboard/staff/nycps/page.tsx:    return NYCPSStaffFieldConfig.map(field => {
src//app/dashboard/staff/nycps/page.tsx-      const fieldName = field.key as keyof NYCPSStaffInput;
src//app/dashboard/staff/nycps/page.tsx-      
--
src//app/dashboard/staff/nycps/page.tsx-        
src//app/dashboard/staff/nycps/page.tsx-        {/* Render staff cards with memoized component */}
src//app/dashboard/staff/nycps/page.tsx:        {staff.map((member: NYCPSStaff) => (
src//app/dashboard/staff/nycps/page.tsx-          <StaffCard
src//app/dashboard/staff/nycps/page.tsx-            key={member._id}
--
src//app/dashboard/schoolList/[schoolId]/page.tsx-        });
src//app/dashboard/schoolList/[schoolId]/page.tsx-        
src//app/dashboard/schoolList/[schoolId]/page.tsx:        if (schoolsResponse.items.length === 0) {
src//app/dashboard/schoolList/[schoolId]/page.tsx-          setError("School not found");
src//app/dashboard/schoolList/[schoolId]/page.tsx-          setLoading(false);
--
src//app/dashboard/schoolList/[schoolId]/page.tsx-        }
src//app/dashboard/schoolList/[schoolId]/page.tsx-        
src//app/dashboard/schoolList/[schoolId]/page.tsx:        const schoolData = schoolsResponse.items[0];
src//app/dashboard/schoolList/[schoolId]/page.tsx-        setSchool(schoolData as School);
src//app/dashboard/schoolList/[schoolId]/page.tsx-        
--
src//app/dashboard/schoolList/[schoolId]/page.tsx-        });
src//app/dashboard/schoolList/[schoolId]/page.tsx-        
src//app/dashboard/schoolList/[schoolId]/page.tsx:        setStaff(staffResponse.items as NYCPSStaff[]);
src//app/dashboard/schoolList/[schoolId]/page.tsx-        setLoading(false);
src//app/dashboard/schoolList/[schoolId]/page.tsx-      } catch (err) {
--
src//app/dashboard/schoolList/[schoolId]/page.tsx-        <Heading level="h3" className="mt-6 mb-2">Grade Levels</Heading>
src//app/dashboard/schoolList/[schoolId]/page.tsx-        <div className="flex flex-wrap gap-2">
src//app/dashboard/schoolList/[schoolId]/page.tsx:          {school.gradeLevelsSupported?.map((grade, index) => (
src//app/dashboard/schoolList/[schoolId]/page.tsx-            <Badge key={index}>{grade}</Badge>
src//app/dashboard/schoolList/[schoolId]/page.tsx-          ))}
--
src//app/dashboard/schoolList/[schoolId]/page.tsx-      ) : (
src//app/dashboard/schoolList/[schoolId]/page.tsx-        <div className="flex flex-wrap gap-4">
src//app/dashboard/schoolList/[schoolId]/page.tsx:          {schoolStaff.map((person) => (
src//app/dashboard/schoolList/[schoolId]/page.tsx-            <Badge key={person.id}>{person.name}</Badge>
src//app/dashboard/schoolList/[schoolId]/page.tsx-          ))}
--
src//app/dashboard/schoolList/[schoolId]/page.tsx-        </Heading>
src//app/dashboard/schoolList/[schoolId]/page.tsx-        <div className="flex flex-wrap gap-2">
src//app/dashboard/schoolList/[schoolId]/page.tsx:          {lookFors.map((lookFor : LookFor, index : number) => (
src//app/dashboard/schoolList/[schoolId]/page.tsx-            <span 
src//app/dashboard/schoolList/[schoolId]/page.tsx-              key={index} 
--
src//app/dashboard/schoolList/[schoolId]/page.tsx-            </thead>
src//app/dashboard/schoolList/[schoolId]/page.tsx-            <tbody>
src//app/dashboard/schoolList/[schoolId]/page.tsx:              {schedule.map((entry : Period, index : number) => (
src//app/dashboard/schoolList/[schoolId]/page.tsx-                <tr key={index} className="border-b border-surface">
src//app/dashboard/schoolList/[schoolId]/page.tsx-                  <td className={cn(paddingY.sm, 'text-text')}>{entry.period}</td>
--
src//app/dashboard/schoolList/page.tsx-
src//app/dashboard/schoolList/page.tsx-      <EmptyListWrapper items={schools} resourceName="schools">
src//app/dashboard/schoolList/page.tsx:        {schools.map((school: School) => (
src//app/dashboard/schoolList/page.tsx-          <Card
src//app/dashboard/schoolList/page.tsx-            key={school._id}
--
src//app/dashboard/schoolList/page.tsx-            </Heading>
src//app/dashboard/schoolList/page.tsx-            <div className="flex flex-wrap gap-2 mt-2">
src//app/dashboard/schoolList/page.tsx:              {school.gradeLevelsSupported && school.gradeLevelsSupported.map((grade, index) => (
src//app/dashboard/schoolList/page.tsx-                <span 
src//app/dashboard/schoolList/page.tsx-                  key={index} 
--
src//app/dashboard/migration-test/page.tsx-        <Card.Body>
src//app/dashboard/migration-test/page.tsx-          <div className="space-y-3">
src//app/dashboard/migration-test/page.tsx:            {Object.entries(flags).map(([key, value]) => (
src//app/dashboard/migration-test/page.tsx-              <div key={key} className="flex items-center justify-between">
src//app/dashboard/migration-test/page.tsx-                <label className="flex items-center cursor-pointer">
--
src//app/integrations/monday/example2/page.tsx-              <Text className="text-gray-600">
src//app/integrations/monday/example2/page.tsx-                {connectionQuery.isLoading ? 'Checking...' : 
src//app/integrations/monday/example2/page.tsx:                  connectionQuery.data?.success ? 'Connected' : 'Not connected'}
src//app/integrations/monday/example2/page.tsx-              </Text>
src//app/integrations/monday/example2/page.tsx-            </div>
--
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-  // Update previews when data changes
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-  useEffect(() => {
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx:    if (previewsQuery.data) {
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx:      setPreviews(previewsQuery.data);
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-    }
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx:  }, [previewsQuery.data]);
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-  
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-  // Fetch visit previews when board ID changes
--
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-        filteredPreviews
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-          .filter(preview => preview.valid)
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx:          .map(preview => preview.original.id as string)
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-      );
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-    }
--
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-          {/* Previews grid */}
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx:            {filteredPreviews.map(preview => (
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-              <Card 
src//app/integrations/monday/visits/MondayVisitSelectionPage.tsx-                key={preview.original.id as string} 
--
src//app/integrations/monday/visits/import/MondayVisitImportClient.tsx-import { useImportVisit } from '@/hooks/integrations/monday/useMondayQueriesRQ';
src//app/integrations/monday/visits/import/MondayVisitImportClient.tsx-import type { VisitInput } from '@/lib/data-schema/zod-schema/visits/visit';
src//app/integrations/monday/visits/import/MondayVisitImportClient.tsx:import type { MondayImportResponse } from '@/lib/integrations/monday/types/import';
src//app/integrations/monday/visits/import/MondayVisitImportClient.tsx-
src//app/integrations/monday/visits/import/MondayVisitImportClient.tsx-// Import stages enum
--
src//app/integrations/monday/visits/import/MondayVisitImportClient.tsx-      
src//app/integrations/monday/visits/import/MondayVisitImportClient.tsx-      // Create the MondayImportResponse object
src//app/integrations/monday/visits/import/MondayVisitImportClient.tsx:      const importRequest: MondayImportResponse = {
src//app/integrations/monday/visits/import/MondayVisitImportClient.tsx-        success: true,
src//app/integrations/monday/visits/import/MondayVisitImportClient.tsx-        completionData: completeData,
--
src//app/integrations/monday/example1/page.tsx-                </p>
src//app/integrations/monday/example1/page.tsx-                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
src//app/integrations/monday/example1/page.tsx:                  {previewItems.map(item => (
src//app/integrations/monday/example1/page.tsx-                    <div
src//app/integrations/monday/example1/page.tsx-                      key={String(item.original.id)}
--
src//app/integrations/monday/example1/page.tsx-                      <h4 className="font-medium text-red-600">Missing Required Fields:</h4>
src//app/integrations/monday/example1/page.tsx-                      <ul className="list-disc pl-5">
src//app/integrations/monday/example1/page.tsx:                        {transformPreview.missingRequired.map(field => (
src//app/integrations/monday/example1/page.tsx-                          <li key={field}>{field}</li>
src//app/integrations/monday/example1/page.tsx-                        ))}
--
src//app/integrations/monday/example1/page.tsx-                      <h4 className="font-medium text-red-600">Errors:</h4>
src//app/integrations/monday/example1/page.tsx-                      <ul className="list-disc pl-5">
src//app/integrations/monday/example1/page.tsx:                        {Object.entries(transformPreview.errors).map(([field, error]) => (
src//app/integrations/monday/example1/page.tsx-                          <li key={field}>
src//app/integrations/monday/example1/page.tsx-                            <span className="font-medium">{field}:</span> {error}
--
src//app/integrations/monday/example1/page.tsx-                  <h4 className="font-medium text-red-600">Errors:</h4>
src//app/integrations/monday/example1/page.tsx-                  <ul className="list-disc pl-5">
src//app/integrations/monday/example1/page.tsx:                    {Object.entries(importResult.errors || {}).map(([id, message]) => (
src//app/integrations/monday/example1/page.tsx-                      <li key={id}>{message as string}</li>
src//app/integrations/monday/example1/page.tsx-                    ))}
--
src//app/integrations/monday/example1/page.tsx-          </div>
src//app/integrations/monday/example1/page.tsx-          
src//app/integrations/monday/example1/page.tsx:          {userQuery.data && (
src//app/integrations/monday/example1/page.tsx-            <div className="mt-4 p-4 bg-gray-50 rounded-md">
src//app/integrations/monday/example1/page.tsx-              <Text className="font-medium">User Found</Text>
src//app/integrations/monday/example1/page.tsx-              <Text className="text-gray-600">
src//app/integrations/monday/example1/page.tsx:                Name: {userQuery.data.name}
src//app/integrations/monday/example1/page.tsx-              </Text>
src//app/integrations/monday/example1/page.tsx-              <Text className="text-gray-600">
src//app/integrations/monday/example1/page.tsx:                Email: {userQuery.data.email}
src//app/integrations/monday/example1/page.tsx-              </Text>
src//app/integrations/monday/example1/page.tsx-            </div>
--
src//app/examples/schedule/page.tsx-              </thead>
src//app/examples/schedule/page.tsx-              <tbody className="bg-white">
src//app/examples/schedule/page.tsx:                {locations.map((location) => (
src//app/examples/schedule/page.tsx-                  <Fragment key={location.name}>
src//app/examples/schedule/page.tsx-                    <tr className="border-t border-gray-200">
--
src//app/examples/schedule/page.tsx-                      </th>
src//app/examples/schedule/page.tsx-                    </tr>
src//app/examples/schedule/page.tsx:                    {location.people.map((person, personIdx) => (
src//app/examples/schedule/page.tsx-                      <tr
src//app/examples/schedule/page.tsx-                        key={person.email}
--
src//app/examples/calendar/Legend.tsx-          <h4 className="text-sm font-medium mb-2">Status</h4>
src//app/examples/calendar/Legend.tsx-          <div className="space-y-2">
src//app/examples/calendar/Legend.tsx:            {Object.entries(statusColors).map(([status, color]) => (
src//app/examples/calendar/Legend.tsx-              <div key={status} className="flex items-center">
src//app/examples/calendar/Legend.tsx-                <span className={`w-4 h-4 rounded-full ${color} mr-2`}></span>
--
src//app/examples/calendar/Legend.tsx-          <h4 className="text-sm font-medium mb-2">Delivery Method</h4>
src//app/examples/calendar/Legend.tsx-          <div className="space-y-2">
src//app/examples/calendar/Legend.tsx:            {Object.entries(deliveryColors).map(([delivery, color]) => (
src//app/examples/calendar/Legend.tsx-              <div key={delivery} className="flex items-center">
src//app/examples/calendar/Legend.tsx-                <span className={`w-4 h-4 rounded-full ${color} mr-2`}></span>
--
src//app/examples/calendar/TableView.tsx-          {visits
src//app/examples/calendar/TableView.tsx-            .sort((a, b) => a.date.localeCompare(b.date))
src//app/examples/calendar/TableView.tsx:            .map((visit) => (
src//app/examples/calendar/TableView.tsx-            <tr key={visit.id} className="hover:bg-gray-50">
src//app/examples/calendar/TableView.tsx-              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{visit.sessionName}</td>
--
src//app/examples/calendar/CalendarGridView.tsx-      {/* Weekday headers */}
src//app/examples/calendar/CalendarGridView.tsx-      <div className="grid grid-cols-7 bg-gray-50 border-b">
src//app/examples/calendar/CalendarGridView.tsx:        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (
src//app/examples/calendar/CalendarGridView.tsx-          <div key={day} className="py-2 text-center text-sm font-medium text-gray-500">
src//app/examples/calendar/CalendarGridView.tsx-            {day}
--
src//app/examples/calendar/CalendarGridView.tsx-      {/* Calendar grid */}
src//app/examples/calendar/CalendarGridView.tsx-      <div className="grid grid-cols-7 bg-white">
src//app/examples/calendar/CalendarGridView.tsx:        {monthDays.map((day, i) => {
src//app/examples/calendar/CalendarGridView.tsx-          const dayVisits = visitsByDate[day.formattedDate] || [];
src//app/examples/calendar/CalendarGridView.tsx-          const cycleInfo = getCycleInfo(day.date);
--
src//app/examples/calendar/CalendarGridView.tsx-              
src//app/examples/calendar/CalendarGridView.tsx-              <div className="mt-1 space-y-1 overflow-y-auto max-h-[80px]">
src//app/examples/calendar/CalendarGridView.tsx:                {dayVisits.map((visit) => (
src//app/examples/calendar/CalendarGridView.tsx-                  <div
src//app/examples/calendar/CalendarGridView.tsx-                    key={visit.id}
--
src//app/examples/calendar/ListView.tsx-        </thead>
src//app/examples/calendar/ListView.tsx-        <tbody className="bg-white divide-y divide-gray-200">
src//app/examples/calendar/ListView.tsx:          {sortedVisits.map((visit) => {
src//app/examples/calendar/ListView.tsx-            const cycleInfo = getCycleInfo(visit);
src//app/examples/calendar/ListView.tsx-            
--
src//app/examples/classroomNotes/staffList/page.tsx-            >
src//app/examples/classroomNotes/staffList/page.tsx-              <strong>Schools:</strong>
src//app/examples/classroomNotes/staffList/page.tsx:              {member.schools.map((schoolId) => (
src//app/examples/classroomNotes/staffList/page.tsx-                <Badge key={schoolId} intent="secondary">
src//app/examples/classroomNotes/staffList/page.tsx-                  {schoolId}
--
src//app/examples/classroomNotes/staffList/page.tsx-  // Memoize the form fields to prevent recreation on each render
src//app/examples/classroomNotes/staffList/page.tsx-  const formFields = React.useMemo(() => {
src//app/examples/classroomNotes/staffList/page.tsx:    return NYCPSStaffFieldConfig.map(field => {
src//app/examples/classroomNotes/staffList/page.tsx-      const fieldName = field.key as keyof NYCPSStaffInput;
src//app/examples/classroomNotes/staffList/page.tsx-      
--
src//app/examples/classroomNotes/staffList/page.tsx-        
src//app/examples/classroomNotes/staffList/page.tsx-        {/* Render staff cards with memoized component */}
src//app/examples/classroomNotes/staffList/page.tsx:        {staff.map((member: NYCPSStaff) => (
src//app/examples/classroomNotes/staffList/page.tsx-          <StaffCard
src//app/examples/classroomNotes/staffList/page.tsx-            key={member._id}
--
src//app/examples/classroomNotes/lookForList/page.tsx-    try {
src//app/examples/classroomNotes/lookForList/page.tsx-      const lookForData: LookForInput = {
src//app/examples/classroomNotes/lookForList/page.tsx:        ...data,
src//app/examples/classroomNotes/lookForList/page.tsx-        lookForIndex: 0,
src//app/examples/classroomNotes/lookForList/page.tsx-        schools: [],
--
src//app/examples/classroomNotes/lookForList/page.tsx-
src//app/examples/classroomNotes/lookForList/page.tsx-      <EmptyListWrapper items={lookFors} resourceName="look fors">
src//app/examples/classroomNotes/lookForList/page.tsx:        {lookFors.map((lookFor: LookFor) => (
src//app/examples/classroomNotes/lookForList/page.tsx-          <Card
src//app/examples/classroomNotes/lookForList/page.tsx-            key={lookFor._id}
--
src//app/examples/classroomNotes/lookForList/page.tsx-              Rubric
src//app/examples/classroomNotes/lookForList/page.tsx-            </Heading>
src//app/examples/classroomNotes/lookForList/page.tsx:            {lookFor.rubric.map((rubricItem, index) => (
src//app/examples/classroomNotes/lookForList/page.tsx-              <Card
src//app/examples/classroomNotes/lookForList/page.tsx-                key={index}
--
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        });
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx:        if (schoolsResponse.items.length === 0) {
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-          setError("School not found");
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-          setLoading(false);
--
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        }
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx:        const schoolData = schoolsResponse.items[0];
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        setSchool(schoolData as School);
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        
--
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        });
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx:        setStaff(staffResponse.items as NYCPSStaff[]);
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        setLoading(false);
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-      } catch (err) {
--
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        <Heading level="h3" className="mt-6 mb-2">Grade Levels</Heading>
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        <div className="flex flex-wrap gap-2">
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx:          {school.gradeLevelsSupported?.map((grade, index) => (
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-            <Badge key={index}>{grade}</Badge>
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-          ))}
--
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-      ) : (
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        <div className="flex flex-wrap gap-4">
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx:          {schoolStaff.map((person) => (
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-            <Badge key={person.id}>{person.name}</Badge>
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-          ))}
--
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        </Heading>
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-        <div className="flex flex-wrap gap-2">
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx:          {lookFors.map((lookFor : LookFor, index : number) => (
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-            <span 
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-              key={index} 
--
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-            </thead>
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-            <tbody>
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx:              {schedule.map((entry : Period, index : number) => (
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-                <tr key={index} className="border-b border-surface">
src//app/examples/classroomNotes/schoolList/[schoolId]/page.tsx-                  <td className={cn(paddingY.sm, 'text-text')}>{entry.period}</td>
--
src//app/examples/classroomNotes/schoolList/page.tsx-
src//app/examples/classroomNotes/schoolList/page.tsx-      <EmptyListWrapper items={schools} resourceName="schools">
src//app/examples/classroomNotes/schoolList/page.tsx:        {schools.map((school: School) => (
src//app/examples/classroomNotes/schoolList/page.tsx-          <Card
src//app/examples/classroomNotes/schoolList/page.tsx-            key={school._id}
--
src//app/examples/classroomNotes/schoolList/page.tsx-            </Heading>
src//app/examples/classroomNotes/schoolList/page.tsx-            <div className="flex flex-wrap gap-2 mt-2">
src//app/examples/classroomNotes/schoolList/page.tsx:              {school.gradeLevelsSupported && school.gradeLevelsSupported.map((grade, index) => (
src//app/examples/classroomNotes/schoolList/page.tsx-                <span 
src//app/examples/classroomNotes/schoolList/page.tsx-                  key={index} 
--
src//app/examples/dashboard/page.tsx-                    <li>
src//app/examples/dashboard/page.tsx-                      <ul role="list" className="-mx-2 space-y-1">
src//app/examples/dashboard/page.tsx:                        {navigation.map((item) => (
src//app/examples/dashboard/page.tsx-                          <li key={item.name}>
src//app/examples/dashboard/page.tsx-                            <a
--
src//app/examples/dashboard/page.tsx-                      <div className="text-xs/6 font-semibold text-gray-400">Your teams</div>
src//app/examples/dashboard/page.tsx-                      <ul role="list" className="-mx-2 mt-2 space-y-1">
src//app/examples/dashboard/page.tsx:                        {teams.map((team) => (
src//app/examples/dashboard/page.tsx-                          <li key={team.name}>
src//app/examples/dashboard/page.tsx-                            <a
--
src//app/examples/dashboard/page.tsx-                <li>
src//app/examples/dashboard/page.tsx-                  <ul role="list" className="-mx-2 space-y-1">
src//app/examples/dashboard/page.tsx:                    {navigation.map((item) => (
src//app/examples/dashboard/page.tsx-                      <li key={item.name}>
src//app/examples/dashboard/page.tsx-                        <a
--
src//app/examples/dashboard/page.tsx-                  <div className="text-xs/6 font-semibold text-gray-400">Your teams</div>
src//app/examples/dashboard/page.tsx-                  <ul role="list" className="-mx-2 mt-2 space-y-1">
src//app/examples/dashboard/page.tsx:                    {teams.map((team) => (
src//app/examples/dashboard/page.tsx-                      <li key={team.name}>
src//app/examples/dashboard/page.tsx-                        <a
--
src//app/examples/dashboard/page.tsx-            {/* Deployment list */}
src//app/examples/dashboard/page.tsx-            <ul role="list" className="divide-y divide-white/5">
src//app/examples/dashboard/page.tsx:              {deployments.map((deployment) => (
src//app/examples/dashboard/page.tsx-                <li key={deployment.id} className="relative flex items-center space-x-4 px-4 py-4 sm:px-6 lg:px-8">
src//app/examples/dashboard/page.tsx-                  <div className="min-w-0 flex-auto">
--
src//app/examples/dashboard/page.tsx-            </header>
src//app/examples/dashboard/page.tsx-            <ul role="list" className="divide-y divide-white/5">
src//app/examples/dashboard/page.tsx:              {activityItems.map((item) => (
src//app/examples/dashboard/page.tsx-                <li key={item.commit} className="px-4 py-4 sm:px-6 lg:px-8">
src//app/examples/dashboard/page.tsx-                  <div className="flex items-center gap-x-3">
--
src//app/examples/cap/example2/page.tsx-              
src//app/examples/cap/example2/page.tsx-              {/* Session Planning Section */}
src//app/examples/cap/example2/page.tsx:              {exampleData.sessions.map((session, index) => (
src//app/examples/cap/example2/page.tsx-                <div key={index} className="bg-primary-50/50 p-4 rounded-md mb-4">
src//app/examples/cap/example2/page.tsx-                  <div className="flex items-center gap-2 mb-3">
--
src//app/examples/cap/example2/page.tsx-        </h2>
src//app/examples/cap/example2/page.tsx-        
src//app/examples/cap/example2/page.tsx:        {exampleData.implementationRecords.map((record, index) => (
src//app/examples/cap/example2/page.tsx-          <div key={index} className="mb-6 border border-gray-200 rounded-md overflow-hidden">
src//app/examples/cap/example2/page.tsx-            <div className={`flex items-center gap-2 p-3 font-bold text-white ${index % 2 === 0 ? 'bg-lavender-700' : 'bg-lavender-800'}`}>
--
src//app/examples/cap/example3/page.tsx-            </div>
src//app/examples/cap/example3/page.tsx-            
src//app/examples/cap/example3/page.tsx:            {implementationRecords.map((record, index) => (
src//app/examples/cap/example3/page.tsx-              <ImplementationRecordCard
src//app/examples/cap/example3/page.tsx-                key={index}
--
src//app/examples/cap/components/IPGSubsectionCards.tsx-      getColorScheme={getColorScheme}
src//app/examples/cap/components/IPGSubsectionCards.tsx-    >
src//app/examples/cap/components/IPGSubsectionCards.tsx:      {subsections.map((subsection) => (
src//app/examples/cap/components/IPGSubsectionCards.tsx-        <ClickableCards.Card
src//app/examples/cap/components/IPGSubsectionCards.tsx-          key={subsection.section}
--
src//app/examples/cap/components/MonitoringProgress.tsx-                Metric
src//app/examples/cap/components/MonitoringProgress.tsx-              </th>
src//app/examples/cap/components/MonitoringProgress.tsx:              {dates.map((date, idx) => (
src//app/examples/cap/components/MonitoringProgress.tsx-                <th 
src//app/examples/cap/components/MonitoringProgress.tsx-                  key={idx} 
--
src//app/examples/cap/components/MonitoringProgress.tsx-          </thead>
src//app/examples/cap/components/MonitoringProgress.tsx-          <tbody className="bg-white divide-y divide-gray-200">
src//app/examples/cap/components/MonitoringProgress.tsx:            {metrics.map((metric, idx) => (
src//app/examples/cap/components/MonitoringProgress.tsx-              <tr key={idx}>
src//app/examples/cap/components/MonitoringProgress.tsx-                <td className="px-3 py-2 whitespace-normal border-r border-gray-200">
src//app/examples/cap/components/MonitoringProgress.tsx-                  {metric.name}
src//app/examples/cap/components/MonitoringProgress.tsx-                </td>
src//app/examples/cap/components/MonitoringProgress.tsx:                {metric.scores.map((score, scoreIdx) => (
src//app/examples/cap/components/MonitoringProgress.tsx-                  <td key={scoreIdx} className="px-3 py-2 text-center border-r border-gray-200 last:border-r-0">
src//app/examples/cap/components/MonitoringProgress.tsx-                    {score === null ? '—' : score}
--
src//app/examples/cap/components/MonitoringProgress.tsx-                Evidence Links
src//app/examples/cap/components/MonitoringProgress.tsx-              </td>
src//app/examples/cap/components/MonitoringProgress.tsx:              {dates.map((_, dateIdx) => (
src//app/examples/cap/components/MonitoringProgress.tsx-                <td key={dateIdx} className="px-3 py-2 text-center border-r border-gray-200 last:border-r-0">
src//app/examples/cap/components/MonitoringProgress.tsx-                  {evidence[dateIdx] ? (
--
src//app/examples/cap/components/MetricsBuilder.tsx-      
src//app/examples/cap/components/MetricsBuilder.tsx-      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
src//app/examples/cap/components/MetricsBuilder.tsx:        {metrics.map((metric, index) => {
src//app/examples/cap/components/MetricsBuilder.tsx-          const colorScheme = getMetricColorScheme(metric.type);
src//app/examples/cap/components/MetricsBuilder.tsx-          
--
src//app/examples/cap/components/MetricsBuilder.tsx-              <div className="p-3 space-y-3">
src//app/examples/cap/components/MetricsBuilder.tsx-                <h4 className={cn('font-medium', colorScheme.text)}>Ratings</h4>
src//app/examples/cap/components/MetricsBuilder.tsx:                {metric.ratings.map((rating, ratingIndex) => (
src//app/examples/cap/components/MetricsBuilder.tsx-                  <div key={ratingIndex}>
src//app/examples/cap/components/MetricsBuilder.tsx-                    <label className="block text-sm font-medium mb-1">
--
src//app/examples/cap/components/MetricsTable.tsx-              Metric
src//app/examples/cap/components/MetricsTable.tsx-            </th>
src//app/examples/cap/components/MetricsTable.tsx:            {dates.map((date, idx) => (
src//app/examples/cap/components/MetricsTable.tsx-              <th 
src//app/examples/cap/components/MetricsTable.tsx-                key={idx} 
--
src//app/examples/cap/components/MetricsTable.tsx-        </thead>
src//app/examples/cap/components/MetricsTable.tsx-        <tbody className="bg-white divide-y divide-gray-200">
src//app/examples/cap/components/MetricsTable.tsx:          {metrics.map((metric, idx) => (
src//app/examples/cap/components/MetricsTable.tsx-            <tr key={idx}>
src//app/examples/cap/components/MetricsTable.tsx-              <td className="px-3 py-2 whitespace-normal border-r border-gray-200">
src//app/examples/cap/components/MetricsTable.tsx-                {metric.name}
src//app/examples/cap/components/MetricsTable.tsx-              </td>
src//app/examples/cap/components/MetricsTable.tsx:              {metric.scores.map((score, scoreIdx) => (
src//app/examples/cap/components/MetricsTable.tsx-                <td key={scoreIdx} className="px-3 py-2 text-center border-r border-gray-200 last:border-r-0">
src//app/examples/cap/components/MetricsTable.tsx-                  {score === null ? '—' : score}
--
src//app/examples/cap/components/ImplementationRecord.tsx-          </thead>
src//app/examples/cap/components/ImplementationRecord.tsx-          <tbody className="bg-white divide-y divide-gray-200">
src//app/examples/cap/components/ImplementationRecord.tsx:            {records.map((record, idx) => (
src//app/examples/cap/components/ImplementationRecord.tsx-              <tr key={idx}>
src//app/examples/cap/components/ImplementationRecord.tsx-                <td className="px-3 py-2 whitespace-nowrap border-r border-gray-200">
--
src//app/examples/cap/components/ImplementationRecord.tsx-            {/* Empty rows for future entries */}
src//app/examples/cap/components/ImplementationRecord.tsx-            {dates.length > records.length && 
src//app/examples/cap/components/ImplementationRecord.tsx:              dates.slice(records.length).map((_, idx) => (
src//app/examples/cap/components/ImplementationRecord.tsx-                <tr key={`empty-${idx}`}>
src//app/examples/cap/components/ImplementationRecord.tsx-                  <td className="px-3 py-3 whitespace-nowrap border-r border-gray-200"></td>
--
src//app/examples/cap/components/CoachingMovesTable.tsx-        </thead>
src//app/examples/cap/components/CoachingMovesTable.tsx-        <tbody className="bg-white divide-y divide-gray-200">
src//app/examples/cap/components/CoachingMovesTable.tsx:          {moves.map((move, idx) => (
src//app/examples/cap/components/CoachingMovesTable.tsx-            <tr key={idx}>
src//app/examples/cap/components/CoachingMovesTable.tsx-              <td className="px-3 py-2 whitespace-normal border-r border-gray-200 align-top">
--
src//app/examples/cap/components/CoachingMovesTable.tsx-              <td className="px-3 py-2 whitespace-normal border-r border-gray-200">
src//app/examples/cap/components/CoachingMovesTable.tsx-                <ul className="list-disc pl-5 space-y-1">
src//app/examples/cap/components/CoachingMovesTable.tsx:                  {move.moves.map((item, itemIdx) => (
src//app/examples/cap/components/CoachingMovesTable.tsx-                    <li key={itemIdx}>{item}</li>
src//app/examples/cap/components/CoachingMovesTable.tsx-                  ))}
--
src//app/examples/cap/components/CoachingMovesTable.tsx-              <td className="px-3 py-2 whitespace-normal">
src//app/examples/cap/components/CoachingMovesTable.tsx-                <ul className="list-disc pl-5 space-y-1">
src//app/examples/cap/components/CoachingMovesTable.tsx:                  {move.tools.map((tool, toolIdx) => (
src//app/examples/cap/components/CoachingMovesTable.tsx-                    <li key={toolIdx}>{tool}</li>
src//app/examples/cap/components/CoachingMovesTable.tsx-                  ))}
--
src//app/examples/cap/components/CoachingMovesBuilder.tsx-      
src//app/examples/cap/components/CoachingMovesBuilder.tsx-      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
src//app/examples/cap/components/CoachingMovesBuilder.tsx:        {moves.map((move, index) => (
src//app/examples/cap/components/CoachingMovesBuilder.tsx-          <div
src//app/examples/cap/components/CoachingMovesBuilder.tsx-            key={index}
--
src//app/examples/cap/components/IPGFocusCards.tsx-      getColorScheme={getColorScheme}
src//app/examples/cap/components/IPGFocusCards.tsx-    >
src//app/examples/cap/components/IPGFocusCards.tsx:      {options.map((option) => (
src//app/examples/cap/components/IPGFocusCards.tsx-        <ClickableCards.Card
src//app/examples/cap/components/IPGFocusCards.tsx-          key={option.value}
--
src//app/examples/cap/components/ImplementationRecordCard.tsx-          value={record.movesSelected}
src//app/examples/cap/components/ImplementationRecordCard.tsx-          onChange={updateMovesSelected}
src//app/examples/cap/components/ImplementationRecordCard.tsx:          options={coachingMoves.map(move => ({
src//app/examples/cap/components/ImplementationRecordCard.tsx-            value: move.specificMove,
src//app/examples/cap/components/ImplementationRecordCard.tsx-            label: `${move.category}: ${move.specificMove}`
--
src//app/examples/cap/components/ImplementationRecordCard.tsx-        <h5 className="font-medium">Metrics</h5>
src//app/examples/cap/components/ImplementationRecordCard.tsx-        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
src//app/examples/cap/components/ImplementationRecordCard.tsx:          {metrics.map(metric => (
src//app/examples/cap/components/ImplementationRecordCard.tsx-            <Select
src//app/examples/cap/components/ImplementationRecordCard.tsx-              key={metric.name}
--
src//app/examples/cap/components/ImplementationRecordCard.tsx-              value={record.metrics[metric.name]?.toString() || ''}
src//app/examples/cap/components/ImplementationRecordCard.tsx-              onChange={(value) => updateMetric(metric.name, Number(value))}
src//app/examples/cap/components/ImplementationRecordCard.tsx:              options={metric.ratings.map(rating => ({
src//app/examples/cap/components/ImplementationRecordCard.tsx-                value: rating.score.toString(),
src//app/examples/cap/components/ImplementationRecordCard.tsx-                label: `${rating.score}: ${rating.description}`
--
src//app/examples/cap/components/ReflectionSection.tsx-      <h3 className="font-semibold text-lg mb-4">Reflections and Next Steps</h3>
src//app/examples/cap/components/ReflectionSection.tsx-      <div className="space-y-6">
src//app/examples/cap/components/ReflectionSection.tsx:        {reflections.map((reflection, idx) => (
src//app/examples/cap/components/ReflectionSection.tsx-          <div key={idx} className="bg-gray-50 p-4 rounded-lg border border-gray-200">
src//app/examples/cap/components/ReflectionSection.tsx-            <h4 className="font-medium text-gray-800 mb-2">{reflection.question}</h4>
--
src//app/examples/dayView/page.tsx-          </div>
src//app/examples/dayView/page.tsx-          <div className="isolate mt-2 grid grid-cols-7 gap-px rounded-lg bg-gray-200 text-sm shadow-sm ring-1 ring-gray-200">
src//app/examples/dayView/page.tsx:            {days.map((day, dayIdx) => (
src//app/examples/dayView/page.tsx-              <button
src//app/examples/dayView/page.tsx-                key={day.date}
--
src//app/actions/schedule/schedule.ts-      return {
src//app/actions/schedule/schedule.ts-        success: true,
src//app/actions/schedule/schedule.ts:        items: results.map(item => BellScheduleZodSchema.parse(item)),
src//app/actions/schedule/schedule.ts-        total: results.length
src//app/actions/schedule/schedule.ts-      };
--
src//app/actions/schedule/schedule.ts-      return {
src//app/actions/schedule/schedule.ts-        success: true,
src//app/actions/schedule/schedule.ts:        items: results.map(item => BellScheduleZodSchema.parse(item)),
src//app/actions/schedule/schedule.ts-        total: results.length
src//app/actions/schedule/schedule.ts-      };
--
src//app/actions/nextSteps/nextSteps.ts-      return {
src//app/actions/nextSteps/nextSteps.ts-        success: true,
src//app/actions/nextSteps/nextSteps.ts:        items: results.map(item => NextStepZodSchema.parse(item)),
src//app/actions/nextSteps/nextSteps.ts-        total: results.length
src//app/actions/nextSteps/nextSteps.ts-      };
--
src//app/actions/nextSteps/nextSteps.ts-      return {
src//app/actions/nextSteps/nextSteps.ts-        success: true,
src//app/actions/nextSteps/nextSteps.ts:        items: results.map(item => NextStepZodSchema.parse(item)),
src//app/actions/nextSteps/nextSteps.ts-        total: results.length
src//app/actions/nextSteps/nextSteps.ts-      };
--
src//app/actions/nextSteps/nextSteps.ts-      return {
src//app/actions/nextSteps/nextSteps.ts-        success: true,
src//app/actions/nextSteps/nextSteps.ts:        items: results.map(item => NextStepZodSchema.parse(item)),
src//app/actions/nextSteps/nextSteps.ts-        total: results.length
src//app/actions/nextSteps/nextSteps.ts-      };
--
src//app/actions/rubrics/rubrics.ts-      return {
src//app/actions/rubrics/rubrics.ts-        success: true,
src//app/actions/rubrics/rubrics.ts:        items: results.map(item => RubricScoreZodSchema.parse(item)) as z.infer<typeof RubricScoreZodSchema>[],
src//app/actions/rubrics/rubrics.ts-        total: results.length
src//app/actions/rubrics/rubrics.ts-      };
--
src//app/actions/notes/notes.ts-      return {
src//app/actions/notes/notes.ts-        success: true,
src//app/actions/notes/notes.ts:        items: results.map(item => NoteZodSchema.parse(item)),
src//app/actions/notes/notes.ts-        total: results.length
src//app/actions/notes/notes.ts-      };
--
src//app/actions/notes/notes.ts-      return {
src//app/actions/notes/notes.ts-        success: true,
src//app/actions/notes/notes.ts:        items: results.map(item => NoteZodSchema.parse(item)),
src//app/actions/notes/notes.ts-        total: results.length
src//app/actions/notes/notes.ts-      };
--
src//app/actions/staff/operations.ts-      
src//app/actions/staff/operations.ts-      // Validate and combine results
src//app/actions/staff/operations.ts:      const validatedNYCPSStaff = nycpsStaff.map(staff => NYCPSStaffZodSchema.parse(staff));
src//app/actions/staff/operations.ts:      const validatedTLStaff = tlStaff.map(staff => TeachingLabStaffZodSchema.parse(staff));
src//app/actions/staff/operations.ts-      
src//app/actions/staff/operations.ts-      const combinedStaff = [...validatedNYCPSStaff, ...validatedTLStaff];
--
src//app/actions/staff/operations.ts-        results.standard = {
src//app/actions/staff/operations.ts-          success: result.success,
src//app/actions/staff/operations.ts:          items: result.items || [],
src//app/actions/staff/operations.ts:          total: result.items?.length || 0,
src//app/actions/staff/operations.ts-          error: result.message || result.error || (result.errors?.[0]?.error || "")
src//app/actions/staff/operations.ts-        };
--
src//app/actions/staff/operations.ts-        results.nycps = {
src//app/actions/staff/operations.ts-          success: result.success,
src//app/actions/staff/operations.ts:          items: result.items || [],
src//app/actions/staff/operations.ts:          total: result.items?.length || 0,
src//app/actions/staff/operations.ts-          error: result.message || result.error || (result.errors?.[0]?.error || "")
src//app/actions/staff/operations.ts-        };
--
src//app/actions/staff/operations.ts-        results.tl = {
src//app/actions/staff/operations.ts-          success: result.success,
src//app/actions/staff/operations.ts:          items: result.items || [],
src//app/actions/staff/operations.ts:          total: result.items?.length || 0,
src//app/actions/staff/operations.ts-          error: result.message || result.error || (result.errors?.[0]?.error || "")
src//app/actions/staff/operations.ts-        };
--
src//app/actions/staff/operations.ts-      // Combine all results
src//app/actions/staff/operations.ts-      const allItems = [
src//app/actions/staff/operations.ts:        ...(results.standard.items || []),
src//app/actions/staff/operations.ts:        ...(results.nycps.items || []),
src//app/actions/staff/operations.ts:        ...(results.tl.items || [])
src//app/actions/staff/operations.ts-      ];
src//app/actions/staff/operations.ts-      
--
src//app/actions/schools/schools.ts-        .exec();
src//app/actions/schools/schools.ts-      
src//app/actions/schools/schools.ts:      const items = schools.map(school => SchoolZodSchema.parse(school));
src//app/actions/schools/schools.ts-      
src//app/actions/schools/schools.ts-      return {
--
src//app/actions/schools/schools.ts-      return {
src//app/actions/schools/schools.ts-        success: true,
src//app/actions/schools/schools.ts:        items: result.items
src//app/actions/schools/schools.ts-      };
src//app/actions/schools/schools.ts-    } catch (error) {
--
src//app/actions/lookFors/lookFors.ts-    return {
src//app/actions/lookFors/lookFors.ts-      success: true,
src//app/actions/lookFors/lookFors.ts:      items: result.items
src//app/actions/lookFors/lookFors.ts-    };
src//app/actions/lookFors/lookFors.ts-  } catch (error) {
--
src//app/api/integrations/monday/visits/route.ts-// src/app/api/integrations/monday/visits/route.ts
src//app/api/integrations/monday/visits/route.ts-
src//app/api/integrations/monday/visits/route.ts:import { NextResponse } from 'next/server';
src//app/api/integrations/monday/visits/route.ts-import { findPotentialVisitsToImport } from '@api-monday/services/import-service';
src//app/api/integrations/monday/visits/route.ts-import { handleValidationError } from '@error/handle-validation-error';
--
src//app/api/integrations/monday/visits/import/complete/route.ts:import { NextResponse } from 'next/server';
src//app/api/integrations/monday/visits/import/complete/route.ts-import { importSelectedVisits } from '@/lib/integrations/monday/services/import-service';
src//app/api/integrations/monday/visits/import/complete/route.ts-import { handleServerError } from '@/lib/error/handle-server-error';
--
src//app/api/integrations/monday/visits/import/complete/route.ts-    }
src//app/api/integrations/monday/visits/import/complete/route.ts-    
src//app/api/integrations/monday/visits/import/complete/route.ts:    const validatedData = validation.data;
src//app/api/integrations/monday/visits/import/complete/route.ts-    
src//app/api/integrations/monday/visits/import/complete/route.ts-    // Import the visit with the completed data
--
src//app/api/integrations/monday/visits/import/route.ts-// src/app/api/integrations/monday/visits/import/route.ts
src//app/api/integrations/monday/visits/import/route.ts:import { NextResponse } from 'next/server';
src//app/api/integrations/monday/visits/import/route.ts-import { importSelectedVisits } from '@/lib/integrations/monday/services/import-service';
src//app/api/integrations/monday/visits/import/route.ts-import { handleServerError } from '@/lib/error/handle-server-error';
--
src//app/api/integrations/monday/visits/import/route.ts-    }
src//app/api/integrations/monday/visits/import/route.ts-    
src//app/api/integrations/monday/visits/import/route.ts:    const { selectedItems } = validation.data;
src//app/api/integrations/monday/visits/import/route.ts-    
src//app/api/integrations/monday/visits/import/route.ts-    // Use the existing service to import the visits
--
src//app/api/integrations/monday/user/route.ts:import { NextRequest, NextResponse } from 'next/server';
src//app/api/integrations/monday/user/route.ts-import { fetchMondayUserByEmail } from '@/lib/integrations/monday/client/client';
src//app/api/integrations/monday/user/route.ts-import { handleServerError } from '@/lib/error/handle-server-error';
--
src//app/api/integrations/monday/user/route.ts-    
src//app/api/integrations/monday/user/route.ts-    // If successful, return the user data
src//app/api/integrations/monday/user/route.ts:    if (result && result.success && result.data) {
src//app/api/integrations/monday/user/route.ts-      return NextResponse.json({
src//app/api/integrations/monday/user/route.ts-        success: true,
src//app/api/integrations/monday/user/route.ts:        data: result.data
src//app/api/integrations/monday/user/route.ts-      });
src//app/api/integrations/monday/user/route.ts-    }
--
src//app/api/staff/exists/route.ts:import { NextRequest, NextResponse } from 'next/server';
src//app/api/staff/exists/route.ts-import { NYCPSStaffModel, TeachingLabStaffModel } from '@mongoose-schema/core/staff.model';
src//app/api/staff/exists/route.ts-import { handleServerError } from "@/lib/error";
--
src//app/api/staff/bulk-upload/route.ts:import { NextRequest, NextResponse } from "next/server";
src//app/api/staff/bulk-upload/route.ts-import { NYCPSStaffModel } from "@/lib/data-schema/mongoose-schema/core/staff.model";
src//app/api/staff/bulk-upload/route.ts-import { NYCPSStaffInputZodSchema } from "@zod-schema/core/staff";
--
src//app/api/staff/bulk-upload/route.ts-    return NextResponse.json({
src//app/api/staff/bulk-upload/route.ts-      success: true,
src//app/api/staff/bulk-upload/route.ts:      message: `Successfully uploaded ${result.items?.length || 0} staff members`,
src//app/api/staff/bulk-upload/route.ts:      uploaded: result.items?.length
src//app/api/staff/bulk-upload/route.ts-    });
src//app/api/staff/bulk-upload/route.ts-  } catch (error) {
--
src//app/api/staff/[id]/route.ts:import { NextRequest, NextResponse } from "next/server";
src//app/api/staff/[id]/route.ts-import { fetchStaffByIdForApi } from "@api-fetchers/staff";
src//app/api/staff/[id]/route.ts:import { standardizeResponse } from "@api-responses/standardize";
src//app/api/staff/[id]/route.ts-import { handleServerError } from "@error/handle-server-error";
src//app/api/staff/[id]/route.ts-
--
src//app/api/staff/[id]/route.ts-    return NextResponse.json(
src//app/api/staff/[id]/route.ts-      standardizeResponse({
src//app/api/staff/[id]/route.ts:        items: result.items,
src//app/api/staff/[id]/route.ts-        success: true
src//app/api/staff/[id]/route.ts-      })
--
src//app/api/webhooks/clerk/route.ts:import { NextResponse } from 'next/server';
src//app/api/webhooks/clerk/route.ts-import { validateClerkWebhook } from '@/lib/api/validation/clerk-webhook';
src//app/api/webhooks/clerk/route.ts-import { handleUserSync, handleOrganizationSync, handleUserDeletion } from '@/lib/api/handlers/clerk-webhook';
--
src//app/api/webhooks/clerk/route.ts-    }
src//app/api/webhooks/clerk/route.ts-
src//app/api/webhooks/clerk/route.ts:    const { type, data } = validation.payload;
src//app/api/webhooks/clerk/route.ts-
src//app/api/webhooks/clerk/route.ts-    // Handle different webhook events
--
src//app/api/look-fors/bulk-upload/route.ts:import { NextRequest, NextResponse } from "next/server";
src//app/api/look-fors/bulk-upload/route.ts-import { LookForModel } from "@mongoose-schema/look-fors";
src//app/api/look-fors/bulk-upload/route.ts-import { LookForZodSchema } from "@zod-schema/look-fors/look-for";
--
src//app/api/look-fors/bulk-upload/route.ts-    return NextResponse.json({
src//app/api/look-fors/bulk-upload/route.ts-      success: true,
src//app/api/look-fors/bulk-upload/route.ts:      message: `Successfully uploaded ${result.items?.length || 0} look-fors`,
src//app/api/look-fors/bulk-upload/route.ts:      uploaded: result.items?.length
src//app/api/look-fors/bulk-upload/route.ts-    });
src//app/api/look-fors/bulk-upload/route.ts-  } catch (error) {
--
src//app/debug/design-system/layout.tsx-          <span className="font-semibold text-primary">Design System</span>
src//app/debug/design-system/layout.tsx-          <div className="flex gap-6">
src//app/debug/design-system/layout.tsx:            {navItems.map((item) => (
src//app/debug/design-system/layout.tsx-              <Link
src//app/debug/design-system/layout.tsx-                key={item.href}
--
src//app/debug/design-system/tokens/page.tsx-        <Heading level="h2">Colors</Heading>
src//app/debug/design-system/tokens/page.tsx-        <div className="mt-8 space-y-8">
src//app/debug/design-system/tokens/page.tsx:          {Object.entries(colorTokens).map(([group, values]) => (
src//app/debug/design-system/tokens/page.tsx-            <div key={group}>
src//app/debug/design-system/tokens/page.tsx-              <Heading level="h3">{group}</Heading>
src//app/debug/design-system/tokens/page.tsx-              <div className="mt-4 grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-8">
src//app/debug/design-system/tokens/page.tsx:                {values.map((name) => (
src//app/debug/design-system/tokens/page.tsx-                  <ColorSwatch key={name} name={name} group={group} />
src//app/debug/design-system/tokens/page.tsx-                ))}
--
src//app/debug/design-system/tokens/page.tsx-        <Heading level="h2">Border Radius</Heading>
src//app/debug/design-system/tokens/page.tsx-        <div className="mt-8 grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-8">
src//app/debug/design-system/tokens/page.tsx:          {radiusTokens.map((value) => (
src//app/debug/design-system/tokens/page.tsx-            <RadiusSwatch key={value} value={value} />
src//app/debug/design-system/tokens/page.tsx-          ))}
--
src//app/debug/design-system/tokens/page.tsx-        <Heading level="h2">Shadows</Heading>
src//app/debug/design-system/tokens/page.tsx-        <div className="mt-8 grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-8">
src//app/debug/design-system/tokens/page.tsx:          {shadowTokens.map((value) => (
src//app/debug/design-system/tokens/page.tsx-            <ShadowSwatch key={value} value={value} />
src//app/debug/design-system/tokens/page.tsx-          ))}
--
src//components/core/fields/ReferenceSelect.tsx-  // Transform BaseReference options to the format required by react-select
src//components/core/fields/ReferenceSelect.tsx-  const options = useMemo(() => {
src//components/core/fields/ReferenceSelect.tsx:    return rawOptions.map(option => ({
src//components/core/fields/ReferenceSelect.tsx-      value: option._id,
src//components/core/fields/ReferenceSelect.tsx-      label: option.label
--
src//components/core/fields/ReferenceSelect.tsx-  const handleChange = useCallback((selected: OptionType | readonly OptionType[] | null) => {
src//components/core/fields/ReferenceSelect.tsx-    if (multiple) {
src//components/core/fields/ReferenceSelect.tsx:      const values = selected ? (selected as readonly OptionType[]).map((item: OptionType) => item.value) : [];
src//components/core/fields/ReferenceSelect.tsx-      onChange(values);
src//components/core/fields/ReferenceSelect.tsx-    } else {
--
src//components/core/fields/Select.tsx-              <span className={styles.value()}>
src//components/core/fields/Select.tsx-                {Array.isArray(safeValue) && safeValue.length > 0
src//components/core/fields/Select.tsx:                  ? safeValue.map(v => options.find(option => option.value === v)?.label).join(', ')
src//components/core/fields/Select.tsx-                  : placeholder}
src//components/core/fields/Select.tsx-              </span>
--
src//components/core/fields/Select.tsx-          </Listbox.Button>
src//components/core/fields/Select.tsx-          <Listbox.Options className={styles.options()}>
src//components/core/fields/Select.tsx:            {options.map((option) => (
src//components/core/fields/Select.tsx-              <Listbox.Option
src//components/core/fields/Select.tsx-                key={option.value}
--
src//components/features/scoring/ScoresPage.tsx-  const schoolOptions = schools
src//components/features/scoring/ScoresPage.tsx-    .filter(school => !selectedDistrict || school.districtId === selectedDistrict)
src//components/features/scoring/ScoresPage.tsx:    .map(school => ({ value: school.id, label: school.name }));
src//components/features/scoring/ScoresPage.tsx-
src//components/features/scoring/ScoresPage.tsx-  const teacherOptions = teachers
src//components/features/scoring/ScoresPage.tsx-    .filter(teacher => !selectedSchool || teacher.schoolId === selectedSchool)
src//components/features/scoring/ScoresPage.tsx:    .map(teacher => ({ value: teacher.id, label: teacher.name }));
src//components/features/scoring/ScoresPage.tsx-
src//components/features/scoring/ScoresPage.tsx-  return (
--
src//components/features/scoring/ScoresPage.tsx-        <Select
src//components/features/scoring/ScoresPage.tsx-          label="District"
src//components/features/scoring/ScoresPage.tsx:          options={districts.map(d => ({ value: d.id, label: d.name }))}
src//components/features/scoring/ScoresPage.tsx-          value={selectedDistrict}
src//components/features/scoring/ScoresPage.tsx-          onChange={setSelectedDistrict}
--
src//components/features/scoring/ScoresPage.tsx-        <Select
src//components/features/scoring/ScoresPage.tsx-          label="Cycle"
src//components/features/scoring/ScoresPage.tsx:          options={cycles.map(c => ({ value: c.id, label: c.name }))}
src//components/features/scoring/ScoresPage.tsx-          value={selectedCycle}
src//components/features/scoring/ScoresPage.tsx-          onChange={setSelectedCycle}
--
src//components/features/scoring/ScoresPage.tsx-      {selectedTeachers.length > 0 && selectedCycle && (
src//components/features/scoring/ScoresPage.tsx-        <div className="space-y-6">
src//components/features/scoring/ScoresPage.tsx:          {selectedTeachers.map(teacherId => {
src//components/features/scoring/ScoresPage.tsx-            const teacher = teachers.find(t => t.id === teacherId);
src//components/features/scoring/ScoresPage.tsx-            return (
--
src//components/features/scoring/ScoresPage.tsx-                </Heading>
src//components/features/scoring/ScoresPage.tsx-                <div className="space-y-4">
src//components/features/scoring/ScoresPage.tsx:                  {rubricLookFors.map(lookFor => (
src//components/features/scoring/ScoresPage.tsx-                    <ScoreEntry
src//components/features/scoring/ScoresPage.tsx-                      key={lookFor.id}
--
src//components/features/scoring/ScoreEntry.tsx-  const [score, setScore] = useState<number>(2.5);
src//components/features/scoring/ScoreEntry.tsx-
src//components/features/scoring/ScoreEntry.tsx:  const rubricLabels = lookFor.levels.map((level) => ({
src//components/features/scoring/ScoreEntry.tsx-    id: level.value,
src//components/features/scoring/ScoreEntry.tsx-    title: level.label,
--
src//components/features/scoring/ScoreEntry.tsx-        {/* Rubric Labels */}
src//components/features/scoring/ScoreEntry.tsx-        <div className="flex justify-between w-full gap-4 mb-4">
src//components/features/scoring/ScoreEntry.tsx:          {rubricLabels.map((label) => {
src//components/features/scoring/ScoreEntry.tsx-            const backgroundColor = label.hex;
src//components/features/scoring/ScoreEntry.tsx-            const textColor = backgroundColor === '#274e13' ? 'white' : 'black';
--
src//components/features/scoring/ScoreEntry.tsx-        {/* Score Numbers */}
src//components/features/scoring/ScoreEntry.tsx-        <div className="grid grid-cols-4 w-3/4 text-center mb-2">
src//components/features/scoring/ScoreEntry.tsx:          {['1', '2', '3', '4'].map((num) => (
src//components/features/scoring/ScoreEntry.tsx-            <Text key={num} textSize="xl" weight="bold">
src//components/features/scoring/ScoreEntry.tsx-              {num}
--
src//components/integrations/monday/UserForm.tsx-
src//components/integrations/monday/UserForm.tsx-  // Use the hook with the current email
src//components/integrations/monday/UserForm.tsx:  const { data: user, isLoading, error } = useMondayUserByEmail(email);
src//components/integrations/monday/UserForm.tsx-
src//components/integrations/monday/UserForm.tsx-  const handleSearch = async () => {
--
src//components/integrations/monday/common/ConnectionTest.tsx-      const result = await testConnection() as MondayConnectionTestResult;
src//components/integrations/monday/common/ConnectionTest.tsx-      
src//components/integrations/monday/common/ConnectionTest.tsx:      if (result.success && result.data) {
src//components/integrations/monday/common/ConnectionTest.tsx-        setConnectionTestStatus({ 
src//components/integrations/monday/common/ConnectionTest.tsx-          status: 'success', 
src//components/integrations/monday/common/ConnectionTest.tsx:          message: `Connected as ${result.data.name} (${result.data.email})` 
src//components/integrations/monday/common/ConnectionTest.tsx-        });
src//components/integrations/monday/common/ConnectionTest.tsx-      } else {
--
src//components/integrations/monday/domain/visits/ImportCompletionForm.tsx-    return VisitFieldConfig
src//components/integrations/monday/domain/visits/ImportCompletionForm.tsx-      .filter(field => missingFields.includes(field.key as string))
src//components/integrations/monday/domain/visits/ImportCompletionForm.tsx:      .map(field => {
src//components/integrations/monday/domain/visits/ImportCompletionForm.tsx-        // Setup logic for reference fields
src//components/integrations/monday/domain/visits/ImportCompletionForm.tsx-        if (field.type === 'select' || field.type === 'reference') {
--
src//components/integrations/monday/domain/visits/ImportCompletionForm.tsx-          <p>Please complete the following fields to import this visit:</p>
src//components/integrations/monday/domain/visits/ImportCompletionForm.tsx-          <ul className="list-disc list-inside mt-1">
src//components/integrations/monday/domain/visits/ImportCompletionForm.tsx:            {missingFields.map(field => (
src//components/integrations/monday/domain/visits/ImportCompletionForm.tsx-              <li key={field}>{field}</li>
src//components/integrations/monday/domain/visits/ImportCompletionForm.tsx-            ))}
--
src//components/integrations/monday/domain/visits/MondayVisitImportClient.tsx-    return VisitFieldConfig
src//components/integrations/monday/domain/visits/MondayVisitImportClient.tsx-      .filter(field => missingFields.includes(field.key))
src//components/integrations/monday/domain/visits/MondayVisitImportClient.tsx:      .map(field => {
src//components/integrations/monday/domain/visits/MondayVisitImportClient.tsx-        // Setup logic for reference fields
src//components/integrations/monday/domain/visits/MondayVisitImportClient.tsx-        if (field.type === 'select' || field.type === 'reference') {
--
src//components/integrations/monday/domain/visits/MondayVisitImportClient.tsx-          <p>Please complete the following fields to import this visit:</p>
src//components/integrations/monday/domain/visits/MondayVisitImportClient.tsx-          <ul className="list-disc list-inside mt-1">
src//components/integrations/monday/domain/visits/MondayVisitImportClient.tsx:            {missingFields.map(field => (
src//components/integrations/monday/domain/visits/MondayVisitImportClient.tsx-              <li key={field}>{field}</li>
src//components/integrations/monday/domain/visits/MondayVisitImportClient.tsx-            ))}
--
src//components/integrations/monday/domain/visits/VisitSelector.tsx-      const result = await importSelectedItems();
src//components/integrations/monday/domain/visits/VisitSelector.tsx-      
src//components/integrations/monday/domain/visits/VisitSelector.tsx:      if (result.success && result.data) {
src//components/integrations/monday/domain/visits/VisitSelector.tsx:        // Cast the result.data to the expected type
src//components/integrations/monday/domain/visits/VisitSelector.tsx:        const importData = result.data as {
src//components/integrations/monday/domain/visits/VisitSelector.tsx-          visitData?: Record<string, unknown>;
src//components/integrations/monday/domain/visits/VisitSelector.tsx-          missingFields?: string[];
--
src//components/integrations/monday/domain/visits/VisitSelector.tsx-      {/* Visit list */}
src//components/integrations/monday/domain/visits/VisitSelector.tsx-      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
src//components/integrations/monday/domain/visits/VisitSelector.tsx:        {filteredPreviews.map((preview) => (
src//components/integrations/monday/domain/visits/VisitSelector.tsx-          <Card key={preview.id} className={`p-4 ${
src//components/integrations/monday/domain/visits/VisitSelector.tsx-            preview.isDuplicate ? 'border-amber-300' : 
--
src//components/integrations/monday/domain/visits/MondayItemPreviewCard.tsx-            <Text className="text-red-800 font-medium mb-1">Validation Errors:</Text>
src//components/integrations/monday/domain/visits/MondayItemPreviewCard.tsx-            <ul className="list-disc list-inside text-sm text-red-700">
src//components/integrations/monday/domain/visits/MondayItemPreviewCard.tsx:              {Object.entries(errors).map(([field, message]) => (
src//components/integrations/monday/domain/visits/MondayItemPreviewCard.tsx-                <li key={field}>{field}: {message}</li>
src//components/integrations/monday/domain/visits/MondayItemPreviewCard.tsx-              ))}
--
src//components/integrations/monday/domain/visits/MondayItemPreviewCard.tsx-        {/* Transformed data */}
src//components/integrations/monday/domain/visits/MondayItemPreviewCard.tsx-        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
src//components/integrations/monday/domain/visits/MondayItemPreviewCard.tsx:          {Object.entries(transformed).map(([field, value]) => {
src//components/integrations/monday/domain/visits/MondayItemPreviewCard.tsx-            // Skip system fields
src//components/integrations/monday/domain/visits/MondayItemPreviewCard.tsx-            if (field.startsWith('_') || field === 'mondayItemId' || field === 'mondayBoardId') {
--
src//components/integrations/monday/domain/users/CreateTeachingLabStaffForm.tsx-      // Make a deep copy and ensure mondayUser data is preserved
src//components/integrations/monday/domain/users/CreateTeachingLabStaffForm.tsx-      const staffData: TeachingLabStaffInput = {
src//components/integrations/monday/domain/users/CreateTeachingLabStaffForm.tsx:        ...data,
src//components/integrations/monday/domain/users/CreateTeachingLabStaffForm.tsx-        mondayUser: {
src//components/integrations/monday/domain/users/CreateTeachingLabStaffForm.tsx-          // Ensure all required fields from defaultValues are included
--
src//components/integrations/monday/domain/users/CreateTeachingLabStaffForm.tsx-          isConnected: true,
src//components/integrations/monday/domain/users/CreateTeachingLabStaffForm.tsx-          // Include any other fields from the current mondayUser
src//components/integrations/monday/domain/users/CreateTeachingLabStaffForm.tsx:          ...data.mondayUser,
src//components/integrations/monday/domain/users/CreateTeachingLabStaffForm.tsx-          // Ensure the lastSynced is always a Date object
src//components/integrations/monday/domain/users/CreateTeachingLabStaffForm.tsx-          lastSynced: defaultValues.mondayUser?.lastSynced || new Date().toISOString()
--
src//components/integrations/monday/domain/users/UserForm.tsx-      const result = await response.json();
src//components/integrations/monday/domain/users/UserForm.tsx-      
src//components/integrations/monday/domain/users/UserForm.tsx:      if (response.ok && result.success && result.data) {
src//components/integrations/monday/domain/users/UserForm.tsx-        setSearchStatus({ status: 'idle' });
src//components/integrations/monday/domain/users/UserForm.tsx:        onUserFound?.(result.data);
src//components/integrations/monday/domain/users/UserForm.tsx-      } else {
src//components/integrations/monday/domain/users/UserForm.tsx-        setSearchStatus({ 
--
src//components/composed/tabs/Tabs.tsx-      <div className={styles.container()}>
src//components/composed/tabs/Tabs.tsx-        <ul className={styles.list()} role="tablist">
src//components/composed/tabs/Tabs.tsx:          {tabItems.map((tab) => {
src//components/composed/tabs/Tabs.tsx-            const isActive = activeTab === tab.id
src//components/composed/tabs/Tabs.tsx-            return (
--
src//components/composed/tabs/Tabs.tsx-      </div>
src//components/composed/tabs/Tabs.tsx-      <div className="tab-content">
src//components/composed/tabs/Tabs.tsx:        {tabItems.map((tab) => (
src//components/composed/tabs/Tabs.tsx-          <div
src//components/composed/tabs/Tabs.tsx-            key={tab.id}
--
src//components/composed/tables/ScheduleTable.tsx-          <tr>
src//components/composed/tables/ScheduleTable.tsx-            <th scope="col" className={styles.headerCell()}>Period</th>
src//components/composed/tables/ScheduleTable.tsx:            {scheduleByDay.map(day => (
src//components/composed/tables/ScheduleTable.tsx-              <th key={day.day} scope="col" className={styles.headerCell()}>
src//components/composed/tables/ScheduleTable.tsx-                {day.day}
--
src//components/composed/tables/ScheduleTable.tsx-        </thead>
src//components/composed/tables/ScheduleTable.tsx-        <tbody className={styles.body()}>
src//components/composed/tables/ScheduleTable.tsx:          {allPeriodNumbers.map(periodNum => (
src//components/composed/tables/ScheduleTable.tsx-            <tr key={periodNum} className={styles.row()}>
src//components/composed/tables/ScheduleTable.tsx-              <td className={styles.cell()}>
--
src//components/composed/tables/ScheduleTable.tsx-                </span>
src//components/composed/tables/ScheduleTable.tsx-              </td>
src//components/composed/tables/ScheduleTable.tsx:              {scheduleByDay.map(day => {
src//components/composed/tables/ScheduleTable.tsx-                const period = periodMap.get(`${day.day}-${periodNum}`)
src//components/composed/tables/ScheduleTable.tsx-                return (
--
src//components/composed/tables/features/select.tsx-      className={tableSelect({ textSize, padding, className })}
src//components/composed/tables/features/select.tsx-    >
src//components/composed/tables/features/select.tsx:      {options.map((option) => (
src//components/composed/tables/features/select.tsx-        <option
src//components/composed/tables/features/select.tsx-          key={option.value}
--
src//components/composed/tables/parts/row.tsx-  return (
src//components/composed/tables/parts/row.tsx-    <tr className={styles.root()} onClick={onClick}>
src//components/composed/tables/parts/row.tsx:      {columns.map((column, index) => (
src//components/composed/tables/parts/row.tsx-        <td key={index} className={styles.cell()}>
src//components/composed/tables/parts/row.tsx-          {column.accessor(item)}
--
src//components/composed/tables/parts/header.tsx-    <thead className={styles.root()}>
src//components/composed/tables/parts/header.tsx-      <tr>
src//components/composed/tables/parts/header.tsx:        {columns.map((column, index) => (
src//components/composed/tables/parts/header.tsx-          <th
src//components/composed/tables/parts/header.tsx-            key={index}
--
src//components/composed/tables/Table.tsx-        <tbody className={styles.body()}>
src//components/composed/tables/Table.tsx-          {data.length > 0 ? (
src//components/composed/tables/Table.tsx:            data.map((item, index) => (
src//components/composed/tables/Table.tsx-              <TableRow
src//components/composed/tables/Table.tsx-                key={index}
--
src//components/composed/forms/RigidResourceForm.tsx-        </div>
src//components/composed/forms/RigidResourceForm.tsx-        <div className={styles.fieldsContainer()}>
src//components/composed/forms/RigidResourceForm.tsx:          {fields.map((field) => (
src//components/composed/forms/RigidResourceForm.tsx-            <div key={String(field.key)} className={styles.fieldWrapper()}>
src//components/composed/forms/RigidResourceForm.tsx-              {renderField(field)}
--
src//components/composed/forms/UpdatedResourceForm.tsx-        </div>
src//components/composed/forms/UpdatedResourceForm.tsx-        <div className={styles.fieldsContainer()}>
src//components/composed/forms/UpdatedResourceForm.tsx:          {fields.map((field) => (
src//components/composed/forms/UpdatedResourceForm.tsx-            <div key={String(field.key)} className={styles.fieldWrapper()}>
src//components/composed/forms/UpdatedResourceForm.tsx-              {renderField(field)}
--
src//components/composed/forms/UpdatedResourceForm.tsx-    
src//components/composed/forms/UpdatedResourceForm.tsx-    // Log field keys vs value keys to diagnose mismatches
src//components/composed/forms/UpdatedResourceForm.tsx:    const fieldKeys = fields.map(field => String(field.key));
src//components/composed/forms/UpdatedResourceForm.tsx-    const valueKeys = Object.keys(initialValues || {});
src//components/composed/forms/UpdatedResourceForm.tsx-    console.log('Form field keys:', fieldKeys);
--
src//components/composed/forms/UpdatedResourceForm.tsx-
src//components/composed/forms/UpdatedResourceForm.tsx-  // Apply field overrides if provided
src//components/composed/forms/UpdatedResourceForm.tsx:  const fieldsWithOverrides = fields.map(field => {
src//components/composed/forms/UpdatedResourceForm.tsx-    const fieldKey = field.key as keyof T;
src//components/composed/forms/UpdatedResourceForm.tsx-    const override = fieldOverrideMap[fieldKey];
--
src//components/composed/forms/UpdatedResourceForm.tsx-        
src//components/composed/forms/UpdatedResourceForm.tsx-        <div className={styles.fieldsContainer()}>
src//components/composed/forms/UpdatedResourceForm.tsx:          {fieldsWithOverrides.map((field) => (
src//components/composed/forms/UpdatedResourceForm.tsx-            <div key={String(field.key)} className={styles.fieldWrapper()}>
src//components/composed/forms/UpdatedResourceForm.tsx-              {renderFormField({
--
src//components/composed/forms/Form.tsx-      className={cn(styles.root(), className)}
src//components/composed/forms/Form.tsx-    >
src//components/composed/forms/Form.tsx:      {formLayout.map((section) => {
src//components/composed/forms/Form.tsx-        const sectionFields = section.fieldIds
src//components/composed/forms/Form.tsx:          .map(id => fieldMap[id])
src//components/composed/forms/Form.tsx-          .filter(Boolean)
src//components/composed/forms/Form.tsx-
--
src//components/composed/forms/Form.tsx-          >
src//components/composed/forms/Form.tsx-            <div className={styles.fields()}>
src//components/composed/forms/Form.tsx:              {sectionFields.map((field) => {
src//components/composed/forms/Form.tsx-                const FieldComponent = getFieldComponent(field.type)
src//components/composed/forms/Form.tsx-                if (!FieldComponent) {
--
src//components/composed/navigation/Breadcrumbs.tsx-          </div>
src//components/composed/navigation/Breadcrumbs.tsx-        </li>
src//components/composed/navigation/Breadcrumbs.tsx:        {items.map((item) => (
src//components/composed/navigation/Breadcrumbs.tsx-          <li key={item.href} className="flex">
src//components/composed/navigation/Breadcrumbs.tsx-            <div className="flex items-center">
--
src//components/composed/layouts/PageHeader.tsx-        {meta.length > 0 && (
src//components/composed/layouts/PageHeader.tsx-          <div className={styles.meta()}>
src//components/composed/layouts/PageHeader.tsx:            {meta.map((item, index) => (
src//components/composed/layouts/PageHeader.tsx-              <div key={index} className={styles.metaItem()}>
src//components/composed/layouts/PageHeader.tsx-                {item.icon && (
--
src//components/composed/layouts/PageHeader.tsx-      {actions.length > 0 && (
src//components/composed/layouts/PageHeader.tsx-        <div className={styles.actions()}>
src//components/composed/layouts/PageHeader.tsx:          {actions.map((action, index) => (
src//components/composed/layouts/PageHeader.tsx-            <span key={index} className={styles.actionItem()}>
src//components/composed/layouts/PageHeader.tsx-              <Button
--
src//components/composed/layouts/PageHeader.tsx-              className={styles.menuItems()}
src//components/composed/layouts/PageHeader.tsx-            >
src//components/composed/layouts/PageHeader.tsx:              {actions.map((action, index) => (
src//components/composed/layouts/PageHeader.tsx-                <MenuItem key={index}>
src//components/composed/layouts/PageHeader.tsx-                  {({ active }) => (
--
src//components/composed/layouts/NavigationSidebar.tsx-  const renderNavItems = (items: NavigationItem[], depth = 0) => (
src//components/composed/layouts/NavigationSidebar.tsx-    <ul role="list" className={cn(styles.navGroup(), depth > 0 && "ml-6")}>
src//components/composed/layouts/NavigationSidebar.tsx:      {items.map((item) => (
src//components/composed/layouts/NavigationSidebar.tsx-        <li key={item.name}>
src//components/composed/layouts/NavigationSidebar.tsx-          {!item.children ? (
--
src//components/composed/layouts/NavigationSidebar.tsx-      <div className={styles.teamsLabel()}>Your teams</div>
src//components/composed/layouts/NavigationSidebar.tsx-      <ul role="list" className={styles.teamsList()}>
src//components/composed/layouts/NavigationSidebar.tsx:        {teams.map((team) => (
src//components/composed/layouts/NavigationSidebar.tsx-          <li key={team.name}>
src//components/composed/layouts/NavigationSidebar.tsx-            <Link
--
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-  // Convert grades array to Select options format
src//components/domain/imRoutine/curriculum/LessonSelector.tsx:  const gradeOptions = sortedGrades.map(grade => ({
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-    value: grade,
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-    label: grade
--
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-  
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-  // Convert units array to Select options format
src//components/domain/imRoutine/curriculum/LessonSelector.tsx:  const unitOptions = units.map(unit => ({
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-    value: unit,
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-    label: `Unit ${unit}`
--
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-  
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-  // Convert lessons array to Select options format
src//components/domain/imRoutine/curriculum/LessonSelector.tsx:  const lessonOptions = lessons.map(lesson => ({
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-    value: lesson,
src//components/domain/imRoutine/curriculum/LessonSelector.tsx-    label: `Lesson ${lesson}`
--
src//components/domain/imRoutine/routines/RoutineFilter.tsx-        <motion.div layout className="flex flex-wrap gap-2">
src//components/domain/imRoutine/routines/RoutineFilter.tsx-          <AnimatePresence initial={false}>
src//components/domain/imRoutine/routines/RoutineFilter.tsx:            {sortedRoutines.map((routine, index) => {
src//components/domain/imRoutine/routines/RoutineFilter.tsx-              const isSelected = selectedRoutines.includes(routine);
src//components/domain/imRoutine/routines/RoutineFilter.tsx-              const isMLR = /^MLR\d+/.test(routine);
--
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-      <AnimatePresence mode="popLayout">
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx:        {mlrRoutines.map((routine) => {
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-          const matchingLessons = lessonsData
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-            .filter((lesson) =>
--
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-              )
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-            )
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx:            .map((lesson) => lesson.lessonNumber);
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-          if (matchingLessons.length === 0) return null;
--
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-              <div className="flex items-center flex-wrap gap-2 mt-1">
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-                <span className="text-sm text-white font-medium">Appears in:</span>
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx:                {matchingLessons.map((lessonNumber) => (
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-                  <motion.button
src//components/domain/imRoutine/routines/MLRAppearsInCard.tsx-                    key={lessonNumber}
--
src//components/domain/imRoutine/lessons/KHLesson.tsx-              activity.routines.some((r) => selectedRoutines.includes(r.trim()))
src//components/domain/imRoutine/lessons/KHLesson.tsx-            )
src//components/domain/imRoutine/lessons/KHLesson.tsx:            .map((activity) => (
src//components/domain/imRoutine/lessons/KHLesson.tsx-              <div
src//components/domain/imRoutine/lessons/KHLesson.tsx-                key={activity.activityNumber}
--
src//components/domain/imRoutine/lessons/KHLesson.tsx-                  {activity.routines
src//components/domain/imRoutine/lessons/KHLesson.tsx-                    .filter((r) => selectedRoutines.includes(r.trim()))
src//components/domain/imRoutine/lessons/KHLesson.tsx:                    .map((routine, i) => {
src//components/domain/imRoutine/lessons/KHLesson.tsx-                      const isMLR = /^MLR\d+/.test(routine);
src//components/domain/imRoutine/lessons/KHLesson.tsx-                      return (
--
src//components/domain/imRoutine/lessons/LessonView.tsx-      {lessonsData
src//components/domain/imRoutine/lessons/LessonView.tsx-        .sort((a, b) => Number(a.lessonNumber) - Number(b.lessonNumber))
src//components/domain/imRoutine/lessons/LessonView.tsx:        .map((lesson) => {
src//components/domain/imRoutine/lessons/LessonView.tsx-          const isSelected = lesson.lessonNumber === selectedLesson;
src//components/domain/imRoutine/lessons/LessonView.tsx-          const isPulsing = lesson.lessonNumber === justSelectedLesson;
--
src//components/domain/imRoutine/lessons/ILCLesson.tsx-      {hasRoutines ? (
src//components/domain/imRoutine/lessons/ILCLesson.tsx-        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
src//components/domain/imRoutine/lessons/ILCLesson.tsx:          {routines.map((routine, i) => {
src//components/domain/imRoutine/lessons/ILCLesson.tsx-            const isMLR = /^MLR\d+/.test(routine);
src//components/domain/imRoutine/lessons/ILCLesson.tsx-            return (
--
src//components/domain/schedules/utils/scheduleHelpers.ts-    periods: periods
src//components/domain/schedules/utils/scheduleHelpers.ts-      .filter(p => p.what || p.who.length > 0)
src//components/domain/schedules/utils/scheduleHelpers.ts:      .map((p) => ({
src//components/domain/schedules/utils/scheduleHelpers.ts-        periodNum: p.id,
src//components/domain/schedules/utils/scheduleHelpers.ts-        className: p.what,
--
src//components/domain/schedules/components/SchoolSelector.tsx-      >
src//components/domain/schedules/components/SchoolSelector.tsx-        <option value="">Select a school</option>
src//components/domain/schedules/components/SchoolSelector.tsx:        {schools.map((school) => (
src//components/domain/schedules/components/SchoolSelector.tsx-          <option key={school._id} value={school._id}>
src//components/domain/schedules/components/SchoolSelector.tsx-            {school.schoolName}
--
src//components/domain/schedules/components/ActivitySelector.tsx-    >
src//components/domain/schedules/components/ActivitySelector.tsx-      <option value="">Select activity</option>
src//components/domain/schedules/components/ActivitySelector.tsx:      {options.map((activity) => (
src//components/domain/schedules/components/ActivitySelector.tsx-        <option key={activity.value} value={activity.value}>
src//components/domain/schedules/components/ActivitySelector.tsx-          {activity.label}
--
src//components/domain/schedules/components/ScheduleTable.tsx-        </thead>
src//components/domain/schedules/components/ScheduleTable.tsx-        <tbody>
src//components/domain/schedules/components/ScheduleTable.tsx:          {periods.map(period => (
src//components/domain/schedules/components/ScheduleTable.tsx-            <ScheduleRow
src//components/domain/schedules/components/ScheduleTable.tsx-              key={period.id}
--
src//components/domain/schedules/components/ScheduleRow.tsx-      console.log(`ScheduleRow period ${period.id} - washingtonTeachers available:`, 
src//components/domain/schedules/components/ScheduleRow.tsx-        washingtonTeachers.length, 
src//components/domain/schedules/components/ScheduleRow.tsx:        washingtonTeachers.map(t => t.name)
src//components/domain/schedules/components/ScheduleRow.tsx-      );
src//components/domain/schedules/components/ScheduleRow.tsx-    }
--
src//components/domain/schedules/components/ScheduleSummary.tsx-        <h3 className="text-lg font-semibold">Teacher Activity Summary</h3>
src//components/domain/schedules/components/ScheduleSummary.tsx-        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
src//components/domain/schedules/components/ScheduleSummary.tsx:          {periods.map((period) => {
src//components/domain/schedules/components/ScheduleSummary.tsx-            // Get teachers for each activity type
src//components/domain/schedules/components/ScheduleSummary.tsx-            const teachingTeachers = getTeachersByPeriodAndActivity(period.id, 'teaching', washingtonTeachers);
--
src//components/domain/schedules/components/ScheduleSummary.tsx-                    {teachingTeachers.length > 0 && (
src//components/domain/schedules/components/ScheduleSummary.tsx-                      <div className="text-sm">
src//components/domain/schedules/components/ScheduleSummary.tsx:                        <span className="font-medium text-green-800">Teaching:</span> {teachingTeachers.map(t => t.name).join(', ')}
src//components/domain/schedules/components/ScheduleSummary.tsx-                      </div>
src//components/domain/schedules/components/ScheduleSummary.tsx-                    )}
--
src//components/domain/schedules/components/ScheduleSummary.tsx-                    {prepTeachers.length > 0 && (
src//components/domain/schedules/components/ScheduleSummary.tsx-                      <div className="text-sm">
src//components/domain/schedules/components/ScheduleSummary.tsx:                        <span className="font-medium text-purple-800">Prep:</span> {prepTeachers.map(t => t.name).join(', ')}
src//components/domain/schedules/components/ScheduleSummary.tsx-                      </div>
src//components/domain/schedules/components/ScheduleSummary.tsx-                    )}
--
src//components/domain/schedules/components/ScheduleSummary.tsx-                    {lunchTeachers.length > 0 && (
src//components/domain/schedules/components/ScheduleSummary.tsx-                      <div className="text-sm">
src//components/domain/schedules/components/ScheduleSummary.tsx:                        <span className="font-medium text-orange-800">Lunch:</span> {lunchTeachers.map(t => t.name).join(', ')}
src//components/domain/schedules/components/ScheduleSummary.tsx-                      </div>
src//components/domain/schedules/components/ScheduleSummary.tsx-                    )}
--
src//components/domain/schedules/components/ScheduleSummary.tsx-    <div className="space-y-3">
src//components/domain/schedules/components/ScheduleSummary.tsx-      <h3 className="text-lg font-semibold">Schedule Summary</h3>
src//components/domain/schedules/components/ScheduleSummary.tsx:      {activePeriods.map((period) => (
src//components/domain/schedules/components/ScheduleSummary.tsx-        <div key={period.id} className="p-3 border rounded-md">
src//components/domain/schedules/components/ScheduleSummary.tsx-          <strong>{period.name} ({period.timeSlot}):</strong>{' '}
--
src//components/domain/schedules/components/StaffSelector.tsx-    if (value.length === 0) return placeholder;
src//components/domain/schedules/components/StaffSelector.tsx-    
src//components/domain/schedules/components/StaffSelector.tsx:    const selectedStaff = value.map(id => 
src//components/domain/schedules/components/StaffSelector.tsx-      options.find(staff => staff._id === id)?.staffName
src//components/domain/schedules/components/StaffSelector.tsx-    ).filter(Boolean);
--
src//components/domain/schedules/components/StaffSelector.tsx-        )}>
src//components/domain/schedules/components/StaffSelector.tsx-          {options.length > 0 ? (
src//components/domain/schedules/components/StaffSelector.tsx:            options.map(option => (
src//components/domain/schedules/components/StaffSelector.tsx-              <div 
src//components/domain/schedules/components/StaffSelector.tsx-                key={option._id} 
--
src//components/domain/schedules/components/TeacherActivityColumns.tsx-      <td className="py-2 px-4 border bg-green-50">
src//components/domain/schedules/components/TeacherActivityColumns.tsx-        {teachingTeachers.length > 0 ? (
src//components/domain/schedules/components/TeacherActivityColumns.tsx:          teachingTeachers.map(teacher => {
src//components/domain/schedules/components/TeacherActivityColumns.tsx-            const periodData = teacher.scheduleByDay?.[0]?.periods.find(p => p.periodNum === periodId);
src//components/domain/schedules/components/TeacherActivityColumns.tsx-            return (
--
src//components/domain/schedules/components/TeacherActivityColumns.tsx-      <td className="py-2 px-4 border bg-purple-50">
src//components/domain/schedules/components/TeacherActivityColumns.tsx-        {prepTeachers.length > 0 ? (
src//components/domain/schedules/components/TeacherActivityColumns.tsx:          prepTeachers.map(teacher => (
src//components/domain/schedules/components/TeacherActivityColumns.tsx-            <TeacherBadge
src//components/domain/schedules/components/TeacherActivityColumns.tsx-              key={teacher.id}
--
src//components/domain/schedules/components/TeacherActivityColumns.tsx-      <td className="py-2 px-4 border bg-orange-50">
src//components/domain/schedules/components/TeacherActivityColumns.tsx-        {lunchTeachers.length > 0 ? (
src//components/domain/schedules/components/TeacherActivityColumns.tsx:          lunchTeachers.map(teacher => (
src//components/domain/schedules/components/TeacherActivityColumns.tsx-            <TeacherBadge
src//components/domain/schedules/components/TeacherActivityColumns.tsx-              key={teacher.id}
--
src//components/domain/schedules/SchoolSchedulePage.tsx-    if (!schedules || !staff) return [];
src//components/domain/schedules/SchoolSchedulePage.tsx-    
src//components/domain/schedules/SchoolSchedulePage.tsx:    return schedules.map(schedule => {
src//components/domain/schedules/SchoolSchedulePage.tsx-      // Find staff member for this schedule
src//components/domain/schedules/SchoolSchedulePage.tsx-      const teacher = staff.find(s => s._id === schedule.teacher);
--
src//components/domain/schedules/SchoolSchedulePage.tsx-      
src//components/domain/schedules/SchoolSchedulePage.tsx-      // Group by period ID and take the first occurrence for each period
src//components/domain/schedules/SchoolSchedulePage.tsx:      const uniquePeriodIds = [...new Set(allPeriods.map(p => p.id))];
src//components/domain/schedules/SchoolSchedulePage.tsx:      const uniquePeriods = uniquePeriodIds.map(id => {
src//components/domain/schedules/SchoolSchedulePage.tsx-        return allPeriods.find(p => p.id === id) || DEFAULT_PERIODS.find(p => p.id === id) || allPeriods[0];
src//components/domain/schedules/SchoolSchedulePage.tsx-      });
--
src//components/domain/schedules/SchoolSchedulePage.tsx-  // Handle changing the start time
src//components/domain/schedules/SchoolSchedulePage.tsx-  const handleStartTimeChange = (periodId: number, value: string): void => {
src//components/domain/schedules/SchoolSchedulePage.tsx:    setPeriods(periods.map(period => 
src//components/domain/schedules/SchoolSchedulePage.tsx-      period.id === periodId ? { 
src//components/domain/schedules/SchoolSchedulePage.tsx-        ...period, 
--
src//components/domain/schedules/SchoolSchedulePage.tsx-  // Handle changing the end time
src//components/domain/schedules/SchoolSchedulePage.tsx-  const handleEndTimeChange = (periodId: number, value: string): void => {
src//components/domain/schedules/SchoolSchedulePage.tsx:    setPeriods(periods.map(period => 
src//components/domain/schedules/SchoolSchedulePage.tsx-      period.id === periodId ? { 
src//components/domain/schedules/SchoolSchedulePage.tsx-        ...period, 
--
src//components/domain/schedules/SchoolSchedulePage.tsx-  // Handle changing the activity type (What)
src//components/domain/schedules/SchoolSchedulePage.tsx-  const handleWhatChange = (periodId: number, value: string): void => {
src//components/domain/schedules/SchoolSchedulePage.tsx:    setPeriods(periods.map(period => 
src//components/domain/schedules/SchoolSchedulePage.tsx-      period.id === periodId ? { ...period, what: value } : period
src//components/domain/schedules/SchoolSchedulePage.tsx-    ));
--
src//components/domain/schedules/SchoolSchedulePage.tsx-  // Handle changing the staff (Who)
src//components/domain/schedules/SchoolSchedulePage.tsx-  const handleWhoChange = (periodId: number, selectedStaff: string[]): void => {
src//components/domain/schedules/SchoolSchedulePage.tsx:    setPeriods(periods.map(period => {
src//components/domain/schedules/SchoolSchedulePage.tsx-      if (period.id === periodId) {
src//components/domain/schedules/SchoolSchedulePage.tsx-        return { 
--
src//components/domain/schedules/SchoolSchedulePage.tsx-  // Handle changing class info
src//components/domain/schedules/SchoolSchedulePage.tsx-  const handleClassInfoChange = (periodId: number, value: string): void => {
src//components/domain/schedules/SchoolSchedulePage.tsx:    setPeriods(periods.map(period => 
src//components/domain/schedules/SchoolSchedulePage.tsx-      period.id === periodId ? { ...period, classInfo: value } : period
src//components/domain/schedules/SchoolSchedulePage.tsx-    ));
--
src//components/domain/schedules/SchoolSchedulePage.tsx-  // Handle changing room info
src//components/domain/schedules/SchoolSchedulePage.tsx-  const handleRoomInfoChange = (periodId: number, value: string): void => {
src//components/domain/schedules/SchoolSchedulePage.tsx:    setPeriods(periods.map(period => 
src//components/domain/schedules/SchoolSchedulePage.tsx-      period.id === periodId ? { ...period, roomInfo: value } : period
src//components/domain/schedules/SchoolSchedulePage.tsx-    ));
--
src//components/domain/schedules/SchoolSchedulePage.tsx-  const getStaffNamesFromIds = (staffIds: string[]): string => {
src//components/domain/schedules/SchoolSchedulePage.tsx-    return staffIds
src//components/domain/schedules/SchoolSchedulePage.tsx:      .map(id => staff.find(s => s._id === id)?.staffName || id)
src//components/domain/schedules/SchoolSchedulePage.tsx-      .filter(Boolean)
src//components/domain/schedules/SchoolSchedulePage.tsx-      .join(", ");
--
src//components/domain/schedules/SchoolSchedulePage.tsx-          scheduleByDay: [{
src//components/domain/schedules/SchoolSchedulePage.tsx-            day: "uniform" as const,
src//components/domain/schedules/SchoolSchedulePage.tsx:            periods: teacherPeriods.map(p => ({
src//components/domain/schedules/SchoolSchedulePage.tsx-              periodNum: p.id,
src//components/domain/schedules/SchoolSchedulePage.tsx-              className: p.classInfo || p.what,
--
src//components/domain/schedules/data/mockData.ts-
src//components/domain/schedules/data/mockData.ts-// Activity types for "What" dropdown based on EventTypeZod
src//components/domain/schedules/data/mockData.ts:export const ACTIVITY_TYPES = EventTypeZod.options.map(value => ({
src//components/domain/schedules/data/mockData.ts-  value,
src//components/domain/schedules/data/mockData.ts-  label: value
--
src//components/domain/rubrics/FilterableGridView.tsx-        {hasGroups ? (
src//components/domain/rubrics/FilterableGridView.tsx-          <div className="space-y-6">
src//components/domain/rubrics/FilterableGridView.tsx:            {filteredGroups.map(group => (
src//components/domain/rubrics/FilterableGridView.tsx-              <div key={group.id} className="">
src//components/domain/rubrics/FilterableGridView.tsx-                {renderItemGroup(group, selectedItems)}
--
src//components/domain/rubrics/FilterableGridView.tsx-        {renderItemInSidebar && allItems.length > 0 && (
src//components/domain/rubrics/FilterableGridView.tsx-          <div className="space-y-4">
src//components/domain/rubrics/FilterableGridView.tsx:            {allItems.map(item => {
src//components/domain/rubrics/FilterableGridView.tsx-              const groupIds = itemToGroupMap.get(item.id) || [];
src//components/domain/rubrics/FilterableGridView.tsx-              return (
--
src//components/domain/rubrics/RubricDomainCards.tsx-        getColor={getDomainColor}
src//components/domain/rubrics/RubricDomainCards.tsx-      >
src//components/domain/rubrics/RubricDomainCards.tsx:        {domainOptions.map((domain) => (
src//components/domain/rubrics/RubricDomainCards.tsx-          <ClickableCards.Card
src//components/domain/rubrics/RubricDomainCards.tsx-            key={domain.value}
--
src//components/domain/rubrics/RubricViewer.tsx-    return implementationData
src//components/domain/rubrics/RubricViewer.tsx-      .filter((r) => r.title.startsWith(selectedDomain))
src//components/domain/rubrics/RubricViewer.tsx:      .map((r, i) => ({
src//components/domain/rubrics/RubricViewer.tsx-        ...r,
src//components/domain/rubrics/RubricViewer.tsx-        id: `${selectedDomain}-${i}`,
--
src//components/domain/rubrics/RubricViewer.tsx-    const levels: PerformanceLevelKey[] = ['advanced', 'proficient', 'developing', 'not_yet', 'not_observed'];
src//components/domain/rubrics/RubricViewer.tsx-    return levels.flatMap((level) =>
src//components/domain/rubrics/RubricViewer.tsx:      domain[level].map((text: string, i: number) => ({
src//components/domain/rubrics/RubricViewer.tsx-        id: `${domain.id}-${level}-${i}`,
src//components/domain/rubrics/RubricViewer.tsx-        level,
--
src//components/domain/rubrics/RubricCard.tsx-      </Heading>
src//components/domain/rubrics/RubricCard.tsx-      <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mt-3">
src//components/domain/rubrics/RubricCard.tsx:        {performanceLevels.map(({ key, label, colorClass }) => (
src//components/domain/rubrics/RubricCard.tsx-          <div key={key} className="flex flex-col">
src//components/domain/rubrics/RubricCard.tsx-            <div className={cn(
--
src//components/domain/rubrics/RubricCard.tsx-            </div>
src//components/domain/rubrics/RubricCard.tsx-            <ul className="space-y-3">
src//components/domain/rubrics/RubricCard.tsx:              {domain[key].map((text, i) => (
src//components/domain/rubrics/RubricCard.tsx-                <li key={i} className="flex items-start">
src//components/domain/rubrics/RubricCard.tsx-                  <Text 
--
src//components/domain/users/UserProfile.tsx-
src//components/domain/users/UserProfile.tsx-export function UserProfile() {
src//components/domain/users/UserProfile.tsx:  const { fullName, email, metadata } = useAuthenticatedUser();
src//components/domain/users/UserProfile.tsx-  const { staff, isLoading } = useUserStaff();
src//components/domain/users/UserProfile.tsx-  
--
src//components/domain/users/UserProfile.tsx-            <h3 className={cn(textSize.sm, textColors.muted)}>Roles</h3>
src//components/domain/users/UserProfile.tsx-            <div className={cn(stack.xs, 'flex flex-wrap')}>
src//components/domain/users/UserProfile.tsx:              {metadata.roles.map(role => (
src//components/domain/users/UserProfile.tsx-                <Badge key={role} intent="primary">{role}</Badge>
src//components/domain/users/UserProfile.tsx-              ))}
--
src//components/domain/things3/thingsUtils.ts-    
src//components/domain/things3/thingsUtils.ts-    // Skip project title if it's the first line and not indented
src//components/domain/things3/thingsUtils.ts:    if (indentLevel === 0 && checklist.items.length === 0 && !projectTitle) {
src//components/domain/things3/thingsUtils.ts-      checklist.title = trimmedLine;
src//components/domain/things3/thingsUtils.ts-      return;
--
src//components/domain/things3/thingsUtils.ts-        children: []
src//components/domain/things3/thingsUtils.ts-      };
src//components/domain/things3/thingsUtils.ts:      checklist.items.push(currentSection);
src//components/domain/things3/thingsUtils.ts-    } else if (currentSection && (indentLevel > 0 || trimmedLine.match(/^[\*\-•]/))) {
src//components/domain/things3/thingsUtils.ts-      // This is a task under the current section
--
src//components/domain/things3/thingsUtils.ts-    } else {
src//components/domain/things3/thingsUtils.ts-      // This is a standalone task not under any section
src//components/domain/things3/thingsUtils.ts:      checklist.items.push({
src//components/domain/things3/thingsUtils.ts-        title: cleanLine,
src//components/domain/things3/thingsUtils.ts-        type: 'task'
--
src//components/domain/things3/thingsUtils.ts-  
src//components/domain/things3/thingsUtils.ts-  // Process each item
src//components/domain/things3/thingsUtils.ts:  if (json.items && Array.isArray(json.items)) {
src//components/domain/things3/thingsUtils.ts:    json.items.forEach(item => {
src//components/domain/things3/thingsUtils.ts-      if (item.type === 'heading') {
src//components/domain/things3/thingsUtils.ts-        // Add heading
src//components/domain/things3/thingsUtils.ts:        project.data.push({
src//components/domain/things3/thingsUtils.ts-          type: "heading",
src//components/domain/things3/thingsUtils.ts-          attributes: {
--
src//components/domain/things3/thingsUtils.ts-        if ('children' in item && item.children && Array.isArray(item.children)) {
src//components/domain/things3/thingsUtils.ts-          item.children.forEach(task => {
src//components/domain/things3/thingsUtils.ts:            project.data.push({
src//components/domain/things3/thingsUtils.ts-              type: "to-do", // Must use "to-do" with hyphen
src//components/domain/things3/thingsUtils.ts-              attributes: {
--
src//components/domain/things3/thingsUtils.ts-      } else {
src//components/domain/things3/thingsUtils.ts-        // Add task directly to project
src//components/domain/things3/thingsUtils.ts:        project.data.push({
src//components/domain/things3/thingsUtils.ts-          type: "to-do", // Must use "to-do" with hyphen
src//components/domain/things3/thingsUtils.ts-          attributes: {
--
src//components/domain/things3/thingsUtils.ts-function isThingsDataFormat(json: Record<string, unknown>): boolean {
src//components/domain/things3/thingsUtils.ts-  // Check for the specific Things3 data structure
src//components/domain/things3/thingsUtils.ts:  if (!json.items || !Array.isArray(json.items) || json.items.length === 0) {
src//components/domain/things3/thingsUtils.ts-    return false;
src//components/domain/things3/thingsUtils.ts-  }
src//components/domain/things3/thingsUtils.ts-  
src//components/domain/things3/thingsUtils.ts:  const firstItem = json.items[0] as Record<string, unknown>;
src//components/domain/things3/thingsUtils.ts-  
src//components/domain/things3/thingsUtils.ts-  return (
--
src//components/domain/things3/thingsUtils.ts-    typeof firstItem === 'object' &&
src//components/domain/things3/thingsUtils.ts-    firstItem.type === "project" &&
src//components/domain/things3/thingsUtils.ts:    !!firstItem.data &&
src//components/domain/things3/thingsUtils.ts:    Array.isArray(firstItem.data)
src//components/domain/things3/thingsUtils.ts-  );
src//components/domain/things3/thingsUtils.ts-}
--
src//components/domain/things3/thingsUtils.ts-function generateDirectThingsURL(data: ThingsData): string {
src//components/domain/things3/thingsUtils.ts-  // Validate the data has required fields
src//components/domain/things3/thingsUtils.ts:  if (!data.items || !Array.isArray(data.items) || data.items.length === 0) {
src//components/domain/things3/thingsUtils.ts-    console.error("Invalid Things data structure:", data);
src//components/domain/things3/thingsUtils.ts-    throw new Error("Invalid Things data structure");
--
src//components/domain/things3/thingsUtils.ts-  
src//components/domain/things3/thingsUtils.ts-  // Ensure all to-do items have titles
src//components/domain/things3/thingsUtils.ts:  data.items.forEach(project => {
src//components/domain/things3/thingsUtils.ts:    if (project.data && Array.isArray(project.data)) {
src//components/domain/things3/thingsUtils.ts:      project.data.forEach(item => {
src//components/domain/things3/thingsUtils.ts-        if (item.type === "to-do" && (!item.attributes || !item.attributes.title)) {
src//components/domain/things3/thingsUtils.ts-          console.error("To-do item missing required title:", item);
--
src//components/domain/things3/thingsDebug.ts-
src//components/domain/things3/thingsDebug.ts-    // 2. Check if it has 'items' array
src//components/domain/things3/thingsDebug.ts:    if (!Array.isArray(thingsJson.items)) {
src//components/domain/things3/thingsDebug.ts-      errors.push('JSON must have an "items" array at the top level');
src//components/domain/things3/thingsDebug.ts-      return { valid: false, errors };
--
src//components/domain/things3/thingsDebug.ts-
src//components/domain/things3/thingsDebug.ts-    // 3. Check each project in items array
src//components/domain/things3/thingsDebug.ts:    thingsJson.items.forEach((item: unknown, index: number) => {
src//components/domain/things3/thingsDebug.ts-      if (typeof item !== 'object' || item === null) {
src//components/domain/things3/thingsDebug.ts-        errors.push(`Item ${index} must be an object`);
--
src//components/domain/things3/thingsDebug.ts-
src//components/domain/things3/thingsDebug.ts-      // 3.3 Verify it has data array
src//components/domain/things3/thingsDebug.ts:      if (!Array.isArray(projectItem.data)) {
src//components/domain/things3/thingsDebug.ts-        errors.push(`Project ${index} must have a "data" array (not "items" or "children")`);
src//components/domain/things3/thingsDebug.ts-      } else {
src//components/domain/things3/thingsDebug.ts-        // 3.4 Verify each item in the data array
src//components/domain/things3/thingsDebug.ts:        (projectItem.data as unknown[]).forEach((dataItem: unknown, dataIndex: number) => {
src//components/domain/things3/thingsDebug.ts-          if (typeof dataItem !== 'object' || dataItem === null) {
src//components/domain/things3/thingsDebug.ts-            errors.push(`Project ${index}, data item ${dataIndex} must be an object`);
--
src//components/domain/things3/thingsDebug.ts-  
src//components/domain/things3/thingsDebug.ts-  // 1. Fix project level
src//components/domain/things3/thingsDebug.ts:  if (!Array.isArray(result.items)) {
src//components/domain/things3/thingsDebug.ts-    // Maybe the user passed just a project object
src//components/domain/things3/thingsDebug.ts-    if (result.type === 'project') {
src//components/domain/things3/thingsDebug.ts:      result.items = [{ ...result, items: undefined }];
src//components/domain/things3/thingsDebug.ts-    } else {
src//components/domain/things3/thingsDebug.ts-      // Otherwise, wrap whatever we have in a default project
src//components/domain/things3/thingsDebug.ts:      result.items = [{
src//components/domain/things3/thingsDebug.ts-        type: "project",
src//components/domain/things3/thingsDebug.ts-        attributes: {
--
src//components/domain/things3/thingsDebug.ts-  
src//components/domain/things3/thingsDebug.ts-  // 2. Process each project
src//components/domain/things3/thingsDebug.ts:  if (Array.isArray(result.items)) {
src//components/domain/things3/thingsDebug.ts:    result.items.forEach((projectItem) => {
src//components/domain/things3/thingsDebug.ts-      // Cast to a workable type
src//components/domain/things3/thingsDebug.ts-      const project = projectItem as {
--
src//components/domain/things3/thingsDebug.ts-      
src//components/domain/things3/thingsDebug.ts-      // 2.3 Fix data array issues - IMPORTANT: Things 3 requires "data" array, not "items" or "children"
src//components/domain/things3/thingsDebug.ts:      if (!Array.isArray(project.data)) {
src//components/domain/things3/thingsDebug.ts-        // Check if items or children arrays exist and use those
src//components/domain/things3/thingsDebug.ts:        if (Array.isArray(project.items)) {
src//components/domain/things3/thingsDebug.ts:          project.data = project.items;
src//components/domain/things3/thingsDebug.ts:          delete project.items; // Remove the incorrect property
src//components/domain/things3/thingsDebug.ts-        } else if (Array.isArray(project.children)) {
src//components/domain/things3/thingsDebug.ts:          project.data = project.children;
src//components/domain/things3/thingsDebug.ts-          delete project.children; // Remove the incorrect property
src//components/domain/things3/thingsDebug.ts-        } else {
src//components/domain/things3/thingsDebug.ts:          project.data = [];
src//components/domain/things3/thingsDebug.ts-        }
src//components/domain/things3/thingsDebug.ts-      }
src//components/domain/things3/thingsDebug.ts-      
src//components/domain/things3/thingsDebug.ts-      // 2.4 Fix items in the data array
src//components/domain/things3/thingsDebug.ts:      if (Array.isArray(project.data)) {
src//components/domain/things3/thingsDebug.ts:        project.data.forEach((todoItem) => {
src//components/domain/things3/thingsDebug.ts-          // Cast to a workable type
src//components/domain/things3/thingsDebug.ts-          const item = todoItem as {
--
src//components/domain/things3/thingsDebug.ts-  
src//components/domain/things3/thingsDebug.ts-  // Process each item in the checklist
src//components/domain/things3/thingsDebug.ts:  checklist.items.forEach(item => {
src//components/domain/things3/thingsDebug.ts-    if (item.type === 'heading') {
src//components/domain/things3/thingsDebug.ts-      // Add heading
--
src//components/domain/things3/thingsDebug.ts-        }
src//components/domain/things3/thingsDebug.ts-      };
src//components/domain/things3/thingsDebug.ts:      thingsData.items[0].data.push(heading);
src//components/domain/things3/thingsDebug.ts-      
src//components/domain/things3/thingsDebug.ts-      // Add tasks under this heading
--
src//components/domain/things3/thingsDebug.ts-            }
src//components/domain/things3/thingsDebug.ts-          };
src//components/domain/things3/thingsDebug.ts:          thingsData.items[0].data.push(todo);
src//components/domain/things3/thingsDebug.ts-        });
src//components/domain/things3/thingsDebug.ts-      }
--
src//components/domain/things3/thingsDebug.ts-        }
src//components/domain/things3/thingsDebug.ts-      };
src//components/domain/things3/thingsDebug.ts:      thingsData.items[0].data.push(todo);
src//components/domain/things3/thingsDebug.ts-    }
src//components/domain/things3/thingsDebug.ts-  });
--
src//components/domain/things3/thingsDebug.ts-  
src//components/domain/things3/thingsDebug.ts-  // Check if this is a ThingsChecklist and convert if needed
src//components/domain/things3/thingsDebug.ts:  if (Array.isArray(dataRecord.items) && 
src//components/domain/things3/thingsDebug.ts:      dataRecord.items.length > 0) {
src//components/domain/things3/thingsDebug.ts-      
src//components/domain/things3/thingsDebug.ts:    const firstItem = dataRecord.items[0] as Record<string, unknown>;
src//components/domain/things3/thingsDebug.ts-    
src//components/domain/things3/thingsDebug.ts-    // Check if this is our internal format (with heading/task types)
--
src//components/domain/staff/teachingLab/StaffListComponent.tsx-  return (
src//components/domain/staff/teachingLab/StaffListComponent.tsx-    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
src//components/domain/staff/teachingLab/StaffListComponent.tsx:      {staffMembers.map((staff) => (
src//components/domain/staff/teachingLab/StaffListComponent.tsx-        <StaffListItem 
src//components/domain/staff/teachingLab/StaffListComponent.tsx-          key={staff._id} 
--
src//components/domain/staff/teachingLab/StaffListItem.tsx-            {staffType === 'nycps' && 'subjects' in staff && (
src//components/domain/staff/teachingLab/StaffListItem.tsx-              <div className="flex flex-wrap gap-1 mt-2">
src//components/domain/staff/teachingLab/StaffListItem.tsx:                {staff.subjects.slice(0, 3).map((subject, index) => (
src//components/domain/staff/teachingLab/StaffListItem.tsx-                  <span 
src//components/domain/staff/teachingLab/StaffListItem.tsx-                    key={index} 
--
src//components/domain/staff/teachingLab/StaffListItem.tsx-            {staffType === 'tl' && 'rolesTL' in staff && staff.rolesTL && (
src//components/domain/staff/teachingLab/StaffListItem.tsx-              <div className="flex flex-wrap gap-1 mt-2">
src//components/domain/staff/teachingLab/StaffListItem.tsx:                {staff.rolesTL.slice(0, 3).map((role, index) => (
src//components/domain/staff/teachingLab/StaffListItem.tsx-                  <span 
src//components/domain/staff/teachingLab/StaffListItem.tsx-                    key={index} 
--
src//components/domain/staff/teachingLab/StaffListItem.tsx-          <div className="space-y-6">
src//components/domain/staff/teachingLab/StaffListItem.tsx-            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
src//components/domain/staff/teachingLab/StaffListItem.tsx:              {fieldConfig.map(field => (
src//components/domain/staff/teachingLab/StaffListItem.tsx-                <div key={String(field.key)} className="mb-4">
src//components/domain/staff/teachingLab/StaffListItem.tsx-                  <Text textSize="sm" weight="semibold" className="block mb-1">
--
src//components/domain/staff/StaffCard.tsx-        </Heading>
src//components/domain/staff/StaffCard.tsx-        <div className="flex flex-wrap gap-2">
src//components/domain/staff/StaffCard.tsx:          {staff.rolesNYCPS && staff.rolesNYCPS.map((role, index) => (
src//components/domain/staff/StaffCard.tsx-            <span 
src//components/domain/staff/StaffCard.tsx-              key={index} 
--
src//components/domain/staff/StaffCard.tsx-        </Heading>
src//components/domain/staff/StaffCard.tsx-        <div className="flex flex-wrap gap-2">
src//components/domain/staff/StaffCard.tsx:          {staff.subjects && staff.subjects.map((subject, index) => (
src//components/domain/staff/StaffCard.tsx-            <span 
src//components/domain/staff/StaffCard.tsx-              key={index} 
--
src//components/domain/staff/StaffDetailPage.tsx-
src//components/domain/staff/StaffDetailPage.tsx-  // Fetch staff member data
src//components/domain/staff/StaffDetailPage.tsx:  const { data: staffMember, error: staffError, isLoading: isLoadingStaff } = useStaffMember(staffId, staffType)
src//components/domain/staff/StaffDetailPage.tsx-  
src//components/domain/staff/StaffDetailPage.tsx-  // Fetch staff schedule data
src//components/domain/staff/StaffDetailPage.tsx:  const { data: schedule, error: scheduleError, isLoading: isLoadingSchedule } = useStaffSchedule(staffId)
src//components/domain/staff/StaffDetailPage.tsx-  
src//components/domain/staff/StaffDetailPage.tsx-  // Define tabs based on available data
--
src//components/domain/staff/StaffDetailPage.tsx-          <Heading level="h3" className="mb-4">Experience</Heading>
src//components/domain/staff/StaffDetailPage.tsx-          <dl className="grid grid-cols-1 gap-x-4 gap-y-4">
src//components/domain/staff/StaffDetailPage.tsx:            {staffMember.experience.map((exp, index) => (
src//components/domain/staff/StaffDetailPage.tsx-              <div key={index}>
src//components/domain/staff/StaffDetailPage.tsx-                <Text weight="semibold">{exp.type}</Text>
--
src//components/domain/staff/StaffDetailPage.tsx-  const endpoint = `/api/staff/${staffId}?staffType=${staffType}`
src//components/domain/staff/StaffDetailPage.tsx-
src//components/domain/staff/StaffDetailPage.tsx:  const { data, error } = useSafeSWR<StaffMember>(
src//components/domain/staff/StaffDetailPage.tsx-    staffId ? endpoint : null,
src//components/domain/staff/StaffDetailPage.tsx-    async () => {
--
src//components/domain/staff/StaffDetailPage.tsx-      if (!res.ok) throw new Error('Failed to fetch staff member');
src//components/domain/staff/StaffDetailPage.tsx-      const data = await res.json();
src//components/domain/staff/StaffDetailPage.tsx:      if (!data.success || !data.items || data.items.length === 0) {
src//components/domain/staff/StaffDetailPage.tsx-        throw new Error(data.message || 'Failed to fetch staff member');
src//components/domain/staff/StaffDetailPage.tsx-      }
src//components/domain/staff/StaffDetailPage.tsx:      return data.items[0];
src//components/domain/staff/StaffDetailPage.tsx-    },
src//components/domain/staff/StaffDetailPage.tsx-    `fetch_staff_${staffId}`
--
src//components/domain/staff/StaffDetailPage.tsx-  const endpoint = `/api/teacher-schedules?teacher=${staffId}`
src//components/domain/staff/StaffDetailPage.tsx-
src//components/domain/staff/StaffDetailPage.tsx:  const { data, error } = useSafeSWR<TeacherSchedule>(
src//components/domain/staff/StaffDetailPage.tsx-    staffId ? endpoint : null,
src//components/domain/staff/StaffDetailPage.tsx-    async () => {
--
src//components/domain/staff/StaffDetailPage.tsx-      if (!res.ok) throw new Error('Failed to fetch staff schedule');
src//components/domain/staff/StaffDetailPage.tsx-      const data = await res.json();
src//components/domain/staff/StaffDetailPage.tsx:      if (!data.success || !data.items || data.items.length === 0) {
src//components/domain/staff/StaffDetailPage.tsx-        throw new Error(data.message || 'Failed to fetch staff schedule');
src//components/domain/staff/StaffDetailPage.tsx-      }
src//components/domain/staff/StaffDetailPage.tsx:      return data.items[0];
src//components/domain/staff/StaffDetailPage.tsx-    },
src//components/domain/staff/StaffDetailPage.tsx-    `fetch_schedule_${staffId}`
--
src//components/debug/TestComponents.tsx-  
src//components/debug/TestComponents.tsx-  // Basic SWR usage
src//components/debug/TestComponents.tsx:  const { data, error } = useSWR('test-key', fetcher);
src//components/debug/TestComponents.tsx-  
src//components/debug/TestComponents.tsx-  console.log('SimpleSWRComponent render', { data, error });
--
src//components/debug/StaffListBisector.tsx-const StaticStaffList = () => (
src//components/debug/StaffListBisector.tsx-  <div>
src//components/debug/StaffListBisector.tsx:    {MOCK_STAFF.map(staff => (
src//components/debug/StaffListBisector.tsx-      <StaticStaffCard key={staff._id} staff={staff} />
src//components/debug/StaffListBisector.tsx-    ))}
--
src//components/debug/RenderLoopDetector.tsx-      if (hasRapidRenders) {
src//components/debug/RenderLoopDetector.tsx-        console.warn(`🚨 RENDER LOOP DETECTED: ${componentId} rendered ${renderCount.current} times`);
src//components/debug/RenderLoopDetector.tsx:        console.table(intervals.map((interval, i) => ({ 
src//components/debug/RenderLoopDetector.tsx-          renderNumber: i + 2,
src//components/debug/RenderLoopDetector.tsx-          timeSincePrevRender: Math.round(interval)
--
src//hooks/ui/useAuthorizedNavigation.ts-      return true
src//hooks/ui/useAuthorizedNavigation.ts-    })
src//hooks/ui/useAuthorizedNavigation.ts:    .map(item => ({
src//hooks/ui/useAuthorizedNavigation.ts-      ...item,
src//hooks/ui/useAuthorizedNavigation.ts-      children: item.children 
--
src//hooks/ui/useAuthorizedNavigation.ts-// Re-export the updateNavigationState function from useNavigation
src//hooks/ui/useAuthorizedNavigation.ts-function updateNavigationState(items: NavigationItem[], pathname: string): NavigationItem[] {
src//hooks/ui/useAuthorizedNavigation.ts:  return items.map(item => {
src//hooks/ui/useAuthorizedNavigation.ts-    const isActive = pathname === item.href || 
src//hooks/ui/useAuthorizedNavigation.ts-                   (pathname.startsWith(item.href) && item.href !== '/dashboard')
--
src//hooks/ui/useNavigation.ts-  pathname: string
src//hooks/ui/useNavigation.ts-): NavigationItem[] {
src//hooks/ui/useNavigation.ts:  return items.map(item => {
src//hooks/ui/useNavigation.ts-    const isActive = pathname === item.href || 
src//hooks/ui/useNavigation.ts-                   (pathname.startsWith(item.href) && item.href !== '/dashboard')
--
src//hooks/integrations/monday/MondayIntegrationContext.tsx-  
src//hooks/integrations/monday/MondayIntegrationContext.tsx-  // Make sure these properties exist on the returned object
src//hooks/integrations/monday/MondayIntegrationContext.tsx:  const isConnected = connectionQuery.data?.success === true;
src//hooks/integrations/monday/MondayIntegrationContext.tsx:  const accountName = connectionQuery.data?.data?.name || '';
src//hooks/integrations/monday/MondayIntegrationContext.tsx-  
src//hooks/integrations/monday/MondayIntegrationContext.tsx-  return {
--
src//hooks/integrations/monday/MondayIntegrationContext.tsx-    
src//hooks/integrations/monday/MondayIntegrationContext.tsx-    // Connection data from React Query
src//hooks/integrations/monday/MondayIntegrationContext.tsx:    connectionData: connectionQuery.data || null,
src//hooks/integrations/monday/MondayIntegrationContext.tsx-    connectionLoading: connectionQuery.isLoading,
src//hooks/integrations/monday/MondayIntegrationContext.tsx-    connectionError: connectionQuery.error?.message || null,
--
src//hooks/integrations/monday/useStaffExistence.ts-
src//hooks/integrations/monday/useStaffExistence.ts-import { useCallback, useRef, useState, useEffect } from 'react';
src//hooks/integrations/monday/useStaffExistence.ts:import { useErrorHandledMutation, ServerResponse } from '@/hooks/error/useErrorHandledMutation';
src//hooks/integrations/monday/useStaffExistence.ts-// Import client-safe function instead of server-only fetcher
src//hooks/integrations/monday/useStaffExistence.ts-import { checkStaffExistenceByEmail } from '@/lib/api/client/staff';
--
src//hooks/integrations/monday/useStaffExistence.ts-      });
src//hooks/integrations/monday/useStaffExistence.ts-      
src//hooks/integrations/monday/useStaffExistence.ts:      // Access the exists property from the result.data
src//hooks/integrations/monday/useStaffExistence.ts:      if (result && result.data) {
src//hooks/integrations/monday/useStaffExistence.ts:        return result.data.exists;
src//hooks/integrations/monday/useStaffExistence.ts-      }
src//hooks/integrations/monday/useStaffExistence.ts-      
--
src//hooks/integrations/monday/useMondayQueriesRQ.ts-import type { MondayBoard } from '@/lib/integrations/monday/types/board';
src//hooks/integrations/monday/useMondayQueriesRQ.ts-import type { MondayUser } from '@/lib/integrations/monday/types/api';
src//hooks/integrations/monday/useMondayQueriesRQ.ts:import type { MondayImportResponse, ImportPreview } from '@/lib/integrations/monday/types/import';
src//hooks/integrations/monday/useMondayQueriesRQ.ts-import useErrorHandledMutation from '@/hooks/error/useErrorHandledMutation';
src//hooks/integrations/monday/useMondayQueriesRQ.ts-
--
src//hooks/integrations/monday/useMondayQueriesRQ.ts-        }
src//hooks/integrations/monday/useMondayQueriesRQ.ts-        
src//hooks/integrations/monday/useMondayQueriesRQ.ts:        return data.items || [];
src//hooks/integrations/monday/useMondayQueriesRQ.ts-      } catch (error) {
src//hooks/integrations/monday/useMondayQueriesRQ.ts-        throw new Error(error instanceof Error ? error.message : 'Failed to fetch boards');
--
src//hooks/integrations/monday/useMondayQueriesRQ.ts-        }
src//hooks/integrations/monday/useMondayQueriesRQ.ts-        
src//hooks/integrations/monday/useMondayQueriesRQ.ts:        return data.items || [];
src//hooks/integrations/monday/useMondayQueriesRQ.ts-      } catch (error) {
src//hooks/integrations/monday/useMondayQueriesRQ.ts-        throw new Error(error instanceof Error ? error.message : 'Failed to fetch previews');
--
src//hooks/integrations/monday/useMondayQueriesRQ.ts-        }
src//hooks/integrations/monday/useMondayQueriesRQ.ts-        
src//hooks/integrations/monday/useMondayQueriesRQ.ts:        return data.data as MondayUser;
src//hooks/integrations/monday/useMondayQueriesRQ.ts-      } catch (error) {
src//hooks/integrations/monday/useMondayQueriesRQ.ts-        throw new Error(error instanceof Error ? error.message : 'Failed to find user');
--
src//hooks/integrations/monday/MondayImportContext.tsx-  const selectMultipleItems = useCallback((items: SelectedItem[]) => {
src//hooks/integrations/monday/MondayImportContext.tsx-    setSelectedItems(prev => {
src//hooks/integrations/monday/MondayImportContext.tsx:      const currentIds = new Set(prev.map(item => item.id));
src//hooks/integrations/monday/MondayImportContext.tsx-      const newItems = items.filter(item => !currentIds.has(item.id));
src//hooks/integrations/monday/MondayImportContext.tsx-      return [...prev, ...newItems];
--
src//hooks/integrations/monday/MondayImportContext.tsx-  // Update filtered previews in an effect, not during render
src//hooks/integrations/monday/MondayImportContext.tsx-  useEffect(() => {
src//hooks/integrations/monday/MondayImportContext.tsx:    if (!previewsQuery.data) {
src//hooks/integrations/monday/MondayImportContext.tsx-      filteredPreviewsRef.current = [];
src//hooks/integrations/monday/MondayImportContext.tsx-      return;
--
src//hooks/integrations/monday/MondayImportContext.tsx-    
src//hooks/integrations/monday/MondayImportContext.tsx-    // Transform ImportPreview[] to SelectedItem[] and apply filters
src//hooks/integrations/monday/MondayImportContext.tsx:    filteredPreviewsRef.current = previewsQuery.data
src//hooks/integrations/monday/MondayImportContext.tsx:      .map((preview: ImportPreview) => {
src//hooks/integrations/monday/MondayImportContext.tsx-        // Extract relevant fields from the transformed data
src//hooks/integrations/monday/MondayImportContext.tsx-        const transformedData = preview.transformed || {};
--
src//hooks/integrations/monday/MondayImportContext.tsx-      });
src//hooks/integrations/monday/MondayImportContext.tsx-  }, [
src//hooks/integrations/monday/MondayImportContext.tsx:    previewsQuery.data, 
src//hooks/integrations/monday/MondayImportContext.tsx-    searchTerm,
src//hooks/integrations/monday/MondayImportContext.tsx-    showDuplicates,
--
src//hooks/integrations/monday/MondayImportContext.tsx-    
src//hooks/integrations/monday/MondayImportContext.tsx-    try {
src//hooks/integrations/monday/MondayImportContext.tsx:      stateRef.current.setImportingItemIds(selectedItems.map(item => item.id));
src//hooks/integrations/monday/MondayImportContext.tsx-      
src//hooks/integrations/monday/MondayImportContext.tsx:      const ids = selectedItems.map(item => item.id);
src//hooks/integrations/monday/MondayImportContext.tsx-      const result = await importMutation.mutateAsync({ 
src//hooks/integrations/monday/MondayImportContext.tsx-        ids, 
--
src//hooks/integrations/monday/MondayImportContext.tsx-  const queryValue = useMemo(() => {
src//hooks/integrations/monday/MondayImportContext.tsx-    // Map previews to SelectedItem format if data exists
src//hooks/integrations/monday/MondayImportContext.tsx:    const mappedPreviews: SelectedItem[] = previewsQuery.data 
src//hooks/integrations/monday/MondayImportContext.tsx:      ? previewsQuery.data.map((preview: ImportPreview) => {
src//hooks/integrations/monday/MondayImportContext.tsx-          // Extract relevant fields from the transformed data
src//hooks/integrations/monday/MondayImportContext.tsx-          const transformedData = preview.transformed || {};
--
src//hooks/integrations/monday/MondayImportContext.tsx-    return {
src//hooks/integrations/monday/MondayImportContext.tsx-      // Connection data
src//hooks/integrations/monday/MondayImportContext.tsx:      connectionData: connectionQuery.data,
src//hooks/integrations/monday/MondayImportContext.tsx-      connectionLoading: connectionQuery.isLoading,
src//hooks/integrations/monday/MondayImportContext.tsx-      connectionError: connectionQuery.error?.message || null,
--
src//hooks/integrations/monday/MondayImportContext.tsx-      
src//hooks/integrations/monday/MondayImportContext.tsx-      // Boards data
src//hooks/integrations/monday/MondayImportContext.tsx:      boards: boardsQuery.data || [],
src//hooks/integrations/monday/MondayImportContext.tsx-      boardsLoading: boardsQuery.isLoading,
src//hooks/integrations/monday/MondayImportContext.tsx-      boardsError: boardsQuery.error?.message || null,
--
src//hooks/integrations/monday/MondayImportContext.tsx-      importLoading: importMutation.isPending,
src//hooks/integrations/monday/MondayImportContext.tsx-      importError: importMutation.error?.message || null,
src//hooks/integrations/monday/MondayImportContext.tsx:      importResult: importMutation.data
src//hooks/integrations/monday/MondayImportContext.tsx-    };
src//hooks/integrations/monday/MondayImportContext.tsx-  }, [
src//hooks/integrations/monday/MondayImportContext.tsx:    connectionQuery.data,
src//hooks/integrations/monday/MondayImportContext.tsx-    connectionQuery.isLoading,
src//hooks/integrations/monday/MondayImportContext.tsx-    connectionQuery.error,
src//hooks/integrations/monday/MondayImportContext.tsx-    connectionQuery.refetch,
src//hooks/integrations/monday/MondayImportContext.tsx:    boardsQuery.data,
src//hooks/integrations/monday/MondayImportContext.tsx-    boardsQuery.isLoading,
src//hooks/integrations/monday/MondayImportContext.tsx-    boardsQuery.error,
src//hooks/integrations/monday/MondayImportContext.tsx-    boardsQuery.refetch,
src//hooks/integrations/monday/MondayImportContext.tsx:    previewsQuery.data,
src//hooks/integrations/monday/MondayImportContext.tsx-    previewsQuery.isLoading,
src//hooks/integrations/monday/MondayImportContext.tsx-    previewsQuery.error,
--
src//hooks/integrations/monday/MondayImportContext.tsx-    importMutation.isPending,
src//hooks/integrations/monday/MondayImportContext.tsx-    importMutation.error,
src//hooks/integrations/monday/MondayImportContext.tsx:    importMutation.data,
src//hooks/integrations/monday/MondayImportContext.tsx-  ]);
src//hooks/integrations/monday/MondayImportContext.tsx-  
--
src//hooks/pattern/useEntityHooks.ts-import { useFiltersAndSorting } from '@/hooks/ui/useFiltersAndSorting';
src//hooks/pattern/useEntityHooks.ts-import { BaseDocument } from '@/lib/types/core/document';
src//hooks/pattern/useEntityHooks.ts:import { CollectionResponse, PaginatedResponse } from '@/lib/types/core/response';
src//hooks/pattern/useEntityHooks.ts-
src//hooks/pattern/useEntityHooks.ts-/**
--
src//hooks/pattern/useEntityHooks.ts-  
src//hooks/pattern/useEntityHooks.ts-  // Create additional invalidation keys from related entity types
src//hooks/pattern/useEntityHooks.ts:  const additionalInvalidateKeys = relatedEntityTypes.map(type => 
src//hooks/pattern/useEntityHooks.ts-    queryKeys.entities.list(type)
src//hooks/pattern/useEntityHooks.ts-  );
--
src//hooks/pattern/useEntityHooks.ts-    return {
src//hooks/pattern/useEntityHooks.ts-      // Data and loading state
src//hooks/pattern/useEntityHooks.ts:      data: query.data?.items || [],
src//hooks/pattern/useEntityHooks.ts:      items: query.data?.items || [],
src//hooks/pattern/useEntityHooks.ts-      isLoading: query.isLoading,
src//hooks/pattern/useEntityHooks.ts-      isError: query.isError,
--
src//hooks/pattern/useEntityHooks.ts-      page: filtersAndSorting.page,
src//hooks/pattern/useEntityHooks.ts-      pageSize: filtersAndSorting.pageSize,
src//hooks/pattern/useEntityHooks.ts:      total: query.data?.total || 0,
src//hooks/pattern/useEntityHooks.ts:      totalPages: query.data?.totalPages || 0,
src//hooks/pattern/useEntityHooks.ts-      
src//hooks/pattern/useEntityHooks.ts-      // Filtering and sorting
--
src//hooks/pattern/useEntityHooks.ts-    
src//hooks/pattern/useEntityHooks.ts-    return {
src//hooks/pattern/useEntityHooks.ts:      data: query.data?.items?.[0],
src//hooks/pattern/useEntityHooks.ts-      isLoading: query.isLoading,
src//hooks/pattern/useEntityHooks.ts-      isError: query.isError,
--
src//hooks/pattern/useEntityHooks.ts-    return useMemo(() => ({
src//hooks/pattern/useEntityHooks.ts-      // List data
src//hooks/pattern/useEntityHooks.ts:      items: list.items,
src//hooks/pattern/useEntityHooks.ts-      isLoading: list.isLoading,
src//hooks/pattern/useEntityHooks.ts-      error: list.error,
--
src//hooks/pattern/useEntityHooks.ts-      refetch: list.refetch
src//hooks/pattern/useEntityHooks.ts-    }), [
src//hooks/pattern/useEntityHooks.ts:      list.items,
src//hooks/pattern/useEntityHooks.ts-      list.isLoading,
src//hooks/pattern/useEntityHooks.ts-      list.error,
--
src//hooks/query/useResourceManagerRQ.ts-import { useQueriesManagerRQ } from '@/hooks/query/useQueriesManagerRQ';
src//hooks/query/useResourceManagerRQ.ts-import { queryKeys } from '@/lib/query/query-keys';
src//hooks/query/useResourceManagerRQ.ts:import { CollectionResponse } from '@core-types/response';
src//hooks/query/useResourceManagerRQ.ts-
src//hooks/query/useResourceManagerRQ.ts-export interface ResourceManagerConfig<T, F extends Record<string, unknown> = Record<string, unknown>> {
--
src//hooks/query/usePaginatedQueryRQ.ts-import React from 'react';
src//hooks/query/usePaginatedQueryRQ.ts-import { useQuery, UseQueryOptions } from '@tanstack/react-query';
src//hooks/query/usePaginatedQueryRQ.ts:import { PaginatedResponse } from '@core-types/response';
src//hooks/query/usePaginatedQueryRQ.ts-import { queryKeys } from '@/lib/query/query-keys';
src//hooks/query/usePaginatedQueryRQ.ts-import { handleQueryError } from '@/lib/query/utilities/error-handling';
--
src//hooks/query/usePaginatedQueryRQ.ts-  });
src//hooks/query/usePaginatedQueryRQ.ts-
src//hooks/query/usePaginatedQueryRQ.ts:  const { data, isLoading, isFetching, error, refetch } = query;
src//hooks/query/usePaginatedQueryRQ.ts-
src//hooks/query/usePaginatedQueryRQ.ts:  const items = data?.items ?? [];
src//hooks/query/usePaginatedQueryRQ.ts-  const total = data?.total ?? 0;
src//hooks/query/usePaginatedQueryRQ.ts-  const totalPages = data?.totalPages ?? Math.ceil(total / limit);
--
src//hooks/query/useQueriesManagerRQ.ts-import { queryKeys } from '@/lib/query/query-keys';
src//hooks/query/useQueriesManagerRQ.ts-import { handleClientError } from '@/lib/error';
src//hooks/query/useQueriesManagerRQ.ts:import { CollectionResponse } from '@core-types/response';
src//hooks/query/useQueriesManagerRQ.ts-
src//hooks/query/useQueriesManagerRQ.ts-export interface QueryConfig<T> {
--
src//hooks/query/useQueriesManagerRQ.ts-        }
src//hooks/query/useQueriesManagerRQ.ts-      },
src//hooks/query/useQueriesManagerRQ.ts:      ...relatedQueries.map(query => ({
src//hooks/query/useQueriesManagerRQ.ts-        queryKey: query.queryKey,
src//hooks/query/useQueriesManagerRQ.ts-        queryFn: async () => {
--
src//hooks/query/useQueriesManagerRQ.ts-  return {
src//hooks/query/useQueriesManagerRQ.ts-    // Main query data
src//hooks/query/useQueriesManagerRQ.ts:    data: mainQuery.data?.items?.[0] as T | undefined,
src//hooks/query/useQueriesManagerRQ.ts-    
src//hooks/query/useQueriesManagerRQ.ts-    // Related query data
src//hooks/query/useQueriesManagerRQ.ts:    relatedData: relatedResults.map(result => result.data?.items),
src//hooks/query/useQueriesManagerRQ.ts-    
src//hooks/query/useQueriesManagerRQ.ts-    // Loading and error states
--
src//hooks/query/useBulkOperationsRQ.ts-import { queryKeys } from '@/lib/query/query-keys';
src//hooks/query/useBulkOperationsRQ.ts-import { handleClientError } from '@/lib/error';
src//hooks/query/useBulkOperationsRQ.ts:import { CollectionResponse } from '@core-types/response';
src//hooks/query/useBulkOperationsRQ.ts-
src//hooks/query/useBulkOperationsRQ.ts-export interface BulkOperationOptions<T> {
--
src//hooks/query/useReferenceDataRQ.ts-import { queryKeys } from '@/lib/query/query-keys';
src//hooks/query/useReferenceDataRQ.ts-import { handleClientError } from '@/lib/error';
src//hooks/query/useReferenceDataRQ.ts:import { CollectionResponse } from '@core-types/response';
src//hooks/query/useReferenceDataRQ.ts-
src//hooks/query/useReferenceDataRQ.ts-export interface ReferenceOption {
--
src//hooks/query/useReferenceDataRQ.ts- */
src//hooks/query/useReferenceDataRQ.ts-function defaultSelector(data: CollectionResponse<any>): ReferenceOption[] {
src//hooks/query/useReferenceDataRQ.ts:  if (!data?.items) return [];
src//hooks/query/useReferenceDataRQ.ts-  
src//hooks/query/useReferenceDataRQ.ts:  return data.items.map((item: any) => ({
src//hooks/query/useReferenceDataRQ.ts-    value: item._id || item.id || '',
src//hooks/query/useReferenceDataRQ.ts-    label: item.name || item.title || item.label || item.staffName || item.schoolName || String(item._id || item.id || '')
--
src//hooks/query/useReferenceDataRQ.ts-  
src//hooks/query/useReferenceDataRQ.ts-  return {
src//hooks/query/useReferenceDataRQ.ts:    options: query.data || [],
src//hooks/query/useReferenceDataRQ.ts-    isLoading: query.isLoading,
src//hooks/query/useReferenceDataRQ.ts-    isFetching: query.isFetching,
--
src//hooks/query/useOptimisticMutationRQ.ts-        if (invalidateQueries?.length) {
src//hooks/query/useOptimisticMutationRQ.ts-          await Promise.all(
src//hooks/query/useOptimisticMutationRQ.ts:            invalidateQueries.map(queryKey => 
src//hooks/query/useOptimisticMutationRQ.ts-              queryClient.cancelQueries({ queryKey })
src//hooks/query/useOptimisticMutationRQ.ts-            )
--
src//hooks/data/useReferenceData.ts-  
src//hooks/data/useReferenceData.ts-  // Fetch reference data
src//hooks/data/useReferenceData.ts:  const { data, error, isLoading } = useSWR<{ 
src//hooks/data/useReferenceData.ts-    items: T[];
src//hooks/data/useReferenceData.ts-    success: boolean;
--
src//hooks/data/useReferenceData.ts-  
src//hooks/data/useReferenceData.ts-  // The options list
src//hooks/data/useReferenceData.ts:  const options = useMemo(() => data?.items || [], [data]);
src//hooks/data/useReferenceData.ts-  
src//hooks/data/useReferenceData.ts-  return {
--
src//hooks/data/useReferenceData.ts-  
src//hooks/data/useReferenceData.ts-  // Fetch reference data
src//hooks/data/useReferenceData.ts:  const { data, error, isLoading } = useSWR<{ 
src//hooks/data/useReferenceData.ts-    items: T[],
src//hooks/data/useReferenceData.ts-    success: boolean,
--
src//hooks/data/useReferenceData.ts-  
src//hooks/data/useReferenceData.ts-  // The full list of available options
src//hooks/data/useReferenceData.ts:  const options = useMemo(() => data?.items || [], [data]);
src//hooks/data/useReferenceData.ts-  
src//hooks/data/useReferenceData.ts-  // Total number of options available (for pagination)
--
src//hooks/data/useCrudOperations.ts-import { handleClientError } from "@error/handle-client-error";
src//hooks/data/useCrudOperations.ts-import { WithId, getId } from "@core-types/resource-manager";
src//hooks/data/useCrudOperations.ts:import { ResourceResponse } from '@core-types/response';
src//hooks/data/useCrudOperations.ts-
src//hooks/data/useCrudOperations.ts-// Define proper types for optimistic update functions
--
src//hooks/data/useCrudOperations.ts-    const tempId = `temp-${Date.now()}`;
src//hooks/data/useCrudOperations.ts-    const proxyItem = {
src//hooks/data/useCrudOperations.ts:      ...data as unknown as Partial<T>,
src//hooks/data/useCrudOperations.ts-      id: tempId, // Use id for consistency
src//hooks/data/useCrudOperations.ts-    } as T;
--
src//hooks/data/useCrudOperations.ts-    
src//hooks/data/useCrudOperations.ts-    // Find the existing item
src//hooks/data/useCrudOperations.ts:    const existingItems = data?.items || [];
src//hooks/data/useCrudOperations.ts-    const existingItem = existingItems.find((item) => getId(item) === id);
src//hooks/data/useCrudOperations.ts-    
--
src//hooks/data/useCrudOperations.ts-    
src//hooks/data/useCrudOperations.ts-    // Find the item to remove
src//hooks/data/useCrudOperations.ts:    const existingItems = data?.items || [];
src//hooks/data/useCrudOperations.ts-    const itemToRemove = existingItems.find((item) => getId(item) === id);
src//hooks/data/useCrudOperations.ts-    
--
src//hooks/data/useOptimisticResource.ts-            
src//hooks/data/useOptimisticResource.ts-            return {
src//hooks/data/useOptimisticResource.ts:              items: [...currentData.items, newItem],
src//hooks/data/useOptimisticResource.ts-              total: currentData.total + 1,
src//hooks/data/useOptimisticResource.ts-              success: true
--
src//hooks/data/useOptimisticResource.ts-        }
src//hooks/data/useOptimisticResource.ts-
src//hooks/data/useOptimisticResource.ts:        return { success: true, data: result.data || newItem };
src//hooks/data/useOptimisticResource.ts-      } catch (err) {
src//hooks/data/useOptimisticResource.ts-        // If the API call fails, roll back optimistic update
--
src//hooks/data/useOptimisticResource.ts-            
src//hooks/data/useOptimisticResource.ts-            return {
src//hooks/data/useOptimisticResource.ts:              items: currentData.items.map((item) =>
src//hooks/data/useOptimisticResource.ts-                getId(item) === getId(updatedItem) ? updatedItem : item
src//hooks/data/useOptimisticResource.ts-              ),
--
src//hooks/data/useOptimisticResource.ts-        }
src//hooks/data/useOptimisticResource.ts-
src//hooks/data/useOptimisticResource.ts:        return { success: true, data: result.data || updatedItem };
src//hooks/data/useOptimisticResource.ts-      } catch (err) {
src//hooks/data/useOptimisticResource.ts-        // If the API call fails, roll back optimistic update
--
src//hooks/data/useOptimisticResource.ts-            
src//hooks/data/useOptimisticResource.ts-            return {
src//hooks/data/useOptimisticResource.ts:              items: currentData.items.filter((item) => getId(item) !== getId(itemToRemove)),
src//hooks/data/useOptimisticResource.ts-              total: currentData.total - 1,
src//hooks/data/useOptimisticResource.ts-              success: true
--
src//hooks/data/useResourceManager.ts-
src//hooks/data/useResourceManager.ts-  // Initialize SWR data fetching
src//hooks/data/useResourceManager.ts:  const { data, error, isLoading, mutate } = useSafeSWR(
src//hooks/data/useResourceManager.ts-    cacheKey,
src//hooks/data/useResourceManager.ts-    fetchData,
--
src//hooks/data/useResourceManager.ts-  return {
src//hooks/data/useResourceManager.ts-    // Data state
src//hooks/data/useResourceManager.ts:    items: data?.items || [],
src//hooks/data/useResourceManager.ts-    total: data?.total || 0,
src//hooks/data/useResourceManager.ts-    isLoading,
--
src//hooks/error/useErrorHandledMutation.ts-import { useState, useCallback } from 'react';
src//hooks/error/useErrorHandledMutation.ts-import { handleClientError } from '@error/handle-client-error';
src//hooks/error/useErrorHandledMutation.ts:import { BaseResponse } from '@core-types/response';
src//hooks/error/useErrorHandledMutation.ts-
src//hooks/error/useErrorHandledMutation.ts:// import { ErrorResponse } from '@core-types/error';
src//hooks/error/useErrorHandledMutation.ts-
src//hooks/error/useErrorHandledMutation.ts-/**
src//hooks/error/useErrorHandledMutation.ts- * Response from a server action or API call
src//hooks/error/useErrorHandledMutation.ts- */
src//hooks/error/useErrorHandledMutation.ts:export interface ServerResponse<T = unknown> extends BaseResponse {
src//hooks/error/useErrorHandledMutation.ts-  data?: T;
src//hooks/error/useErrorHandledMutation.ts-}
--
src//hooks/error/useErrorHandledMutation.ts-      // Then try to get from errors array
src//hooks/error/useErrorHandledMutation.ts-      if (response.errors && response.errors.length > 0) {
src//hooks/error/useErrorHandledMutation.ts:        return response.errors.map(e => e.error).join(', ');
src//hooks/error/useErrorHandledMutation.ts-      }
src//hooks/error/useErrorHandledMutation.ts-      
--
src//hooks/error/useErrorHandledMutation.ts-      }
src//hooks/error/useErrorHandledMutation.ts-      
src//hooks/error/useErrorHandledMutation.ts:      setData(response.data || null);
src//hooks/error/useErrorHandledMutation.ts-      setIsSuccess(true);
src//hooks/error/useErrorHandledMutation.ts-      return response as ServerResponse<T>;
--
src//hooks/error/useErrorHandledMutation.ts-  // Omit data from the result since it's always null
src//hooks/error/useErrorHandledMutation.ts-  // eslint-disable-next-line @typescript-eslint/no-unused-vars
src//hooks/error/useErrorHandledMutation.ts:  const { data, ...rest } = result;
src//hooks/error/useErrorHandledMutation.ts-  return rest;
src//hooks/error/useErrorHandledMutation.ts-}
--
src//hooks/domain/useVisitsRQ.ts-import { WithDateObjects } from '@/lib/types/core/document';
src//hooks/domain/useVisitsRQ.ts-import { transformDateFieldsArray } from '@/lib/data-utilities/transformers/date-transformer';
src//hooks/domain/useVisitsRQ.ts:import { PaginatedResponse, CollectionResponse } from '@/lib/types/core/response';
src//hooks/domain/useVisitsRQ.ts-import { PaginationQueryParams } from '@/hooks/pattern/useEntityHooks';
src//hooks/domain/useVisitsRQ.ts-
--
src//hooks/domain/useVisitsRQ.ts-    return {
src//hooks/domain/useVisitsRQ.ts-      ...response,
src//hooks/domain/useVisitsRQ.ts:      items: transformDateFieldsArray(response.items) as VisitWithDates[],
src//hooks/domain/useVisitsRQ.ts-      hasMore: (response.page || 1) < (response.totalPages || 1),
src//hooks/domain/useVisitsRQ.ts-      page: response.page || 1,
--
src//hooks/domain/useVisitsRQ.ts-    return {
src//hooks/domain/useVisitsRQ.ts-      ...response,
src//hooks/domain/useVisitsRQ.ts:      items: transformDateFieldsArray(response.items as unknown[]) as VisitWithDates[]
src//hooks/domain/useVisitsRQ.ts-    };
src//hooks/domain/useVisitsRQ.ts-  }
--
src//hooks/domain/useUserStaff.ts-
src//hooks/domain/useUserStaff.ts-export function useUserStaff() {
src//hooks/domain/useUserStaff.ts:  const { metadata, isSignedIn } = useAuthenticatedUser();
src//hooks/domain/useUserStaff.ts-  
src//hooks/domain/useUserStaff.ts-  // Determine the correct API endpoint based on staff type
--
src//hooks/domain/useUserStaff.ts-  })();
src//hooks/domain/useUserStaff.ts-  
src//hooks/domain/useUserStaff.ts:  const { data, error, isLoading } = useSafeSWR<StaffType>(
src//hooks/domain/useUserStaff.ts-    isSignedIn && apiEndpoint ? apiEndpoint : null,
src//hooks/domain/useUserStaff.ts-    async () => {
--
src//hooks/domain/useUserStaffRQ.ts- */
src//hooks/domain/useUserStaffRQ.ts-export function useUserStaffRQ() {
src//hooks/domain/useUserStaffRQ.ts:  const { metadata, isSignedIn } = useAuthenticatedUser();
src//hooks/domain/useUserStaffRQ.ts-  
src//hooks/domain/useUserStaffRQ.ts-  // Determine if we should fetch staff data
--
src//hooks/domain/useUserStaffRQ.ts-  
src//hooks/domain/useUserStaffRQ.ts-  // Use React Query for data fetching
src//hooks/domain/useUserStaffRQ.ts:  const { data, error, isLoading, isError, refetch } = useQuery({
src//hooks/domain/useUserStaffRQ.ts-    queryKey,
src//hooks/domain/useUserStaffRQ.ts-    queryFn: async () => {
--
src//hooks/domain/useUserStaffRQ.ts-        // Transform dates from strings to Date objects
src//hooks/domain/useUserStaffRQ.ts-        return {
src//hooks/domain/useUserStaffRQ.ts:          ...data,
src//hooks/domain/useUserStaffRQ.ts:          data: transformDateFields(data.data) as StaffWithDates
src//hooks/domain/useUserStaffRQ.ts-        };
src//hooks/domain/useUserStaffRQ.ts-      } catch (error) {
--
src//hooks/domain/useUserStaffRQ.ts-  
src//hooks/domain/useUserStaffRQ.ts-  return {
src//hooks/domain/useUserStaffRQ.ts:    staff: data?.data,
src//hooks/domain/useUserStaffRQ.ts-    error: isError ? error : null,
src//hooks/domain/useUserStaffRQ.ts-    isLoading,
--
src//lib/ui/forms/fieldConfig/core/teaching-lab-staff.ts-    label: 'Admin Level',
src//lib/ui/forms/fieldConfig/core/teaching-lab-staff.ts-    type: 'select',
src//lib/ui/forms/fieldConfig/core/teaching-lab-staff.ts:    options: AdminLevelZod.options.map((value: string) => ({
src//lib/ui/forms/fieldConfig/core/teaching-lab-staff.ts-      value,
src//lib/ui/forms/fieldConfig/core/teaching-lab-staff.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/core/teaching-lab-staff.ts-    label: 'Roles',
src//lib/ui/forms/fieldConfig/core/teaching-lab-staff.ts-    type: 'select',
src//lib/ui/forms/fieldConfig/core/teaching-lab-staff.ts:    options: RolesTLZod.options.map((value: string) => ({
src//lib/ui/forms/fieldConfig/core/teaching-lab-staff.ts-      value,
src//lib/ui/forms/fieldConfig/core/teaching-lab-staff.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/core/staff.ts-    label: 'Grade Levels Supported',
src//lib/ui/forms/fieldConfig/core/staff.ts-    type: 'select',
src//lib/ui/forms/fieldConfig/core/staff.ts:    options: GradeLevelsSupportedZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/core/staff.ts-      value,
src//lib/ui/forms/fieldConfig/core/staff.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/core/staff.ts-    label: 'Subjects',
src//lib/ui/forms/fieldConfig/core/staff.ts-    type: 'select',
src//lib/ui/forms/fieldConfig/core/staff.ts:    options: SubjectsZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/core/staff.ts-      value,
src//lib/ui/forms/fieldConfig/core/staff.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/core/staff.ts-    label: 'Special Groups',
src//lib/ui/forms/fieldConfig/core/staff.ts-    type: 'select',
src//lib/ui/forms/fieldConfig/core/staff.ts:    options: SpecialGroupsZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/core/staff.ts-      value,
src//lib/ui/forms/fieldConfig/core/staff.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/core/staff.ts-    label: 'NYCPS Roles',
src//lib/ui/forms/fieldConfig/core/staff.ts-    type: 'select',
src//lib/ui/forms/fieldConfig/core/staff.ts:    options: RolesNYCPSZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/core/staff.ts-      value,
src//lib/ui/forms/fieldConfig/core/staff.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/core/school.ts-    label: 'Grade Levels Supported',
src//lib/ui/forms/fieldConfig/core/school.ts-    type: 'multi-select',
src//lib/ui/forms/fieldConfig/core/school.ts:    options: GradeLevelsSupportedZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/core/school.ts-      value,
src//lib/ui/forms/fieldConfig/core/school.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/scheduling/schedule.ts-    label: "Bell Schedule Type",
src//lib/ui/forms/fieldConfig/scheduling/schedule.ts-    type: "select",
src//lib/ui/forms/fieldConfig/scheduling/schedule.ts:    options: BellScheduleTypeZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/scheduling/schedule.ts-      value,
src//lib/ui/forms/fieldConfig/scheduling/schedule.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-    label: "Reason Done",
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-    type: "select",
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts:    options: ReasonDoneZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-      value,
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-    label: "Total Duration",
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-    type: "select",
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts:    options: TotalDurationZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-      value,
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-    label: "SOLVES Touchpoint",
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-    type: "select",
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts:    options: SolvesTouchpointZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-      value,
src//lib/ui/forms/fieldConfig/visits/coaching-log.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/visits/visit.ts-    label: "Event Type",
src//lib/ui/forms/fieldConfig/visits/visit.ts-    type: "select",
src//lib/ui/forms/fieldConfig/visits/visit.ts:    options: EventTypeZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/visits/visit.ts-      value,
src//lib/ui/forms/fieldConfig/visits/visit.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/visits/visit.ts-    label: "Duration",
src//lib/ui/forms/fieldConfig/visits/visit.ts-    type: "select",
src//lib/ui/forms/fieldConfig/visits/visit.ts:    options: DurationValues.map((value) => ({
src//lib/ui/forms/fieldConfig/visits/visit.ts-      value,
src//lib/ui/forms/fieldConfig/visits/visit.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/visits/visit.ts-    label: "Purpose",
src//lib/ui/forms/fieldConfig/visits/visit.ts-    type: "select",
src//lib/ui/forms/fieldConfig/visits/visit.ts:    options: SessionPurposeZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/visits/visit.ts-      value,
src//lib/ui/forms/fieldConfig/visits/visit.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/visits/visit.ts-    label: "Allowed Purpose",
src//lib/ui/forms/fieldConfig/visits/visit.ts-    type: "select",
src//lib/ui/forms/fieldConfig/visits/visit.ts:    options: AllowedPurposeZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/visits/visit.ts-      value,
src//lib/ui/forms/fieldConfig/visits/visit.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/visits/visit.ts-    label: "Mode Done",
src//lib/ui/forms/fieldConfig/visits/visit.ts-    type: "select",
src//lib/ui/forms/fieldConfig/visits/visit.ts:    options: ModeDoneZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/visits/visit.ts-      value,
src//lib/ui/forms/fieldConfig/visits/visit.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/visits/visit.ts-    label: "Grade Levels",
src//lib/ui/forms/fieldConfig/visits/visit.ts-    type: "select",
src//lib/ui/forms/fieldConfig/visits/visit.ts:    options: GradeLevelsSupportedZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/visits/visit.ts-      value,
src//lib/ui/forms/fieldConfig/visits/visit.ts-      label: value,
--
src//lib/ui/forms/fieldConfig/shared/notes.ts-    label: "Type",
src//lib/ui/forms/fieldConfig/shared/notes.ts-    type: "select",
src//lib/ui/forms/fieldConfig/shared/notes.ts:    options: NoteTypeZod.options.map((value) => ({
src//lib/ui/forms/fieldConfig/shared/notes.ts-      value,
src//lib/ui/forms/fieldConfig/shared/notes.ts-      label: value,
--
src//lib/ui/table-schema.ts-  }>
src//lib/ui/table-schema.ts-): TableColumnSchema<T>[] {
src//lib/ui/table-schema.ts:  return columns.map((col) => ({
src//lib/ui/table-schema.ts-    ...col,
src//lib/ui/table-schema.ts-    className: col.className ?? '', // fallback
--
src//lib/types/core/resource-manager.ts:import { ResourceResponse } from '@core-types/response';
src//lib/types/core/resource-manager.ts-import type { QueryParams } from "@core-types/api";
src//lib/types/core/resource-manager.ts-// import { BaseDocument } from "@core-types/document";
--
src//lib/types/core/resource-manager.ts-export type WithId<T> = T & { id: string } | T & { _id: string };
src//lib/types/core/resource-manager.ts-
src//lib/types/core/resource-manager.ts:export type FetchFunction<T> = (params: QueryParams) => Promise<ResourceResponse<T>>;
src//lib/types/core/resource-manager.ts-
src//lib/types/core/resource-manager.ts-export interface ResourceManagerOptions {
--
src//lib/types/core/response.ts- * Base response interface for all API responses
src//lib/types/core/response.ts- */
src//lib/types/core/response.ts:export interface BaseResponse {
src//lib/types/core/response.ts-  /** Indicates if the operation was successful */
src//lib/types/core/response.ts-  success: boolean;
--
src//lib/types/core/response.ts- * Standard response type with items array for collection data
src//lib/types/core/response.ts- */
src//lib/types/core/response.ts:export type CollectionResponse<T = Record<string, unknown>> = {
src//lib/types/core/response.ts-  items: T[];
src//lib/types/core/response.ts-  total?: number;
--
src//lib/types/core/response.ts- * Response interface for collections of resources
src//lib/types/core/response.ts- */
src//lib/types/core/response.ts:export interface ResourceResponse<T = unknown> extends BaseResponse {
src//lib/types/core/response.ts-  /** Array of resources */
src//lib/types/core/response.ts-  items: T[];
--
src//lib/types/core/response.ts- * Response interface for paginated resources
src//lib/types/core/response.ts- */
src//lib/types/core/response.ts:export interface PaginatedResponse<T = unknown> extends ResourceResponse<T> {
src//lib/types/core/response.ts-  /** Current page number */
src//lib/types/core/response.ts-  page: number;
--
src//lib/types/core/response.ts- * Response interface for single resource operations
src//lib/types/core/response.ts- */
src//lib/types/core/response.ts:export interface SingleResourceResponse<T = unknown> extends BaseResponse {
src//lib/types/core/response.ts-  /** The resource data */
src//lib/types/core/response.ts-  data: T;
--
src//lib/types/core/response.ts- * Response interface for file upload operations
src//lib/types/core/response.ts- */
src//lib/types/core/response.ts:export interface UploadResponse {
src//lib/types/core/response.ts-  success: boolean;
src//lib/types/core/response.ts-  message: string;
--
src//lib/types/core/error.ts- * Base error response interface for standardized error handling
src//lib/types/core/error.ts- */
src//lib/types/core/error.ts:export interface ErrorResponse {
src//lib/types/core/error.ts-  success: false;
src//lib/types/core/error.ts-  message: string;  // Human-readable error message
--
src//lib/types/core/error.ts- * Response from a server action or API call
src//lib/types/core/error.ts- */
src//lib/types/core/error.ts:export interface ServerResponse<T = unknown> {
src//lib/types/core/error.ts-  success: boolean;
src//lib/types/core/error.ts-  data?: T;
--
src//lib/types/core/error.ts-  // Then try to get from errors array
src//lib/types/core/error.ts-  if (result.errors && result.errors.length > 0) {
src//lib/types/core/error.ts:    return result.errors.map(e => e.error).join(', ');
src//lib/types/core/error.ts-  }
src//lib/types/core/error.ts-  
--
src//lib/types/utilities.ts-import { z } from 'zod';
src//lib/types/utilities.ts:import { BaseResponse, SingleResourceResponse, ResourceResponse } from '@core-types/response';
src//lib/types/utilities.ts-
src//lib/types/utilities.ts-/**
--
src//lib/types/utilities.ts-    isSuccessResponse(response) &&
src//lib/types/utilities.ts-    'data' in response &&
src//lib/types/utilities.ts:    Array.isArray((response as { data: unknown[] }).data)
src//lib/types/utilities.ts-  );
src//lib/types/utilities.ts-} 
--
src//lib/data-schema/zod-schema/validate.ts-export function validate<T>(schema: ZodSchema<T>, data: unknown): T | null {
src//lib/data-schema/zod-schema/validate.ts-  const validation = schema.safeParse(data);
src//lib/data-schema/zod-schema/validate.ts:  return validation.success ? validation.data : null;
src//lib/data-schema/zod-schema/validate.ts-}
--
src//lib/data-utilities/transformers/sanitize.ts- */
src//lib/data-utilities/transformers/sanitize.ts-export function sanitizeDocuments<T extends Record<string, unknown>>(docs: T[]): T[] {
src//lib/data-utilities/transformers/sanitize.ts:  return docs.map((d) => deepSanitize(d)) as T[];
src//lib/data-utilities/transformers/sanitize.ts-}
src//lib/data-utilities/transformers/sanitize.ts-
--
src//lib/data-utilities/transformers/sanitize.ts-export function sanitizeStringArray(arr: string[]): string[] {
src//lib/data-utilities/transformers/sanitize.ts-  try {
src//lib/data-utilities/transformers/sanitize.ts:    return arr.map(str => str.trim().toLowerCase());
src//lib/data-utilities/transformers/sanitize.ts-  } catch (error) {
src//lib/data-utilities/transformers/sanitize.ts-    throw new Error(handleServerError(error));
--
src//lib/data-utilities/transformers/sanitize.ts-
src//lib/data-utilities/transformers/sanitize.ts-  return {
src//lib/data-utilities/transformers/sanitize.ts:    $or: fields.map(field => ({
src//lib/data-utilities/transformers/sanitize.ts-      [field]: { $regex: searchTerm.trim(), $options: "i" }
src//lib/data-utilities/transformers/sanitize.ts-    }))
--
src//lib/data-utilities/transformers/sanitize.ts-  // Handle arrays - recursively process each item
src//lib/data-utilities/transformers/sanitize.ts-  if (Array.isArray(data)) {
src//lib/data-utilities/transformers/sanitize.ts:    return data.map(item => removeTimestampFields(item)) as unknown as T;
src//lib/data-utilities/transformers/sanitize.ts-  }
src//lib/data-utilities/transformers/sanitize.ts-  
--
src//lib/data-utilities/transformers/parse.ts-    throw new Error(handleValidationError(result.error));
src//lib/data-utilities/transformers/parse.ts-  }
src//lib/data-utilities/transformers/parse.ts:  return result.data;
src//lib/data-utilities/transformers/parse.ts-}
src//lib/data-utilities/transformers/parse.ts-
--
src//lib/data-utilities/transformers/parse.ts-    throw new Error(handleValidationError(result.error));
src//lib/data-utilities/transformers/parse.ts-  }
src//lib/data-utilities/transformers/parse.ts:  return result.data;
src//lib/data-utilities/transformers/parse.ts-}
src//lib/data-utilities/transformers/parse.ts-
--
src//lib/data-utilities/transformers/parse.ts-        throw new Error(handleValidationError(result.error));
src//lib/data-utilities/transformers/parse.ts-      }
src//lib/data-utilities/transformers/parse.ts:      return result.data as Partial<InferSchema<Schema>>;
src//lib/data-utilities/transformers/parse.ts-    }
src//lib/data-utilities/transformers/parse.ts-    
--
src//lib/data-utilities/transformers/parse.ts-      throw new Error(handleValidationError(result.error));
src//lib/data-utilities/transformers/parse.ts-    }
src//lib/data-utilities/transformers/parse.ts:    return result.data;
src//lib/data-utilities/transformers/parse.ts-  } catch (error) {
src//lib/data-utilities/transformers/parse.ts-    throw new Error(handleServerError(error));
--
src//lib/data-utilities/transformers/response-transformer.ts:import { CollectionResponse, PaginatedResponse } from '@core-types/response';
src//lib/data-utilities/transformers/response-transformer.ts-import { PaginationQueryParams } from '@pattern-hooks/useEntityHooks';
src//lib/data-utilities/transformers/response-transformer.ts-import { getEntitySelector, safelyApplySelector } from '@/lib/query/selectors/registry';
--
src//lib/data-utilities/transformers/response-transformer.ts-    return {
src//lib/data-utilities/transformers/response-transformer.ts-      ...response,
src//lib/data-utilities/transformers/response-transformer.ts:      items: transformer(response.items || []) as U[]
src//lib/data-utilities/transformers/response-transformer.ts-    };
src//lib/data-utilities/transformers/response-transformer.ts-  } catch (error) {
--
src//lib/data-utilities/transformers/response-transformer.ts-    return {
src//lib/data-utilities/transformers/response-transformer.ts-      ...response,
src//lib/data-utilities/transformers/response-transformer.ts:      items: transformer(response.items || []) as U[]
src//lib/data-utilities/transformers/response-transformer.ts-    };
src//lib/data-utilities/transformers/response-transformer.ts-  } catch (error) {
--
src//lib/data-utilities/transformers/type-helper.ts-      return {
src//lib/data-utilities/transformers/type-helper.ts-        ...result,
src//lib/data-utilities/transformers/type-helper.ts:        items: result.items as T[]
src//lib/data-utilities/transformers/type-helper.ts-      };
src//lib/data-utilities/transformers/type-helper.ts-    };
--
src//lib/integrations/monday/types/transform.ts:import { BaseResponse } from '@core-types/response';
src//lib/integrations/monday/types/transform.ts-
src//lib/integrations/monday/types/transform.ts-/**
--
src//lib/integrations/monday/types/transform.ts- * Transform result from Monday.com item to Visit
src//lib/integrations/monday/types/transform.ts- */
src//lib/integrations/monday/types/transform.ts:export interface TransformResult extends Pick<BaseResponse, 'success'> {
src//lib/integrations/monday/types/transform.ts-  transformed: Record<string, unknown>;
src//lib/integrations/monday/types/transform.ts-  valid: boolean;
--
src//lib/integrations/monday/types/api.ts:import { BaseResponse, ResourceResponse } from '@/lib/types/core/response';
src//lib/integrations/monday/types/api.ts-import { MondayBoard, MondayItem } from '@api-monday/types';
src//lib/integrations/monday/types/api.ts-
--
src//lib/integrations/monday/types/api.ts- * Standard API response wrapper compatible with core response patterns
src//lib/integrations/monday/types/api.ts- */
src//lib/integrations/monday/types/api.ts:export interface ApiResponse<T> extends Pick<BaseResponse, 'success'> {
src//lib/integrations/monday/types/api.ts-  success: boolean;
src//lib/integrations/monday/types/api.ts-  data?: T;
--
src//lib/integrations/monday/types/api.ts- * API response format for board queries
src//lib/integrations/monday/types/api.ts- */
src//lib/integrations/monday/types/api.ts:export interface MondayBoardResponse extends Pick<ResourceResponse<MondayBoard>, 'success'> {
src//lib/integrations/monday/types/api.ts-  boards: MondayBoard[];
src//lib/integrations/monday/types/api.ts-}
--
src//lib/integrations/monday/types/api.ts- * API response format for item queries
src//lib/integrations/monday/types/api.ts- */
src//lib/integrations/monday/types/api.ts:export interface MondayItemsResponse {
src//lib/integrations/monday/types/api.ts-  boards: {
src//lib/integrations/monday/types/api.ts-    items: MondayItem[];
--
src//lib/integrations/monday/types/api.ts- * Testing connection result
src//lib/integrations/monday/types/api.ts- */
src//lib/integrations/monday/types/api.ts:export interface MondayConnectionTestResult extends Pick<BaseResponse, 'success' | 'message'> {
src//lib/integrations/monday/types/api.ts-  success: boolean;
src//lib/integrations/monday/types/api.ts-  data?: {
--
src//lib/integrations/monday/types/api.ts- * Monday.com user API response
src//lib/integrations/monday/types/api.ts- */
src//lib/integrations/monday/types/api.ts:export interface MondayUserResponse {
src//lib/integrations/monday/types/api.ts-  success: boolean;
src//lib/integrations/monday/types/api.ts-  items: MondayUser[];
--
src//lib/integrations/monday/types/board.ts- * Response format for importing from Monday.com
src//lib/integrations/monday/types/board.ts- */
src//lib/integrations/monday/types/board.ts:export interface MondayResponse {
src//lib/integrations/monday/types/board.ts-  boards: MondayBoardWithItemsPage[];
src//lib/integrations/monday/types/board.ts-}
--
src//lib/integrations/monday/types/import.ts:import { BaseResponse } from '@core-types/response';
src//lib/integrations/monday/types/import.ts-
src//lib/integrations/monday/types/import.ts-/**
--
src//lib/integrations/monday/types/import.ts- * Import result from Monday.com items
src//lib/integrations/monday/types/import.ts- */
src//lib/integrations/monday/types/import.ts:export interface ImportResult extends Pick<BaseResponse, 'success' | 'message'> {
src//lib/integrations/monday/types/import.ts-  success: boolean;
src//lib/integrations/monday/types/import.ts-  imported: number;
--
src//lib/integrations/monday/types/import.ts-}
src//lib/integrations/monday/types/import.ts-
src//lib/integrations/monday/types/import.ts:export interface MondayImportResponse {
src//lib/integrations/monday/types/import.ts-  success: boolean;
src//lib/integrations/monday/types/import.ts-  items?: Record<string, unknown>[];
--
src//lib/integrations/monday/config/field-mappings-legacy.ts-      
src//lib/integrations/monday/config/field-mappings-legacy.ts-      // Handle comma-separated string
src//lib/integrations/monday/config/field-mappings-legacy.ts:      const grades = String(value).split(",").map(g => g.trim());
src//lib/integrations/monday/config/field-mappings-legacy.ts-      return grades.filter(grade => 
src//lib/integrations/monday/config/field-mappings-legacy.ts-        GradeLevelsSupportedZod.options.includes(grade)
--
src//lib/integrations/monday/config/field-mappings-legacy.ts-        if (!Array.isArray(parsed)) return [];
src//lib/integrations/monday/config/field-mappings-legacy.ts-        // Transform each item to ensure it has the right shape
src//lib/integrations/monday/config/field-mappings-legacy.ts:        const events = parsed.map(item => ({
src//lib/integrations/monday/config/field-mappings-legacy.ts-          eventType: EventTypeZod.options.includes(item.eventType) 
src//lib/integrations/monday/config/field-mappings-legacy.ts-            ? item.eventType 
--
src//lib/integrations/monday/config/field-mappings-legacy.ts-        if (!Array.isArray(parsed)) return [];
src//lib/integrations/monday/config/field-mappings-legacy.ts-        // Transform each item to ensure it has the right shape
src//lib/integrations/monday/config/field-mappings-legacy.ts:        return parsed.map(item => ({
src//lib/integrations/monday/config/field-mappings-legacy.ts-          purpose: item.purpose || "",
src//lib/integrations/monday/config/field-mappings-legacy.ts-          title: item.title || "",
--
src//lib/integrations/monday/utils/monday-utils.ts-    // For arrays (like multiple people in a person column)
src//lib/integrations/monday/utils/monday-utils.ts-    if (Array.isArray(parsed.personsAndTeams)) {
src//lib/integrations/monday/utils/monday-utils.ts:      return parsed.personsAndTeams.map((p: { name: string }) => p.name).join(", ");
src//lib/integrations/monday/utils/monday-utils.ts-    }
src//lib/integrations/monday/utils/monday-utils.ts-    
--
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts:// src/lib/integrations/monday/mappers/schemas/visit/config.ts
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts-
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts-import { EntityMappingConfig, ValueTransformer } from "@api-monday/types";
--
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts-  personTransformer,
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts-  peopleTransformer
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts:} from "@/lib/integrations/monday/mappers/transformers/value-transformers";
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts-import {
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts-  modeDoneTransformer,
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts-  allowedPurposeTransformer,
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts-  gradeLevelsTransformer
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts:} from "@/lib/integrations/monday/mappers/transformers/base-transformers";
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts-
src//lib/integrations/monday/mappers/board-types/visits-board/config.ts-/**
--
src//lib/integrations/monday/mappers/transformers/field-transformers.ts:// src/lib/integrations/monday/mappers/utils/transformer.ts
src//lib/integrations/monday/mappers/transformers/field-transformers.ts-
src//lib/integrations/monday/mappers/transformers/field-transformers.ts-import { MondayItem, MondayColumn, MondayColumnValue, TransformResult, EntityMappingConfig } from "@api-monday/types";
--
src//lib/integrations/monday/mappers/transformers/value-transformers.ts:// src/lib/integrations/monday/mappers/utils/value-transformers.ts
src//lib/integrations/monday/mappers/transformers/value-transformers.ts-
src//lib/integrations/monday/mappers/transformers/value-transformers.ts-import { MondayColumnValue, ValueTransformer } from "@api-monday/types";
--
src//lib/integrations/monday/mappers/transformers/value-transformers.ts-        const parsed = JSON.parse(value.value);
src//lib/integrations/monday/mappers/transformers/value-transformers.ts-        if (parsed.personsAndTeams && parsed.personsAndTeams.length > 0) {
src//lib/integrations/monday/mappers/transformers/value-transformers.ts:          return parsed.personsAndTeams.map((person: unknown) => (person as { id: string }).id.toString());
src//lib/integrations/monday/mappers/transformers/value-transformers.ts-        }
src//lib/integrations/monday/mappers/transformers/value-transformers.ts-      }
--
src//lib/integrations/monday/mappers/transformers/base-transformers.ts:// src/lib/integrations/monday/mappers/schemas/visit/transformers.ts
src//lib/integrations/monday/mappers/transformers/base-transformers.ts-
src//lib/integrations/monday/mappers/transformers/base-transformers.ts-import { MondayColumnValue } from "@api-monday/types";
--
src//lib/integrations/monday/mappers/entities/visit/base-config.ts:// src/lib/integrations/monday/mappers/adapters/standard/visit-config.ts
src//lib/integrations/monday/mappers/entities/visit/base-config.ts-
src//lib/integrations/monday/mappers/entities/visit/base-config.ts-import { EntityMappingConfig } from "@api-monday/types";
src//lib/integrations/monday/mappers/entities/visit/base-config.ts-import { VisitInput } from "@zod-schema/visits/visit";
src//lib/integrations/monday/mappers/entities/visit/base-config.ts:import { baseVisitMappingConfig } from "@api-monday/mappers/board-types/visits-board/config";
src//lib/integrations/monday/mappers/entities/visit/base-config.ts-
src//lib/integrations/monday/mappers/entities/visit/base-config.ts-/**
--
src//lib/integrations/monday/client/client.ts-      if (result.errors) {
src//lib/integrations/monday/client/client.ts-        throw new Error(
src//lib/integrations/monday/client/client.ts:          `Monday.com API Error: ${result.errors.map((e: { message: string }) => e.message).join(', ')}`
src//lib/integrations/monday/client/client.ts-        );
src//lib/integrations/monday/client/client.ts-      }
src//lib/integrations/monday/client/client.ts-      
src//lib/integrations/monday/client/client.ts:      return result.data as T;
src//lib/integrations/monday/client/client.ts-    } catch (error) {
src//lib/integrations/monday/client/client.ts-      console.error('Monday.com API Request Error:', error);
--
src//lib/integrations/monday/client/client.ts-    
src//lib/integrations/monday/client/client.ts-    // Check if board exists
src//lib/integrations/monday/client/client.ts:    if (!response.boards || response.boards.length === 0) {
src//lib/integrations/monday/client/client.ts-      return { 
src//lib/integrations/monday/client/client.ts-        success: false, 
--
src//lib/integrations/monday/client/client.ts-    return { 
src//lib/integrations/monday/client/client.ts-      success: true, 
src//lib/integrations/monday/client/client.ts:      data: response.boards[0]
src//lib/integrations/monday/client/client.ts-    };
src//lib/integrations/monday/client/client.ts-  } catch (error) {
--
src//lib/integrations/monday/client/client.ts-      );
src//lib/integrations/monday/client/client.ts-      
src//lib/integrations/monday/client/client.ts:      if (boardsResponse.boards) {
src//lib/integrations/monday/client/client.ts:        boards.push(...boardsResponse.boards);
src//lib/integrations/monday/client/client.ts-      }
src//lib/integrations/monday/client/client.ts-    }
--
src//lib/integrations/monday/client/client.ts-    );
src//lib/integrations/monday/client/client.ts-    
src//lib/integrations/monday/client/client.ts:    if (!response.boards || response.boards.length === 0 || !response.boards[0].items_page) {
src//lib/integrations/monday/client/client.ts-      return [];
src//lib/integrations/monday/client/client.ts-    }
src//lib/integrations/monday/client/client.ts-    
src//lib/integrations/monday/client/client.ts:    return response.boards[0].items_page.items;
src//lib/integrations/monday/client/client.ts-  } catch (error) {
src//lib/integrations/monday/client/client.ts-    console.error("Error fetching Monday items:", error);
--
src//lib/integrations/monday/client/client.ts-    );
src//lib/integrations/monday/client/client.ts-    
src//lib/integrations/monday/client/client.ts:    if (!response.items || response.items.length === 0) {
src//lib/integrations/monday/client/client.ts-      throw new Error(`Item with ID ${itemId} not found or not accessible`);
src//lib/integrations/monday/client/client.ts-    }
src//lib/integrations/monday/client/client.ts-    
src//lib/integrations/monday/client/client.ts:    return response.items[0];
src//lib/integrations/monday/client/client.ts-  } catch (error) {
src//lib/integrations/monday/client/client.ts-    console.error("Error fetching Monday item:", error);
--
src//lib/integrations/monday/services/import-service.ts-          
src//lib/integrations/monday/services/import-service.ts-          // Transform the item with validation
src//lib/integrations/monday/services/import-service.ts:          const transformResult = await transformMondayItemToVisit(item);
src//lib/integrations/monday/services/import-service.ts-          
src//lib/integrations/monday/services/import-service.ts-          // Add to preview list
--
src//lib/integrations/monday/services/import-service.ts-      // Handle both string[] and ImportItem[] formats
src//lib/integrations/monday/services/import-service.ts-      const itemsToProcess = Array.isArray(selectedItems) && selectedItems.length > 0 && typeof selectedItems[0] === 'string'
src//lib/integrations/monday/services/import-service.ts:        ? (selectedItems as string[]).map(id => ({ id }))
src//lib/integrations/monday/services/import-service.ts-        : (selectedItems as ImportItem[]);
src//lib/integrations/monday/services/import-service.ts-      
--
src//lib/integrations/monday/services/import-service.ts-          
src//lib/integrations/monday/services/import-service.ts-          // Transform to Visit - this includes auto-assigned owners from coach
src//lib/integrations/monday/services/import-service.ts:          const transformResult = await transformMondayItemToVisit(mondayItem);
src//lib/integrations/monday/services/import-service.ts-          
src//lib/integrations/monday/services/import-service.ts-          if (!transformResult.valid) {
--
src//lib/integrations/monday/services/import-service.ts-          
src//lib/integrations/monday/services/import-service.ts-          if (fullValidation.success) {
src//lib/integrations/monday/services/import-service.ts:            validatedData = fullValidation.data;
src//lib/integrations/monday/services/import-service.ts-          } else {
src//lib/integrations/monday/services/import-service.ts-            // Fall back to import schema for partial imports
--
src//lib/integrations/monday/services/sync-service.ts:import { ApiResponse } from '@api-monday/types';
src//lib/integrations/monday/services/sync-service.ts-import { withDbConnection } from '@data-server/db/ensure-connection';
src//lib/integrations/monday/services/sync-service.ts-import { VisitModel } from '@mongoose-schema/visits/visit.model';
--
src//lib/integrations/monday/services/sync-service.ts-      
src//lib/integrations/monday/services/sync-service.ts-      // Transform Visit to Monday column values
src//lib/integrations/monday/services/sync-service.ts:      const mondayValues = transformVisitToMondayItem(visit.toObject());
src//lib/integrations/monday/services/sync-service.ts-      
src//lib/integrations/monday/services/sync-service.ts-      // Update the Monday.com item
--
src//lib/integrations/monday/services/legacy/monday-service.ts-    
src//lib/integrations/monday/services/legacy/monday-service.ts-    // Check if board exists
src//lib/integrations/monday/services/legacy/monday-service.ts:    if (!response.boards || response.boards.length === 0) {
src//lib/integrations/monday/services/legacy/monday-service.ts-      return { 
src//lib/integrations/monday/services/legacy/monday-service.ts-        success: false, 
--
src//lib/integrations/monday/services/legacy/monday-service.ts-    return { 
src//lib/integrations/monday/services/legacy/monday-service.ts-      success: true, 
src//lib/integrations/monday/services/legacy/monday-service.ts:      items: [response.boards[0]],
src//lib/integrations/monday/services/legacy/monday-service.ts-      total: 1
src//lib/integrations/monday/services/legacy/monday-service.ts-    };
--
src//lib/integrations/monday/services/legacy/dynamic-mapping.ts-      const parsed = JSON.parse(value.value);
src//lib/integrations/monday/services/legacy/dynamic-mapping.ts-      if (parsed.personsAndTeams && parsed.personsAndTeams.length > 0) {
src//lib/integrations/monday/services/legacy/dynamic-mapping.ts:        return parsed.personsAndTeams.map((person: unknown) => (person as { id: string }).id.toString());
src//lib/integrations/monday/services/legacy/dynamic-mapping.ts-      }
src//lib/integrations/monday/services/legacy/dynamic-mapping.ts-    }
--
src//lib/integrations/monday/services/legacy/dynamic-mapping.ts-
src//lib/integrations/monday/services/legacy/dynamic-mapping.ts-/**
src//lib/integrations/monday/services/legacy/dynamic-mapping.ts: * Main function to transform a Monday.com item to a Visit
src//lib/integrations/monday/services/legacy/dynamic-mapping.ts- * This is the function to be called from outside modules
src//lib/integrations/monday/services/legacy/dynamic-mapping.ts- */
--
src//lib/integrations/monday/services/transform-service.ts- * @returns Transformation result with validation info
src//lib/integrations/monday/services/transform-service.ts- */
src//lib/integrations/monday/services/transform-service.ts:export async function transformMondayItemToVisit(mondayItem: MondayItem): Promise<TransformResult> {
src//lib/integrations/monday/services/transform-service.ts-  const transformed: Partial<VisitInput> = {
src//lib/integrations/monday/services/transform-service.ts-    mondayItemId: mondayItem.id,
--
src//lib/integrations/monday/services/transform-service.ts- * @returns Record of Monday column values suitable for the Monday.com API
src//lib/integrations/monday/services/transform-service.ts- */
src//lib/integrations/monday/services/transform-service.ts:export function transformVisitToMondayItem(visit: Visit): Record<string, unknown> {
src//lib/integrations/monday/services/transform-service.ts-  const mondayValues: Record<string, unknown> = {};
src//lib/integrations/monday/services/transform-service.ts-  
--
src//lib/integrations/monday/services/transform-service.ts-        // Monday expects an array of IDs for person columns
src//lib/integrations/monday/services/transform-service.ts-        mondayValues[mondayColumnId] = { 
src//lib/integrations/monday/services/transform-service.ts:          personsAndTeams: fieldValue.map(id => ({ id: String(id) }))
src//lib/integrations/monday/services/transform-service.ts-        };
src//lib/integrations/monday/services/transform-service.ts-      } else {
--
src//lib/data-server/file-handling/file-upload.ts-import { handleServerError } from "@error/handle-server-error";
src//lib/data-server/file-handling/file-upload.ts:import { UploadResponse } from "@core-types/response";
src//lib/data-server/file-handling/file-upload.ts-export async function uploadFileWithProgress(
src//lib/data-server/file-handling/file-upload.ts-  file: File,
--
src//lib/data-server/file-handling/csv-parser.ts-
src//lib/data-server/file-handling/csv-parser.ts-    // Parse headers
src//lib/data-server/file-handling/csv-parser.ts:    const headers = lines[0].split(',').map(header => 
src//lib/data-server/file-handling/csv-parser.ts-      header.trim().toLowerCase().replace(/\s+/g, '_')
src//lib/data-server/file-handling/csv-parser.ts-    );
src//lib/data-server/file-handling/csv-parser.ts-
src//lib/data-server/file-handling/csv-parser.ts-    // Parse data rows
src//lib/data-server/file-handling/csv-parser.ts:    return lines.slice(1).map(line => {
src//lib/data-server/file-handling/csv-parser.ts:      const values = line.split(',').map(value => value.trim());
src//lib/data-server/file-handling/csv-parser.ts-      
src//lib/data-server/file-handling/csv-parser.ts-      if (values.length !== headers.length) {
--
src//lib/data-server/crud/crud-action-factory.ts-import { connectToDB } from "@data-server/db/connection";
src//lib/data-server/crud/crud-action-factory.ts-import { handleCrudError } from "@error/crud-error-handling";
src//lib/data-server/crud/crud-action-factory.ts:import { PaginatedResponse, CollectionResponse } from "@core-types/response";
src//lib/data-server/crud/crud-action-factory.ts-import { QueryParams, buildQueryParams as getDefaultParams } from "@core-types/api";
src//lib/data-server/crud/crud-action-factory.ts-// Import the sanitization utilities
--
src//lib/data-server/crud/crud-action-factory.ts-    
src//lib/data-server/crud/crud-action-factory.ts-    // UPDATED: Validate items against schema with sanitization
src//lib/data-server/crud/crud-action-factory.ts:    const validatedItems = items.map(item => {
src//lib/data-server/crud/crud-action-factory.ts-      try {
src//lib/data-server/crud/crud-action-factory.ts-        // First sanitize the document (convert ObjectIds to strings, etc.)
--
src//lib/data-server/crud/crud-action-factory.ts-        return {
src//lib/data-server/crud/crud-action-factory.ts-          success: result.success,
src//lib/data-server/crud/crud-action-factory.ts:          items: result.data ? [result.data] : [],
src//lib/data-server/crud/crud-action-factory.ts-          message: result.message
src//lib/data-server/crud/crud-action-factory.ts-        };
--
src//lib/data-server/crud/crud-action-factory.ts-        return {
src//lib/data-server/crud/crud-action-factory.ts-          success: result.success,
src//lib/data-server/crud/crud-action-factory.ts:          items: result.data ? [result.data] : [],
src//lib/data-server/crud/crud-action-factory.ts-          message: result.message
src//lib/data-server/crud/crud-action-factory.ts-        };
--
src//lib/data-server/crud/crud-action-factory.ts-        return {
src//lib/data-server/crud/crud-action-factory.ts-          success: result.success,
src//lib/data-server/crud/crud-action-factory.ts:          items: result.data ? [result.data] : [],
src//lib/data-server/crud/crud-action-factory.ts-          message: result.message
src//lib/data-server/crud/crud-action-factory.ts-        };
--
src//lib/data-server/crud/bulk-operations.ts-import { connectToDB } from "@data-server/db/connection";
src//lib/data-server/crud/bulk-operations.ts-import { handleCrudError } from "@error/crud-error-handling";
src//lib/data-server/crud/bulk-operations.ts:import { createErrorResponse } from "@core-types/error";
src//lib/data-server/crud/bulk-operations.ts-import { BulkUploadResult } from "@core-types/crud";
src//lib/data-server/crud/bulk-operations.ts-
--
src//lib/data-server/crud/bulk-operations.ts-
src//lib/data-server/crud/bulk-operations.ts-    // Validate input data
src//lib/data-server/crud/bulk-operations.ts:    const validatedData = data.map(item => 
src//lib/data-server/crud/bulk-operations.ts-      safeParseAndLog(
src//lib/data-server/crud/bulk-operations.ts-        schema,
--
src//lib/data-server/crud/bulk-operations.ts-      success: true,
src//lib/data-server/crud/bulk-operations.ts-      message: successMessage,
src//lib/data-server/crud/bulk-operations.ts:      items: items.map(item => schema.parse(item.toObject())),
src//lib/data-server/crud/bulk-operations.ts-      total: items.length
src//lib/data-server/crud/bulk-operations.ts-    };
--
src//lib/data-server/crud/crud-operations.ts-import type { z } from "zod";
src//lib/data-server/crud/crud-operations.ts-import { BaseDocument } from "@core-types/document";
src//lib/data-server/crud/crud-operations.ts:import { CollectionResponse } from "@core-types/response";
src//lib/data-server/crud/crud-operations.ts-
src//lib/data-server/crud/crud-operations.ts-// Define type alias for inferred schema types
--
src//lib/data-server/db/connection.ts-      // Get database name
src//lib/data-server/db/connection.ts-      if (mongoose.connection.db) {
src//lib/data-server/db/connection.ts:        const dbName = mongoose.connection.db.databaseName;
src//lib/data-server/db/connection.ts-        console.log("📁 Connected to database:", dbName);
src//lib/data-server/db/connection.ts-        
--
src//lib/data-server/db/connection.ts-        try {
src//lib/data-server/db/connection.ts-          const collections = await mongoose.connection.db.listCollections().toArray();
src//lib/data-server/db/connection.ts:          console.log("📋 Available collections:", collections.map(c => c.name).join(", "));
src//lib/data-server/db/connection.ts-          
src//lib/data-server/db/connection.ts-          // Count documents in key collections
--
src//lib/api/responses/standardize.ts:import { CollectionResponse } from '@core-types/response';
src//lib/api/responses/standardize.ts:import { CollectionResponseSchema } from '@zod-schema/validation/response';
src//lib/api/responses/standardize.ts-
src//lib/api/responses/standardize.ts-/**
--
src//lib/api/responses/standardize.ts-    if (
src//lib/api/responses/standardize.ts-      'items' in objectData && 
src//lib/api/responses/standardize.ts:      Array.isArray(objectData.items)
src//lib/api/responses/standardize.ts-    ) {
src//lib/api/responses/standardize.ts-      return CollectionResponseSchema.parse(objectData) as CollectionResponse<T>;
--
src//lib/api/client/base.ts-// src/lib/api/client/base.ts
src//lib/api/client/base.ts:import { CollectionResponsese } from '@core-types/response';
src//lib/api/client/base.ts:import { PaginatedResponse } from '@core-types/response';
src//lib/api/client/base.ts-import { handleClientError } from '@error';
src//lib/api/client/base.ts-
--
src//lib/api/client/school.ts-import { apiClient } from './base';
src//lib/api/client/school.ts-import { School, SchoolInput } from '@/lib/data-schema/zod-schema/core/school';
src//lib/api/client/school.ts:import { PaginatedResponse } from '@/lib/types/core/response';
src//lib/api/client/school.ts:import { CollectionResponse } from '@/lib/types/core/response';
src//lib/api/client/school.ts-
src//lib/api/client/school.ts-export const schoolApiClient = {
--
src//lib/api/handlers/reference-endpoint.ts:import { NextResponse } from "next/server";
src//lib/api/handlers/reference-endpoint.ts-import { handleServerError } from "@/lib/error/handle-server-error";
src//lib/api/handlers/reference-endpoint.ts:import { standardizeResponse } from "@api-responses/standardize";
src//lib/api/handlers/reference-endpoint.ts-import { QueryParams } from "@/lib/types/core/api";
src//lib/api/handlers/reference-endpoint.ts-import { BaseReference } from "@/lib/types/core/reference";
--
src//lib/api/handlers/reference-endpoint.ts-
src//lib/api/handlers/reference-endpoint.ts-      // Map items to reference format
src//lib/api/handlers/reference-endpoint.ts:      const references = data.items.map((item) => mapItem(item as T));
src//lib/api/handlers/reference-endpoint.ts-      
src//lib/api/handlers/reference-endpoint.ts-      console.log(`📤 ${logPrefix} /${endpoint} response: ${references.length} items found`);
--
src//lib/api/validation/clerk-webhook.ts-        isValid: true,
src//lib/api/validation/clerk-webhook.ts-        payload: evt,
src//lib/api/validation/clerk-webhook.ts:        headers: headerValidation.data
src//lib/api/validation/clerk-webhook.ts-      };
src//lib/api/validation/clerk-webhook.ts-    } catch (verifyError: unknown) {
--
src//lib/dev/mocks/scheduleMockGenerator.ts-    school: washingtonHighSchoolId,
src//lib/dev/mocks/scheduleMockGenerator.ts-    bellScheduleType: "uniform",
src//lib/dev/mocks/scheduleMockGenerator.ts:    classSchedule: periods.map(period => ({
src//lib/dev/mocks/scheduleMockGenerator.ts-      _id: generateMongoId(),
src//lib/dev/mocks/scheduleMockGenerator.ts-      dayType: "uniform",
--
src//lib/dev/mocks/scheduleMockGenerator.ts-
src//lib/dev/mocks/scheduleMockGenerator.ts-  // Generate Teacher Schedules based on CSV data with proper _id fields
src//lib/dev/mocks/scheduleMockGenerator.ts:  const teacherSchedules = Object.entries(csvScheduleData).map(([teacherName, classes]) => {
src//lib/dev/mocks/scheduleMockGenerator.ts-    const teacherId = teacherIds[teacherName as keyof typeof teacherIds];
src//lib/dev/mocks/scheduleMockGenerator.ts-    
--
src//lib/dev/mocks/scheduleMockGenerator.ts-          _id: generateMongoId(),
src//lib/dev/mocks/scheduleMockGenerator.ts-          day: 'uniform',
src//lib/dev/mocks/scheduleMockGenerator.ts:          periods: classes.map((classInfo, index) => {
src//lib/dev/mocks/scheduleMockGenerator.ts-            // Determine period type
src//lib/dev/mocks/scheduleMockGenerator.ts-            let periodType;
--
src//lib/dev/mocks/mockVisitData.ts-  
src//lib/dev/mocks/mockVisitData.ts-  // Transform mock rows into the format expected by the schema
src//lib/dev/mocks/mockVisitData.ts:  return mockVisitRows.map((row) => {
src//lib/dev/mocks/mockVisitData.ts-    // Find coach ID
src//lib/dev/mocks/mockVisitData.ts-    const coach = coaches.find(c => c.name === row.coachName) || coaches[0];
src//lib/dev/mocks/mockVisitData.ts-    
src//lib/dev/mocks/mockVisitData.ts-    // Create events
src//lib/dev/mocks/mockVisitData.ts:    const events = row.eventTypes.map((type, index) => {
src//lib/dev/mocks/mockVisitData.ts-      // Find observed teachers
src//lib/dev/mocks/mockVisitData.ts:      const eventStaff = row.observedTeachers.map(teacherName => {
src//lib/dev/mocks/mockVisitData.ts-        const teacherObj = staff.find(s => s.name === teacherName);
src//lib/dev/mocks/mockVisitData.ts-        return teacherObj ? teacherObj.id : staff[0].id;
--
src//lib/dev/mocks/mockVisitData.ts-        title: `${row.eventTypes[0]} - ${row.date}`,
src//lib/dev/mocks/mockVisitData.ts-        url: `https://meeting-link.example.com/${Math.random().toString(36).substring(2, 15)}`,
src//lib/dev/mocks/mockVisitData.ts:        staff: row.observedTeachers.map(teacherName => {
src//lib/dev/mocks/mockVisitData.ts-          const teacherObj = staff.find(s => s.name === teacherName);
src//lib/dev/mocks/mockVisitData.ts-          return teacherObj ? teacherObj.id : staff[0].id;
--
src//lib/dev/mocks/mockVisitData.ts-    const gradeLevelsSupported = row.gradeLevels
src//lib/dev/mocks/mockVisitData.ts-      .filter(grade => GradeLevelsSupportedZod.options.includes(grade as GradeLevelsSupported))
src//lib/dev/mocks/mockVisitData.ts:      .map(grade => grade as GradeLevelsSupported);
src//lib/dev/mocks/mockVisitData.ts-    
src//lib/dev/mocks/mockVisitData.ts-    // Return visit object in the correct format
--
src//lib/dev/mocks/mockData.ts-  school: 'S003',
src//lib/dev/mocks/mockData.ts-  bellScheduleType: "uniform",
src//lib/dev/mocks/mockData.ts:  classSchedule: periods.map(period => ({
src//lib/dev/mocks/mockData.ts-    dayType: "uniform",
src//lib/dev/mocks/mockData.ts-    startTime: period.startTime,
--
src//lib/dev/mocks/mockData.ts-
src//lib/dev/mocks/mockData.ts-// Generate Teacher Schedules based on CSV data
src//lib/dev/mocks/mockData.ts:const mockTeacherSchedules = Object.entries(csvScheduleData).map(([teacherName, classes]) => {
src//lib/dev/mocks/mockData.ts-  const teacherId = teacherIds[teacherName as keyof typeof teacherIds];
src//lib/dev/mocks/mockData.ts-  
--
src//lib/dev/mocks/mockData.ts-      {
src//lib/dev/mocks/mockData.ts-        day: 'uniform',
src//lib/dev/mocks/mockData.ts:        periods: classes.map((classInfo, index) => {
src//lib/dev/mocks/mockData.ts-          // Determine period type
src//lib/dev/mocks/mockData.ts-          let periodType;
--
src//lib/dev/testing/setup-test-user.ts-    });
src//lib/dev/testing/setup-test-user.ts-    
src//lib/dev/testing/setup-test-user.ts:    const users = response.data;
src//lib/dev/testing/setup-test-user.ts-    if (!users || users.length === 0) {
src//lib/dev/testing/setup-test-user.ts-      console.error('User not found:', email);
--
src//lib/query/hydration.ts-): Promise<void> {
src//lib/query/hydration.ts-  await Promise.all(
src//lib/query/hydration.ts:    preloadedQueries.map(({ queryKey, queryFn }) =>
src//lib/query/hydration.ts-      client.prefetchQuery({
src//lib/query/hydration.ts-        queryKey,
--
src//lib/query/crud-hooks-factory.ts-import { useEntityQuery } from '@query-hooks/useEntityQueryRQ';
src//lib/query/crud-hooks-factory.ts-import { useFiltersAndSorting } from '@ui-hooks/useFiltersAndSorting';
src//lib/query/crud-hooks-factory.ts:import { isPaginatedResponse } from './utilities/response-types';
src//lib/query/crud-hooks-factory.ts:import { CollectionResponse, PaginatedResponse } from '@core-types/response';
src//lib/query/crud-hooks-factory.ts-// import { handleClientError } from '@/lib/error';
src//lib/query/crud-hooks-factory.ts-import { useOptimisticMutation } from '@query-hooks/useOptimisticMutationRQ';
--
src//lib/query/crud-hooks-factory.ts-                  return {
src//lib/query/crud-hooks-factory.ts-                    ...old,
src//lib/query/crud-hooks-factory.ts:                    items: [...old.items, tempItem],
src//lib/query/crud-hooks-factory.ts-                    total: old.total + 1
src//lib/query/crud-hooks-factory.ts-                  };
--
src//lib/query/crud-hooks-factory.ts-                  return {
src//lib/query/crud-hooks-factory.ts-                    ...old,
src//lib/query/crud-hooks-factory.ts:                    items: old.items.map((item: T) => 
src//lib/query/crud-hooks-factory.ts-                      (item._id === id || item.id === id)
src//lib/query/crud-hooks-factory.ts:                        ? { ...item, ...data, updatedAt: new Date().toISOString() }
src//lib/query/crud-hooks-factory.ts-                        : item
src//lib/query/crud-hooks-factory.ts-                    )
--
src//lib/query/crud-hooks-factory.ts-                  queryKeys.entities.detail(entityType, id),
src//lib/query/crud-hooks-factory.ts-                  (old: unknown) => {
src//lib/query/crud-hooks-factory.ts:                    if (!old || !old.data) return old;
src//lib/query/crud-hooks-factory.ts-                    
src//lib/query/crud-hooks-factory.ts-                    return {
src//lib/query/crud-hooks-factory.ts-                      ...old,
src//lib/query/crud-hooks-factory.ts-                      data: { 
src//lib/query/crud-hooks-factory.ts:                        ...old.data, 
src//lib/query/crud-hooks-factory.ts:                        ...data, 
src//lib/query/crud-hooks-factory.ts-                        updatedAt: new Date().toISOString() 
src//lib/query/crud-hooks-factory.ts-                      }
--
src//lib/query/crud-hooks-factory.ts-                  return {
src//lib/query/crud-hooks-factory.ts-                    ...old,
src//lib/query/crud-hooks-factory.ts:                    items: old.items.filter((item: T) => item._id !== id && item.id !== id),
src//lib/query/crud-hooks-factory.ts-                    total: Math.max(0, old.total - 1)
src//lib/query/crud-hooks-factory.ts-                  };
--
src//lib/query/utilities/response-types.ts-  selector?: (items: T[]) => R
src//lib/query/utilities/response-types.ts-): R {
src//lib/query/utilities/response-types.ts:  const items = data?.items || [];
src//lib/query/utilities/response-types.ts-  return selector ? selector(items) : items as unknown as R;
src//lib/query/utilities/response-types.ts-}
--
src//lib/query/utilities/response-types.ts-): { items: T[], pagination: Omit<PaginatedResponse<T>, 'items' | 'success' | 'message'> } {
src//lib/query/utilities/response-types.ts-  return {
src//lib/query/utilities/response-types.ts:    items: data?.items || [],
src//lib/query/utilities/response-types.ts-    pagination: {
src//lib/query/utilities/response-types.ts-      page: data?.page || 1,
--
src//lib/query/utilities/response-types.ts- */
src//lib/query/utilities/response-types.ts-export function extractData<T>(response: SingleResourceResponse<T>): T {
src//lib/query/utilities/response-types.ts:  return response?.data as T;
src//lib/query/utilities/response-types.ts-}
src//lib/query/utilities/response-types.ts-
--
src//lib/query/utilities/response-types.ts-    'items' in response &&
src//lib/query/utilities/response-types.ts-    'success' in response &&
src//lib/query/utilities/response-types.ts:    Array.isArray((response as CollectionResponse<T>).items)
src//lib/query/utilities/response-types.ts-  );
src//lib/query/utilities/response-types.ts-}
--
src//lib/query/utilities/optimistic-updates.ts-            return {
src//lib/query/utilities/optimistic-updates.ts-              ...oldData,
src//lib/query/utilities/optimistic-updates.ts:              items: [...oldData.items, processedItem],
src//lib/query/utilities/optimistic-updates.ts-              total: oldData.total + 1,
src//lib/query/utilities/optimistic-updates.ts-              empty: false,
--
src//lib/query/utilities/optimistic-updates.ts-            
src//lib/query/utilities/optimistic-updates.ts-            // Update the matching item
src//lib/query/utilities/optimistic-updates.ts:            const updatedItems = oldData.items.map(item => {
src//lib/query/utilities/optimistic-updates.ts-              const itemId = (item as any)._id;
src//lib/query/utilities/optimistic-updates.ts-              
--
src//lib/query/utilities/optimistic-updates.ts-            
src//lib/query/utilities/optimistic-updates.ts-            // Filter out the deleted item
src//lib/query/utilities/optimistic-updates.ts:            const filteredItems = oldData.items.filter(item => {
src//lib/query/utilities/optimistic-updates.ts-              const itemId = (item as any)._id;
src//lib/query/utilities/optimistic-updates.ts-              return itemId !== id;
--
src//lib/query/utilities/optimistic-updates.ts-    const updateMutation = useMutation({
src//lib/query/utilities/optimistic-updates.ts-      mutationFn: (params: { id: string; data: Partial<InputType> }) => 
src//lib/query/utilities/optimistic-updates.ts:        serverActions.update(params.id, params.data),
src//lib/query/utilities/optimistic-updates.ts-      onMutate: async ({ id, data }) => {
src//lib/query/utilities/optimistic-updates.ts-        await queryClient.cancelQueries({ queryKey: entityListKey });
--
src//lib/query/query-keys.ts-    connection: () => [...queryKeys.monday.all, 'connection'] as const,
src//lib/query/query-keys.ts-    boards: () => [...queryKeys.monday.all, 'boards'] as const,
src//lib/query/query-keys.ts:    board: (id: string) => [...queryKeys.monday.boards(), id] as const,
src//lib/query/query-keys.ts-    visits: () => [...queryKeys.monday.all, 'visits'] as const,
src//lib/query/query-keys.ts-    potentialVisits: (boardId: string) => [...queryKeys.monday.board(boardId), 'potential'] as const,
--
src//lib/query/cache-sync/types.ts-import { QueryKey } from '@tanstack/react-query';
src//lib/query/cache-sync/types.ts:import { BaseResponse } from '@core-types/response';
src//lib/query/cache-sync/types.ts-
src//lib/query/cache-sync/types.ts-/**
--
src//lib/query/cache-sync/types.ts- * Result of a server action with proper typing
src//lib/query/cache-sync/types.ts- */
src//lib/query/cache-sync/types.ts:export type ServerActionResult<T> = Promise<BaseResponse & { data?: T }>;
src//lib/query/cache-sync/types.ts-
src//lib/query/cache-sync/types.ts-/**
--
src//lib/query/cache-sync/cache-operations.ts-import { QueryClient } from '@tanstack/react-query';
src//lib/query/cache-sync/cache-operations.ts-import { queryKeys } from '../query-keys';
src//lib/query/cache-sync/cache-operations.ts:import { CollectionResponse } from '@core-types/response';
src//lib/query/cache-sync/cache-operations.ts-import { EntityCacheOperations } from './types';
src//lib/query/cache-sync/cache-operations.ts-
--
src//lib/query/cache-sync/cache-operations.ts-      queryKeys.entities.detail(entityType, id),
src//lib/query/cache-sync/cache-operations.ts-      (old: CollectionResponse<T> | undefined) => {
src//lib/query/cache-sync/cache-operations.ts:        if (!old || !old.items || old.items.length === 0) return old;
src//lib/query/cache-sync/cache-operations.ts-        
src//lib/query/cache-sync/cache-operations.ts-        return {
src//lib/query/cache-sync/cache-operations.ts-          ...old,
src//lib/query/cache-sync/cache-operations.ts:          items: [updater(old.items[0] as T)] as any
src//lib/query/cache-sync/cache-operations.ts-        };
src//lib/query/cache-sync/cache-operations.ts-      }
--
src//lib/query/cache-sync/cache-operations.ts-      { queryKey: queryKeys.entities.list(entityType) },
src//lib/query/cache-sync/cache-operations.ts-      (old: CollectionResponse<T> | undefined) => {
src//lib/query/cache-sync/cache-operations.ts:        if (!old || !old.items) return old;
src//lib/query/cache-sync/cache-operations.ts-        
src//lib/query/cache-sync/cache-operations.ts-        return {
src//lib/query/cache-sync/cache-operations.ts-          ...old,
src//lib/query/cache-sync/cache-operations.ts:          items: old.items.map((item: any) => {
src//lib/query/cache-sync/cache-operations.ts-            if ((item._id === id || item.id === id)) {
src//lib/query/cache-sync/cache-operations.ts-              return updater(item as T);
--
src//lib/query/cache-sync/cache-operations.ts-        
src//lib/query/cache-sync/cache-operations.ts-        // Check if entity already exists to avoid duplicates
src//lib/query/cache-sync/cache-operations.ts:        const exists = old.items?.some((item: any) => 
src//lib/query/cache-sync/cache-operations.ts-          (item._id === entityId || item.id === entityId)
src//lib/query/cache-sync/cache-operations.ts-        );
--
src//lib/query/cache-sync/cache-operations.ts-        return {
src//lib/query/cache-sync/cache-operations.ts-          ...old,
src//lib/query/cache-sync/cache-operations.ts:          items: [...(old.items || []), entity] as any,
src//lib/query/cache-sync/cache-operations.ts-          total: (old.total || 0) + 1
src//lib/query/cache-sync/cache-operations.ts-        };
--
src//lib/query/cache-sync/cache-operations.ts-      { queryKey: queryKeys.entities.list(entityType) },
src//lib/query/cache-sync/cache-operations.ts-      (old: CollectionResponse<unknown> | undefined) => {
src//lib/query/cache-sync/cache-operations.ts:        if (!old || !old.items) return old;
src//lib/query/cache-sync/cache-operations.ts-        
src//lib/query/cache-sync/cache-operations.ts:        const filteredItems = old.items.filter((item: any) => 
src//lib/query/cache-sync/cache-operations.ts-          item._id !== id && item.id !== id
src//lib/query/cache-sync/cache-operations.ts-        );
--
src//lib/query/selectors/common-selectors.ts-import { StaffWithDates } from '@domain-hooks/useUserStaffRQ';
src//lib/query/selectors/common-selectors.ts-import { VisitWithDates } from '@domain-hooks/useVisitsRQ';
src//lib/query/selectors/common-selectors.ts:import { CollectionResponse } from '@core-types/response';
src//lib/query/selectors/common-selectors.ts-import { BaseDocument } from '@core-types/document';
src//lib/query/selectors/common-selectors.ts-
--
src//lib/query/selectors/common-selectors.ts-  // Register Schools selector
src//lib/query/selectors/common-selectors.ts-  registerEntitySelector<BaseDocument, SchoolWithDates[]>('schools', (data: CollectionResponse<BaseDocument>) => {
src//lib/query/selectors/common-selectors.ts:    return transformDateFieldsArray(data?.items || []) as SchoolWithDates[];
src//lib/query/selectors/common-selectors.ts-  });
src//lib/query/selectors/common-selectors.ts-
src//lib/query/selectors/common-selectors.ts-  // Register Staff selector
src//lib/query/selectors/common-selectors.ts-  registerEntitySelector<unknown, StaffWithDates[]>('staff', (data: CollectionResponse<unknown>) => {
src//lib/query/selectors/common-selectors.ts:    return transformDateFieldsArray(data?.items || []) as StaffWithDates[];
src//lib/query/selectors/common-selectors.ts-  });
src//lib/query/selectors/common-selectors.ts-
src//lib/query/selectors/common-selectors.ts-  // Register Visits selector
src//lib/query/selectors/common-selectors.ts-  registerEntitySelector<unknown, VisitWithDates[]>('visits', (data: CollectionResponse<unknown>) => {
src//lib/query/selectors/common-selectors.ts:    return transformDateFieldsArray(data?.items || []) as VisitWithDates[];
src//lib/query/selectors/common-selectors.ts-  });
src//lib/query/selectors/common-selectors.ts-
--
src//lib/query/selectors/registry.ts:import { CollectionResponse } from '@core-types/response';
src//lib/query/selectors/registry.ts-import { handleClientError } from '@/lib/error/handle-client-error';
src//lib/query/selectors/registry.ts-import { BaseDocument } from '@/lib/types/core/document';
--
src//lib/query/selectors/registry.ts- * Type for selector functions that transform API responses
src//lib/query/selectors/registry.ts- */
src//lib/query/selectors/registry.ts:export type SelectorFunction<T extends BaseDocument, R = T[]> = (data: CollectionResponse<T>) => R;
src//lib/query/selectors/registry.ts-
src//lib/query/selectors/registry.ts-/**
--
src//lib/query/selectors/registry.ts-export function defaultSelector<T extends BaseDocument>(data: CollectionResponse<T>): T[] {
src//lib/query/selectors/registry.ts-  try {
src//lib/query/selectors/registry.ts:    return data?.items || [];
src//lib/query/selectors/registry.ts-  } catch (error) {
src//lib/query/selectors/registry.ts-    // Handle any transformation errors
--
src//lib/error/error-monitor.ts-  error: unknown, 
src//lib/error/error-monitor.ts-  context: ErrorContext = {}
src//lib/error/error-monitor.ts:): ReturnType<typeof createErrorResponse> {
src//lib/error/error-monitor.ts-  // Capture the error with context
src//lib/error/error-monitor.ts-  captureError(error, context);
--
src//lib/error/handle-validation-error.ts-
src//lib/error/handle-validation-error.ts-  // Format error messages with field paths
src//lib/error/handle-validation-error.ts:  const errorMessages = error.errors.map(err => {
src//lib/error/handle-validation-error.ts-    const path = err.path.join(".");
src//lib/error/handle-validation-error.ts-    return `${path}: ${err.message}`;
--
src//lib/domain/imRoutine/render-KH-lesson.tsx-
src//lib/domain/imRoutine/render-KH-lesson.tsx-      <div className="space-y-4">
src//lib/domain/imRoutine/render-KH-lesson.tsx:        {lesson.activities.map((activity: Activity, i: number) => {
src//lib/domain/imRoutine/render-KH-lesson.tsx-          const hasSelectedRoutines = activity.routines.some((r: string) => selectedRoutines.includes(r));
src//lib/domain/imRoutine/render-KH-lesson.tsx-          if (!hasSelectedRoutines) return null;
--
src//lib/domain/imRoutine/render-KH-lesson.tsx-                {activity.routines
src//lib/domain/imRoutine/render-KH-lesson.tsx-                  .filter((routine: string) => selectedRoutines.includes(routine))
src//lib/domain/imRoutine/render-KH-lesson.tsx:                  .map((routine: string, i: number) => (
src//lib/domain/imRoutine/render-KH-lesson.tsx-                    <RoutineBadge
src//lib/domain/imRoutine/render-KH-lesson.tsx-                      key={i}
--
src//lib/domain/imRoutine/render-ILC-esson.tsx-
src//lib/domain/imRoutine/render-ILC-esson.tsx-      <div className="space-y-4">
src//lib/domain/imRoutine/render-ILC-esson.tsx:        {lesson.activities.map((activity: Activity, i: number) => {
src//lib/domain/imRoutine/render-ILC-esson.tsx-          const hasSelectedRoutines = activity.routines.some((r: string) => selectedRoutines.includes(r));
src//lib/domain/imRoutine/render-ILC-esson.tsx-          if (!hasSelectedRoutines) return null;
--
src//lib/domain/imRoutine/render-ILC-esson.tsx-                {activity.routines
src//lib/domain/imRoutine/render-ILC-esson.tsx-                  .filter((routine: string) => selectedRoutines.includes(routine))
src//lib/domain/imRoutine/render-ILC-esson.tsx:                  .map((routine: string, i: number) => (
src//lib/domain/imRoutine/render-ILC-esson.tsx-                    <RoutineBadge
src//lib/domain/imRoutine/render-ILC-esson.tsx-                      key={i}
