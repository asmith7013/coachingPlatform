---
description: 
globs: 
alwaysApply: true
---
Perfect ‚Äî here‚Äôs your Tailwind Variants Refactor Guide for UI Components, designed as a Cursor-friendly checklist with conditional rules depending on the component type (Button, Input, Text, etc.).

‚úÖ Tailwind Variants Refactor Checklist (Cursor Rule Template)

üîß Shared Setup (For All Components)
	1.	Use tv() from tailwind-variants
	‚Ä¢	Create a tv() instance per atomic component (e.g., button, input, heading)
	‚Ä¢	Export both the component() and componentStyles
	2.	Add variant support via variants and defaultVariants
	‚Ä¢	e.g., size, variant, radius, disabled, fullWidth, etc.
	3.	Use compoundVariants if combining multiple variant values triggers specific styles
	4.	Expose TypeScript typings

export type ButtonVariants = Parameters<typeof button>[0];

üß∑ Component-Specific Prompts and Rules

üîò Button
	‚Ä¢	Base file: src/components/ui/button.tsx
	‚Ä¢	Prompt:
	Extract intent + appearance logic using a combo() helper that accepts bg, text, border, and hover. Ensure each compound variant defines all four. Export both the Button component and buttonStyles.
	‚Ä¢	Checklist:
	‚Ä¢	tv() with intent + appearance + loading + disabled + size + radius
	‚Ä¢	All compoundVariants use combo() with explicit bg, text, border, hover
	‚Ä¢	Class coverage for focus, disabled, hover states
	‚Ä¢	Export atomic styles as buttonStyles
	‚Ä¢	Type-safe props using React.ButtonHTMLAttributes<HTMLButtonElement>

üìù Input, Textarea, Select
	‚Ä¢	Shared Traits:
	‚Ä¢	Form controls with value, validation, focus, placeholder, and label
	‚Ä¢	Responsive to error, disabled, and size
	‚Ä¢	Prompt:
	Refactor this input to extract shared tv() variant logic (e.g., size, radius, focus outline, error border). Export both the component and inputStyles as atomic variant helpers.
	‚Ä¢	Checklist:
	‚Ä¢	Extract tv() instance named input
	‚Ä¢	Include size, radius, error, disabled, fullWidth
	‚Ä¢	Focus + outline logic included (focus:outline-2, outline-gray-300, etc.)
	‚Ä¢	error modifies border and ring
	‚Ä¢	Export inputStyles
	‚Ä¢	Wrap in FieldWrapper for label + error

‚úÖ Heading, Text
	‚Ä¢	Pure typography ‚Äî driven by size, weight, variant
	‚Ä¢	Prompt:
	Replace raw typography classnames with a Tailwind Variants instance. Include size, weight, variant (e.g., muted, primary, danger), and optionally align. Export both component and atomic style access (headingStyles, textStyles).
	‚Ä¢	Checklist:
	‚Ä¢	Use tv() to extract textStyles or headingStyles
	‚Ä¢	Include size, weight, variant, align
	‚Ä¢	Use typography.text[size] or typography.heading[level]
	‚Ä¢	Expose HeadingVariants, TextVariants types

üß© Card, FormSection, EmptyState, TableRow, ShellLayout
	‚Ä¢	Composite layout components (multiple children or slots)
	‚Ä¢	Often use internal padding, gap, radius, bg, shadow
	‚Ä¢	Prompt:
	Refactor this layout component to extract style variants like padding, radius, bg, and shadow into a Tailwind Variants config. If applicable, expose a cardStyles or layoutStyles export for reuse.
	‚Ä¢	Checklist:
	‚Ä¢	Variants for padding, radius, gap, shadow, variant (bg style)
	‚Ä¢	Internally used in .header, .content, .footer sections if split
	‚Ä¢	Responsive spacing + tokens respected
	‚Ä¢	Export style function (e.g., cardStyles)
	‚Ä¢	Component-specific slots (e.g., header, footer) respected



	Absolutely ‚Äî here‚Äôs the updated Tailwind Variants Migration Tracker in a Cursor-friendly format with [  ] for incomplete and [x] for completed components.

‚úÖ Tailwind Variants Migration Tracker

	You can manually mark with [x] as you go.
Copy this into variant-shift.mdc or use it in any Markdown doc in Cursor.



