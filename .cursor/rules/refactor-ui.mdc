---
description: 
globs: 
alwaysApply: false
---
Here is your updated and finalized Cursor Prompt — now including explicit enforcement of the textSize naming rule and eliminating all remaining ambiguity. Copy this directly into .cursor/rules/variant-refactor.mdc or use as a project-wide task:

✅ Unified UI Variant Refactor Prompt

Split size, Migrate textColors, and Centralize Variant Types

🔄 Summary of Refactor

What Changed:
	•	size variants are deprecated.
	•	Replaced with:
	•	textSize → from tokens/typography.ts
	•	padding → from tokens/spacing.ts
	•	All color variants must use global textColors from @/lib/ui/tokens
	•	No local color definitions inside tv() calls.
	•	Shared VariantProps types must be centralized in variants/types.ts.

🧩 Step 1: Split size into textSize and padding

🎯 Goal

Replace all bundled size variants with separate, token-driven textSize and padding variants.

✅ Instructions
	1.	Find and remove any variant like:

variants: { size: ... } // ❌

	2.	Replace with:

import { textSizeVariant, paddingVariant } from '@/lib/ui/sharedVariants'

variants: {
  textSize: textSizeVariant.variants.textSize,
  padding: paddingVariant.variants.padding,
  ...
}

	3.	Set default variants:

defaultVariants: {
  textSize: 'base',
  padding: 'md',
}

	4.	Update prop types:

import type { VariantProps } from 'tailwind-variants'
export type MyComponentVariants = VariantProps<typeof myComponent>

textSize?: MyComponentVariants['textSize']
padding?: MyComponentVariants['padding']

🚨 Enforced Naming Rule

	Do not use size as a key in your variants block — even if referencing textSizeVariant.

variants: {
  size: textSizeVariant.variants.size // ❌ Wrong key
  // This still violates your token convention!
}

✅ Correct usage:

variants: {
  textSize: textSizeVariant.variants.textSize // ✅
}

✅ Also update downstream prop usage:

textSize?: TextSizeVariant // ✅
↓
size?: ... // ❌ Never use `size` again

🧩 Step 2: Refactor Local Color Maps to textColors

🎯 Goal

Eliminate any inline color objects and replace with global textColors.

✅ Instructions
	1.	Delete local color definitions:

const color = { ... } // ❌ Remove

	2.	Update variant usage:

variants: { color: color } // ❌
↓
import { textColors } from '@/lib/ui/tokens'

variants: { color: textColors } // ✅

	3.	Ensure the correct import:

import { textColors } from '@/lib/ui/tokens'

✅ Target Files
	•	src/lib/ui/typography.ts
	•	src/lib/ui/variants/typography.ts
	•	src/components/ui/typography/*
	•	Any tv() call that defines a color variant

🧩 Step 3: Centralize Variant Type Definitions

🎯 Goal

Stop repeating VariantProps<typeof ...> inline. Use types from variants/types.ts.

✅ Instructions
	1.	In src/lib/ui/variants/types.ts, export shared types:

import type { VariantProps } from 'tailwind-variants'
import {
  textSizeVariant,
  paddingVariant,
} from '../sharedVariants'
import {
  radiusVariant,
  shadowVariant,
  disabledVariant,
  loadingVariant,
  fullWidthVariant,
} from './common'

export type TextSizeVariant = VariantProps<typeof textSizeVariant>['textSize']
export type PaddingVariant = VariantProps<typeof paddingVariant>['padding']
export type RadiusVariant = VariantProps<typeof radiusVariant>['rounded']
export type ShadowVariant = VariantProps<typeof shadowVariant>['shadow']
export type DisabledVariant = VariantProps<typeof disabledVariant>['disabled']
export type LoadingVariant = VariantProps<typeof loadingVariant>['loading']
export type FullWidthVariant = VariantProps<typeof fullWidthVariant>['fullWidth']

	2.	Refactor component props:

Before:

export type InputVariants = VariantProps<typeof input>

textSize?: InputVariants['textSize']
padding?: InputVariants['padding']

After:

import type { TextSizeVariant, PaddingVariant } from '@/lib/ui/variants/types'

textSize?: TextSizeVariant
padding?: PaddingVariant



📋 Addendum: Track Refactor Progress

✅ At the end of this refactor, clearly list all updated components in your PR description or commit message.

Example:

✅ Updated components:
- Input.tsx
- Select.tsx
- FieldWrapper.tsx
- Button.tsx
- Text.tsx
- Heading.tsx

